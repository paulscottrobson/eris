case 0x000: R0 = (R0+CONST());break; // ldc r0,r0,#*
case 0x001: R0 = (R1+CONST());break; // ldc r0,r1,#*
case 0x002: R0 = (R2+CONST());break; // ldc r0,r2,#*
case 0x003: R0 = (R3+CONST());break; // ldc r0,r3,#*
case 0x004: R0 = (R4+CONST());break; // ldc r0,r4,#*
case 0x005: R0 = (R5+CONST());break; // ldc r0,r5,#*
case 0x006: R0 = (R6+CONST());break; // ldc r0,r6,#*
case 0x007: R0 = (R7+CONST());break; // ldc r0,r7,#*
case 0x008: R0 = (R8+CONST());break; // ldc r0,r8,#*
case 0x009: R0 = (R9+CONST());break; // ldc r0,r9,#*
case 0x00a: R0 = (R10+CONST());break; // ldc r0,r10,#*
case 0x00b: R0 = (R11+CONST());break; // ldc r0,r11,#*
case 0x00c: R0 = (R12+CONST());break; // ldc r0,r12,#*
case 0x00d: R0 = (R13+CONST());break; // ldc r0,r13,#*
case 0x00e: R0 = (R14+CONST());break; // ldc r0,r14,#*
case 0x00f: R0 = FETCH();break; // ldc r0,#*
case 0x010: R1 = (R0+CONST());break; // ldc r1,r0,#*
case 0x011: R1 = (R1+CONST());break; // ldc r1,r1,#*
case 0x012: R1 = (R2+CONST());break; // ldc r1,r2,#*
case 0x013: R1 = (R3+CONST());break; // ldc r1,r3,#*
case 0x014: R1 = (R4+CONST());break; // ldc r1,r4,#*
case 0x015: R1 = (R5+CONST());break; // ldc r1,r5,#*
case 0x016: R1 = (R6+CONST());break; // ldc r1,r6,#*
case 0x017: R1 = (R7+CONST());break; // ldc r1,r7,#*
case 0x018: R1 = (R8+CONST());break; // ldc r1,r8,#*
case 0x019: R1 = (R9+CONST());break; // ldc r1,r9,#*
case 0x01a: R1 = (R10+CONST());break; // ldc r1,r10,#*
case 0x01b: R1 = (R11+CONST());break; // ldc r1,r11,#*
case 0x01c: R1 = (R12+CONST());break; // ldc r1,r12,#*
case 0x01d: R1 = (R13+CONST());break; // ldc r1,r13,#*
case 0x01e: R1 = (R14+CONST());break; // ldc r1,r14,#*
case 0x01f: R1 = FETCH();break; // ldc r1,#*
case 0x020: R2 = (R0+CONST());break; // ldc r2,r0,#*
case 0x021: R2 = (R1+CONST());break; // ldc r2,r1,#*
case 0x022: R2 = (R2+CONST());break; // ldc r2,r2,#*
case 0x023: R2 = (R3+CONST());break; // ldc r2,r3,#*
case 0x024: R2 = (R4+CONST());break; // ldc r2,r4,#*
case 0x025: R2 = (R5+CONST());break; // ldc r2,r5,#*
case 0x026: R2 = (R6+CONST());break; // ldc r2,r6,#*
case 0x027: R2 = (R7+CONST());break; // ldc r2,r7,#*
case 0x028: R2 = (R8+CONST());break; // ldc r2,r8,#*
case 0x029: R2 = (R9+CONST());break; // ldc r2,r9,#*
case 0x02a: R2 = (R10+CONST());break; // ldc r2,r10,#*
case 0x02b: R2 = (R11+CONST());break; // ldc r2,r11,#*
case 0x02c: R2 = (R12+CONST());break; // ldc r2,r12,#*
case 0x02d: R2 = (R13+CONST());break; // ldc r2,r13,#*
case 0x02e: R2 = (R14+CONST());break; // ldc r2,r14,#*
case 0x02f: R2 = FETCH();break; // ldc r2,#*
case 0x030: R3 = (R0+CONST());break; // ldc r3,r0,#*
case 0x031: R3 = (R1+CONST());break; // ldc r3,r1,#*
case 0x032: R3 = (R2+CONST());break; // ldc r3,r2,#*
case 0x033: R3 = (R3+CONST());break; // ldc r3,r3,#*
case 0x034: R3 = (R4+CONST());break; // ldc r3,r4,#*
case 0x035: R3 = (R5+CONST());break; // ldc r3,r5,#*
case 0x036: R3 = (R6+CONST());break; // ldc r3,r6,#*
case 0x037: R3 = (R7+CONST());break; // ldc r3,r7,#*
case 0x038: R3 = (R8+CONST());break; // ldc r3,r8,#*
case 0x039: R3 = (R9+CONST());break; // ldc r3,r9,#*
case 0x03a: R3 = (R10+CONST());break; // ldc r3,r10,#*
case 0x03b: R3 = (R11+CONST());break; // ldc r3,r11,#*
case 0x03c: R3 = (R12+CONST());break; // ldc r3,r12,#*
case 0x03d: R3 = (R13+CONST());break; // ldc r3,r13,#*
case 0x03e: R3 = (R14+CONST());break; // ldc r3,r14,#*
case 0x03f: R3 = FETCH();break; // ldc r3,#*
case 0x040: R4 = (R0+CONST());break; // ldc r4,r0,#*
case 0x041: R4 = (R1+CONST());break; // ldc r4,r1,#*
case 0x042: R4 = (R2+CONST());break; // ldc r4,r2,#*
case 0x043: R4 = (R3+CONST());break; // ldc r4,r3,#*
case 0x044: R4 = (R4+CONST());break; // ldc r4,r4,#*
case 0x045: R4 = (R5+CONST());break; // ldc r4,r5,#*
case 0x046: R4 = (R6+CONST());break; // ldc r4,r6,#*
case 0x047: R4 = (R7+CONST());break; // ldc r4,r7,#*
case 0x048: R4 = (R8+CONST());break; // ldc r4,r8,#*
case 0x049: R4 = (R9+CONST());break; // ldc r4,r9,#*
case 0x04a: R4 = (R10+CONST());break; // ldc r4,r10,#*
case 0x04b: R4 = (R11+CONST());break; // ldc r4,r11,#*
case 0x04c: R4 = (R12+CONST());break; // ldc r4,r12,#*
case 0x04d: R4 = (R13+CONST());break; // ldc r4,r13,#*
case 0x04e: R4 = (R14+CONST());break; // ldc r4,r14,#*
case 0x04f: R4 = FETCH();break; // ldc r4,#*
case 0x050: R5 = (R0+CONST());break; // ldc r5,r0,#*
case 0x051: R5 = (R1+CONST());break; // ldc r5,r1,#*
case 0x052: R5 = (R2+CONST());break; // ldc r5,r2,#*
case 0x053: R5 = (R3+CONST());break; // ldc r5,r3,#*
case 0x054: R5 = (R4+CONST());break; // ldc r5,r4,#*
case 0x055: R5 = (R5+CONST());break; // ldc r5,r5,#*
case 0x056: R5 = (R6+CONST());break; // ldc r5,r6,#*
case 0x057: R5 = (R7+CONST());break; // ldc r5,r7,#*
case 0x058: R5 = (R8+CONST());break; // ldc r5,r8,#*
case 0x059: R5 = (R9+CONST());break; // ldc r5,r9,#*
case 0x05a: R5 = (R10+CONST());break; // ldc r5,r10,#*
case 0x05b: R5 = (R11+CONST());break; // ldc r5,r11,#*
case 0x05c: R5 = (R12+CONST());break; // ldc r5,r12,#*
case 0x05d: R5 = (R13+CONST());break; // ldc r5,r13,#*
case 0x05e: R5 = (R14+CONST());break; // ldc r5,r14,#*
case 0x05f: R5 = FETCH();break; // ldc r5,#*
case 0x060: R6 = (R0+CONST());break; // ldc r6,r0,#*
case 0x061: R6 = (R1+CONST());break; // ldc r6,r1,#*
case 0x062: R6 = (R2+CONST());break; // ldc r6,r2,#*
case 0x063: R6 = (R3+CONST());break; // ldc r6,r3,#*
case 0x064: R6 = (R4+CONST());break; // ldc r6,r4,#*
case 0x065: R6 = (R5+CONST());break; // ldc r6,r5,#*
case 0x066: R6 = (R6+CONST());break; // ldc r6,r6,#*
case 0x067: R6 = (R7+CONST());break; // ldc r6,r7,#*
case 0x068: R6 = (R8+CONST());break; // ldc r6,r8,#*
case 0x069: R6 = (R9+CONST());break; // ldc r6,r9,#*
case 0x06a: R6 = (R10+CONST());break; // ldc r6,r10,#*
case 0x06b: R6 = (R11+CONST());break; // ldc r6,r11,#*
case 0x06c: R6 = (R12+CONST());break; // ldc r6,r12,#*
case 0x06d: R6 = (R13+CONST());break; // ldc r6,r13,#*
case 0x06e: R6 = (R14+CONST());break; // ldc r6,r14,#*
case 0x06f: R6 = FETCH();break; // ldc r6,#*
case 0x070: R7 = (R0+CONST());break; // ldc r7,r0,#*
case 0x071: R7 = (R1+CONST());break; // ldc r7,r1,#*
case 0x072: R7 = (R2+CONST());break; // ldc r7,r2,#*
case 0x073: R7 = (R3+CONST());break; // ldc r7,r3,#*
case 0x074: R7 = (R4+CONST());break; // ldc r7,r4,#*
case 0x075: R7 = (R5+CONST());break; // ldc r7,r5,#*
case 0x076: R7 = (R6+CONST());break; // ldc r7,r6,#*
case 0x077: R7 = (R7+CONST());break; // ldc r7,r7,#*
case 0x078: R7 = (R8+CONST());break; // ldc r7,r8,#*
case 0x079: R7 = (R9+CONST());break; // ldc r7,r9,#*
case 0x07a: R7 = (R10+CONST());break; // ldc r7,r10,#*
case 0x07b: R7 = (R11+CONST());break; // ldc r7,r11,#*
case 0x07c: R7 = (R12+CONST());break; // ldc r7,r12,#*
case 0x07d: R7 = (R13+CONST());break; // ldc r7,r13,#*
case 0x07e: R7 = (R14+CONST());break; // ldc r7,r14,#*
case 0x07f: R7 = FETCH();break; // ldc r7,#*
case 0x080: R8 = (R0+CONST());break; // ldc r8,r0,#*
case 0x081: R8 = (R1+CONST());break; // ldc r8,r1,#*
case 0x082: R8 = (R2+CONST());break; // ldc r8,r2,#*
case 0x083: R8 = (R3+CONST());break; // ldc r8,r3,#*
case 0x084: R8 = (R4+CONST());break; // ldc r8,r4,#*
case 0x085: R8 = (R5+CONST());break; // ldc r8,r5,#*
case 0x086: R8 = (R6+CONST());break; // ldc r8,r6,#*
case 0x087: R8 = (R7+CONST());break; // ldc r8,r7,#*
case 0x088: R8 = (R8+CONST());break; // ldc r8,r8,#*
case 0x089: R8 = (R9+CONST());break; // ldc r8,r9,#*
case 0x08a: R8 = (R10+CONST());break; // ldc r8,r10,#*
case 0x08b: R8 = (R11+CONST());break; // ldc r8,r11,#*
case 0x08c: R8 = (R12+CONST());break; // ldc r8,r12,#*
case 0x08d: R8 = (R13+CONST());break; // ldc r8,r13,#*
case 0x08e: R8 = (R14+CONST());break; // ldc r8,r14,#*
case 0x08f: R8 = FETCH();break; // ldc r8,#*
case 0x090: R9 = (R0+CONST());break; // ldc r9,r0,#*
case 0x091: R9 = (R1+CONST());break; // ldc r9,r1,#*
case 0x092: R9 = (R2+CONST());break; // ldc r9,r2,#*
case 0x093: R9 = (R3+CONST());break; // ldc r9,r3,#*
case 0x094: R9 = (R4+CONST());break; // ldc r9,r4,#*
case 0x095: R9 = (R5+CONST());break; // ldc r9,r5,#*
case 0x096: R9 = (R6+CONST());break; // ldc r9,r6,#*
case 0x097: R9 = (R7+CONST());break; // ldc r9,r7,#*
case 0x098: R9 = (R8+CONST());break; // ldc r9,r8,#*
case 0x099: R9 = (R9+CONST());break; // ldc r9,r9,#*
case 0x09a: R9 = (R10+CONST());break; // ldc r9,r10,#*
case 0x09b: R9 = (R11+CONST());break; // ldc r9,r11,#*
case 0x09c: R9 = (R12+CONST());break; // ldc r9,r12,#*
case 0x09d: R9 = (R13+CONST());break; // ldc r9,r13,#*
case 0x09e: R9 = (R14+CONST());break; // ldc r9,r14,#*
case 0x09f: R9 = FETCH();break; // ldc r9,#*
case 0x0a0: R10 = (R0+CONST());break; // ldc r10,r0,#*
case 0x0a1: R10 = (R1+CONST());break; // ldc r10,r1,#*
case 0x0a2: R10 = (R2+CONST());break; // ldc r10,r2,#*
case 0x0a3: R10 = (R3+CONST());break; // ldc r10,r3,#*
case 0x0a4: R10 = (R4+CONST());break; // ldc r10,r4,#*
case 0x0a5: R10 = (R5+CONST());break; // ldc r10,r5,#*
case 0x0a6: R10 = (R6+CONST());break; // ldc r10,r6,#*
case 0x0a7: R10 = (R7+CONST());break; // ldc r10,r7,#*
case 0x0a8: R10 = (R8+CONST());break; // ldc r10,r8,#*
case 0x0a9: R10 = (R9+CONST());break; // ldc r10,r9,#*
case 0x0aa: R10 = (R10+CONST());break; // ldc r10,r10,#*
case 0x0ab: R10 = (R11+CONST());break; // ldc r10,r11,#*
case 0x0ac: R10 = (R12+CONST());break; // ldc r10,r12,#*
case 0x0ad: R10 = (R13+CONST());break; // ldc r10,r13,#*
case 0x0ae: R10 = (R14+CONST());break; // ldc r10,r14,#*
case 0x0af: R10 = FETCH();break; // ldc r10,#*
case 0x0b0: R11 = (R0+CONST());break; // ldc r11,r0,#*
case 0x0b1: R11 = (R1+CONST());break; // ldc r11,r1,#*
case 0x0b2: R11 = (R2+CONST());break; // ldc r11,r2,#*
case 0x0b3: R11 = (R3+CONST());break; // ldc r11,r3,#*
case 0x0b4: R11 = (R4+CONST());break; // ldc r11,r4,#*
case 0x0b5: R11 = (R5+CONST());break; // ldc r11,r5,#*
case 0x0b6: R11 = (R6+CONST());break; // ldc r11,r6,#*
case 0x0b7: R11 = (R7+CONST());break; // ldc r11,r7,#*
case 0x0b8: R11 = (R8+CONST());break; // ldc r11,r8,#*
case 0x0b9: R11 = (R9+CONST());break; // ldc r11,r9,#*
case 0x0ba: R11 = (R10+CONST());break; // ldc r11,r10,#*
case 0x0bb: R11 = (R11+CONST());break; // ldc r11,r11,#*
case 0x0bc: R11 = (R12+CONST());break; // ldc r11,r12,#*
case 0x0bd: R11 = (R13+CONST());break; // ldc r11,r13,#*
case 0x0be: R11 = (R14+CONST());break; // ldc r11,r14,#*
case 0x0bf: R11 = FETCH();break; // ldc r11,#*
case 0x0c0: R12 = (R0+CONST());break; // ldc r12,r0,#*
case 0x0c1: R12 = (R1+CONST());break; // ldc r12,r1,#*
case 0x0c2: R12 = (R2+CONST());break; // ldc r12,r2,#*
case 0x0c3: R12 = (R3+CONST());break; // ldc r12,r3,#*
case 0x0c4: R12 = (R4+CONST());break; // ldc r12,r4,#*
case 0x0c5: R12 = (R5+CONST());break; // ldc r12,r5,#*
case 0x0c6: R12 = (R6+CONST());break; // ldc r12,r6,#*
case 0x0c7: R12 = (R7+CONST());break; // ldc r12,r7,#*
case 0x0c8: R12 = (R8+CONST());break; // ldc r12,r8,#*
case 0x0c9: R12 = (R9+CONST());break; // ldc r12,r9,#*
case 0x0ca: R12 = (R10+CONST());break; // ldc r12,r10,#*
case 0x0cb: R12 = (R11+CONST());break; // ldc r12,r11,#*
case 0x0cc: R12 = (R12+CONST());break; // ldc r12,r12,#*
case 0x0cd: R12 = (R13+CONST());break; // ldc r12,r13,#*
case 0x0ce: R12 = (R14+CONST());break; // ldc r12,r14,#*
case 0x0cf: R12 = FETCH();break; // ldc r12,#*
case 0x0d0: R13 = (R0+CONST());break; // ldc r13,r0,#*
case 0x0d1: R13 = (R1+CONST());break; // ldc r13,r1,#*
case 0x0d2: R13 = (R2+CONST());break; // ldc r13,r2,#*
case 0x0d3: R13 = (R3+CONST());break; // ldc r13,r3,#*
case 0x0d4: R13 = (R4+CONST());break; // ldc r13,r4,#*
case 0x0d5: R13 = (R5+CONST());break; // ldc r13,r5,#*
case 0x0d6: R13 = (R6+CONST());break; // ldc r13,r6,#*
case 0x0d7: R13 = (R7+CONST());break; // ldc r13,r7,#*
case 0x0d8: R13 = (R8+CONST());break; // ldc r13,r8,#*
case 0x0d9: R13 = (R9+CONST());break; // ldc r13,r9,#*
case 0x0da: R13 = (R10+CONST());break; // ldc r13,r10,#*
case 0x0db: R13 = (R11+CONST());break; // ldc r13,r11,#*
case 0x0dc: R13 = (R12+CONST());break; // ldc r13,r12,#*
case 0x0dd: R13 = (R13+CONST());break; // ldc r13,r13,#*
case 0x0de: R13 = (R14+CONST());break; // ldc r13,r14,#*
case 0x0df: R13 = FETCH();break; // ldc r13,#*
case 0x0e0: R14 = (R0+CONST());break; // ldc r14,r0,#*
case 0x0e1: R14 = (R1+CONST());break; // ldc r14,r1,#*
case 0x0e2: R14 = (R2+CONST());break; // ldc r14,r2,#*
case 0x0e3: R14 = (R3+CONST());break; // ldc r14,r3,#*
case 0x0e4: R14 = (R4+CONST());break; // ldc r14,r4,#*
case 0x0e5: R14 = (R5+CONST());break; // ldc r14,r5,#*
case 0x0e6: R14 = (R6+CONST());break; // ldc r14,r6,#*
case 0x0e7: R14 = (R7+CONST());break; // ldc r14,r7,#*
case 0x0e8: R14 = (R8+CONST());break; // ldc r14,r8,#*
case 0x0e9: R14 = (R9+CONST());break; // ldc r14,r9,#*
case 0x0ea: R14 = (R10+CONST());break; // ldc r14,r10,#*
case 0x0eb: R14 = (R11+CONST());break; // ldc r14,r11,#*
case 0x0ec: R14 = (R12+CONST());break; // ldc r14,r12,#*
case 0x0ed: R14 = (R13+CONST());break; // ldc r14,r13,#*
case 0x0ee: R14 = (R14+CONST());break; // ldc r14,r14,#*
case 0x0ef: R14 = FETCH();break; // ldc r14,#*
case 0x0f0: R15 = (R0+CONST());break; // ldc r15,r0,#*
case 0x0f1: R15 = (R1+CONST());break; // ldc r15,r1,#*
case 0x0f2: R15 = (R2+CONST());break; // ldc r15,r2,#*
case 0x0f3: R15 = (R3+CONST());break; // ldc r15,r3,#*
case 0x0f4: R15 = (R4+CONST());break; // ldc r15,r4,#*
case 0x0f5: R15 = (R5+CONST());break; // ldc r15,r5,#*
case 0x0f6: R15 = (R6+CONST());break; // ldc r15,r6,#*
case 0x0f7: R15 = (R7+CONST());break; // ldc r15,r7,#*
case 0x0f8: R15 = (R8+CONST());break; // ldc r15,r8,#*
case 0x0f9: R15 = (R9+CONST());break; // ldc r15,r9,#*
case 0x0fa: R15 = (R10+CONST());break; // ldc r15,r10,#*
case 0x0fb: R15 = (R11+CONST());break; // ldc r15,r11,#*
case 0x0fc: R15 = (R12+CONST());break; // ldc r15,r12,#*
case 0x0fd: R15 = (R13+CONST());break; // ldc r15,r13,#*
case 0x0fe: R15 = (R14+CONST());break; // ldc r15,r14,#*
case 0x0ff: R15 = FETCH();break; // ldc r15,#*
case 0x100: R0 = READ((R0+CONST()));break; // ldm r0,r0,#*
case 0x101: R0 = READ((R1+CONST()));break; // ldm r0,r1,#*
case 0x102: R0 = READ((R2+CONST()));break; // ldm r0,r2,#*
case 0x103: R0 = READ((R3+CONST()));break; // ldm r0,r3,#*
case 0x104: R0 = READ((R4+CONST()));break; // ldm r0,r4,#*
case 0x105: R0 = READ((R5+CONST()));break; // ldm r0,r5,#*
case 0x106: R0 = READ((R6+CONST()));break; // ldm r0,r6,#*
case 0x107: R0 = READ((R7+CONST()));break; // ldm r0,r7,#*
case 0x108: R0 = READ((R8+CONST()));break; // ldm r0,r8,#*
case 0x109: R0 = READ((R9+CONST()));break; // ldm r0,r9,#*
case 0x10a: R0 = READ((R10+CONST()));break; // ldm r0,r10,#*
case 0x10b: R0 = READ((R11+CONST()));break; // ldm r0,r11,#*
case 0x10c: R0 = READ((R12+CONST()));break; // ldm r0,r12,#*
case 0x10d: R0 = READ((R13+CONST()));break; // ldm r0,r13,#*
case 0x10e: R0 = READ((R14+CONST()));break; // ldm r0,r14,#*
case 0x10f: R0 = READ(FETCH());break; // ldm r0,#*
case 0x110: R1 = READ((R0+CONST()));break; // ldm r1,r0,#*
case 0x111: R1 = READ((R1+CONST()));break; // ldm r1,r1,#*
case 0x112: R1 = READ((R2+CONST()));break; // ldm r1,r2,#*
case 0x113: R1 = READ((R3+CONST()));break; // ldm r1,r3,#*
case 0x114: R1 = READ((R4+CONST()));break; // ldm r1,r4,#*
case 0x115: R1 = READ((R5+CONST()));break; // ldm r1,r5,#*
case 0x116: R1 = READ((R6+CONST()));break; // ldm r1,r6,#*
case 0x117: R1 = READ((R7+CONST()));break; // ldm r1,r7,#*
case 0x118: R1 = READ((R8+CONST()));break; // ldm r1,r8,#*
case 0x119: R1 = READ((R9+CONST()));break; // ldm r1,r9,#*
case 0x11a: R1 = READ((R10+CONST()));break; // ldm r1,r10,#*
case 0x11b: R1 = READ((R11+CONST()));break; // ldm r1,r11,#*
case 0x11c: R1 = READ((R12+CONST()));break; // ldm r1,r12,#*
case 0x11d: R1 = READ((R13+CONST()));break; // ldm r1,r13,#*
case 0x11e: R1 = READ((R14+CONST()));break; // ldm r1,r14,#*
case 0x11f: R1 = READ(FETCH());break; // ldm r1,#*
case 0x120: R2 = READ((R0+CONST()));break; // ldm r2,r0,#*
case 0x121: R2 = READ((R1+CONST()));break; // ldm r2,r1,#*
case 0x122: R2 = READ((R2+CONST()));break; // ldm r2,r2,#*
case 0x123: R2 = READ((R3+CONST()));break; // ldm r2,r3,#*
case 0x124: R2 = READ((R4+CONST()));break; // ldm r2,r4,#*
case 0x125: R2 = READ((R5+CONST()));break; // ldm r2,r5,#*
case 0x126: R2 = READ((R6+CONST()));break; // ldm r2,r6,#*
case 0x127: R2 = READ((R7+CONST()));break; // ldm r2,r7,#*
case 0x128: R2 = READ((R8+CONST()));break; // ldm r2,r8,#*
case 0x129: R2 = READ((R9+CONST()));break; // ldm r2,r9,#*
case 0x12a: R2 = READ((R10+CONST()));break; // ldm r2,r10,#*
case 0x12b: R2 = READ((R11+CONST()));break; // ldm r2,r11,#*
case 0x12c: R2 = READ((R12+CONST()));break; // ldm r2,r12,#*
case 0x12d: R2 = READ((R13+CONST()));break; // ldm r2,r13,#*
case 0x12e: R2 = READ((R14+CONST()));break; // ldm r2,r14,#*
case 0x12f: R2 = READ(FETCH());break; // ldm r2,#*
case 0x130: R3 = READ((R0+CONST()));break; // ldm r3,r0,#*
case 0x131: R3 = READ((R1+CONST()));break; // ldm r3,r1,#*
case 0x132: R3 = READ((R2+CONST()));break; // ldm r3,r2,#*
case 0x133: R3 = READ((R3+CONST()));break; // ldm r3,r3,#*
case 0x134: R3 = READ((R4+CONST()));break; // ldm r3,r4,#*
case 0x135: R3 = READ((R5+CONST()));break; // ldm r3,r5,#*
case 0x136: R3 = READ((R6+CONST()));break; // ldm r3,r6,#*
case 0x137: R3 = READ((R7+CONST()));break; // ldm r3,r7,#*
case 0x138: R3 = READ((R8+CONST()));break; // ldm r3,r8,#*
case 0x139: R3 = READ((R9+CONST()));break; // ldm r3,r9,#*
case 0x13a: R3 = READ((R10+CONST()));break; // ldm r3,r10,#*
case 0x13b: R3 = READ((R11+CONST()));break; // ldm r3,r11,#*
case 0x13c: R3 = READ((R12+CONST()));break; // ldm r3,r12,#*
case 0x13d: R3 = READ((R13+CONST()));break; // ldm r3,r13,#*
case 0x13e: R3 = READ((R14+CONST()));break; // ldm r3,r14,#*
case 0x13f: R3 = READ(FETCH());break; // ldm r3,#*
case 0x140: R4 = READ((R0+CONST()));break; // ldm r4,r0,#*
case 0x141: R4 = READ((R1+CONST()));break; // ldm r4,r1,#*
case 0x142: R4 = READ((R2+CONST()));break; // ldm r4,r2,#*
case 0x143: R4 = READ((R3+CONST()));break; // ldm r4,r3,#*
case 0x144: R4 = READ((R4+CONST()));break; // ldm r4,r4,#*
case 0x145: R4 = READ((R5+CONST()));break; // ldm r4,r5,#*
case 0x146: R4 = READ((R6+CONST()));break; // ldm r4,r6,#*
case 0x147: R4 = READ((R7+CONST()));break; // ldm r4,r7,#*
case 0x148: R4 = READ((R8+CONST()));break; // ldm r4,r8,#*
case 0x149: R4 = READ((R9+CONST()));break; // ldm r4,r9,#*
case 0x14a: R4 = READ((R10+CONST()));break; // ldm r4,r10,#*
case 0x14b: R4 = READ((R11+CONST()));break; // ldm r4,r11,#*
case 0x14c: R4 = READ((R12+CONST()));break; // ldm r4,r12,#*
case 0x14d: R4 = READ((R13+CONST()));break; // ldm r4,r13,#*
case 0x14e: R4 = READ((R14+CONST()));break; // ldm r4,r14,#*
case 0x14f: R4 = READ(FETCH());break; // ldm r4,#*
case 0x150: R5 = READ((R0+CONST()));break; // ldm r5,r0,#*
case 0x151: R5 = READ((R1+CONST()));break; // ldm r5,r1,#*
case 0x152: R5 = READ((R2+CONST()));break; // ldm r5,r2,#*
case 0x153: R5 = READ((R3+CONST()));break; // ldm r5,r3,#*
case 0x154: R5 = READ((R4+CONST()));break; // ldm r5,r4,#*
case 0x155: R5 = READ((R5+CONST()));break; // ldm r5,r5,#*
case 0x156: R5 = READ((R6+CONST()));break; // ldm r5,r6,#*
case 0x157: R5 = READ((R7+CONST()));break; // ldm r5,r7,#*
case 0x158: R5 = READ((R8+CONST()));break; // ldm r5,r8,#*
case 0x159: R5 = READ((R9+CONST()));break; // ldm r5,r9,#*
case 0x15a: R5 = READ((R10+CONST()));break; // ldm r5,r10,#*
case 0x15b: R5 = READ((R11+CONST()));break; // ldm r5,r11,#*
case 0x15c: R5 = READ((R12+CONST()));break; // ldm r5,r12,#*
case 0x15d: R5 = READ((R13+CONST()));break; // ldm r5,r13,#*
case 0x15e: R5 = READ((R14+CONST()));break; // ldm r5,r14,#*
case 0x15f: R5 = READ(FETCH());break; // ldm r5,#*
case 0x160: R6 = READ((R0+CONST()));break; // ldm r6,r0,#*
case 0x161: R6 = READ((R1+CONST()));break; // ldm r6,r1,#*
case 0x162: R6 = READ((R2+CONST()));break; // ldm r6,r2,#*
case 0x163: R6 = READ((R3+CONST()));break; // ldm r6,r3,#*
case 0x164: R6 = READ((R4+CONST()));break; // ldm r6,r4,#*
case 0x165: R6 = READ((R5+CONST()));break; // ldm r6,r5,#*
case 0x166: R6 = READ((R6+CONST()));break; // ldm r6,r6,#*
case 0x167: R6 = READ((R7+CONST()));break; // ldm r6,r7,#*
case 0x168: R6 = READ((R8+CONST()));break; // ldm r6,r8,#*
case 0x169: R6 = READ((R9+CONST()));break; // ldm r6,r9,#*
case 0x16a: R6 = READ((R10+CONST()));break; // ldm r6,r10,#*
case 0x16b: R6 = READ((R11+CONST()));break; // ldm r6,r11,#*
case 0x16c: R6 = READ((R12+CONST()));break; // ldm r6,r12,#*
case 0x16d: R6 = READ((R13+CONST()));break; // ldm r6,r13,#*
case 0x16e: R6 = READ((R14+CONST()));break; // ldm r6,r14,#*
case 0x16f: R6 = READ(FETCH());break; // ldm r6,#*
case 0x170: R7 = READ((R0+CONST()));break; // ldm r7,r0,#*
case 0x171: R7 = READ((R1+CONST()));break; // ldm r7,r1,#*
case 0x172: R7 = READ((R2+CONST()));break; // ldm r7,r2,#*
case 0x173: R7 = READ((R3+CONST()));break; // ldm r7,r3,#*
case 0x174: R7 = READ((R4+CONST()));break; // ldm r7,r4,#*
case 0x175: R7 = READ((R5+CONST()));break; // ldm r7,r5,#*
case 0x176: R7 = READ((R6+CONST()));break; // ldm r7,r6,#*
case 0x177: R7 = READ((R7+CONST()));break; // ldm r7,r7,#*
case 0x178: R7 = READ((R8+CONST()));break; // ldm r7,r8,#*
case 0x179: R7 = READ((R9+CONST()));break; // ldm r7,r9,#*
case 0x17a: R7 = READ((R10+CONST()));break; // ldm r7,r10,#*
case 0x17b: R7 = READ((R11+CONST()));break; // ldm r7,r11,#*
case 0x17c: R7 = READ((R12+CONST()));break; // ldm r7,r12,#*
case 0x17d: R7 = READ((R13+CONST()));break; // ldm r7,r13,#*
case 0x17e: R7 = READ((R14+CONST()));break; // ldm r7,r14,#*
case 0x17f: R7 = READ(FETCH());break; // ldm r7,#*
case 0x180: R8 = READ((R0+CONST()));break; // ldm r8,r0,#*
case 0x181: R8 = READ((R1+CONST()));break; // ldm r8,r1,#*
case 0x182: R8 = READ((R2+CONST()));break; // ldm r8,r2,#*
case 0x183: R8 = READ((R3+CONST()));break; // ldm r8,r3,#*
case 0x184: R8 = READ((R4+CONST()));break; // ldm r8,r4,#*
case 0x185: R8 = READ((R5+CONST()));break; // ldm r8,r5,#*
case 0x186: R8 = READ((R6+CONST()));break; // ldm r8,r6,#*
case 0x187: R8 = READ((R7+CONST()));break; // ldm r8,r7,#*
case 0x188: R8 = READ((R8+CONST()));break; // ldm r8,r8,#*
case 0x189: R8 = READ((R9+CONST()));break; // ldm r8,r9,#*
case 0x18a: R8 = READ((R10+CONST()));break; // ldm r8,r10,#*
case 0x18b: R8 = READ((R11+CONST()));break; // ldm r8,r11,#*
case 0x18c: R8 = READ((R12+CONST()));break; // ldm r8,r12,#*
case 0x18d: R8 = READ((R13+CONST()));break; // ldm r8,r13,#*
case 0x18e: R8 = READ((R14+CONST()));break; // ldm r8,r14,#*
case 0x18f: R8 = READ(FETCH());break; // ldm r8,#*
case 0x190: R9 = READ((R0+CONST()));break; // ldm r9,r0,#*
case 0x191: R9 = READ((R1+CONST()));break; // ldm r9,r1,#*
case 0x192: R9 = READ((R2+CONST()));break; // ldm r9,r2,#*
case 0x193: R9 = READ((R3+CONST()));break; // ldm r9,r3,#*
case 0x194: R9 = READ((R4+CONST()));break; // ldm r9,r4,#*
case 0x195: R9 = READ((R5+CONST()));break; // ldm r9,r5,#*
case 0x196: R9 = READ((R6+CONST()));break; // ldm r9,r6,#*
case 0x197: R9 = READ((R7+CONST()));break; // ldm r9,r7,#*
case 0x198: R9 = READ((R8+CONST()));break; // ldm r9,r8,#*
case 0x199: R9 = READ((R9+CONST()));break; // ldm r9,r9,#*
case 0x19a: R9 = READ((R10+CONST()));break; // ldm r9,r10,#*
case 0x19b: R9 = READ((R11+CONST()));break; // ldm r9,r11,#*
case 0x19c: R9 = READ((R12+CONST()));break; // ldm r9,r12,#*
case 0x19d: R9 = READ((R13+CONST()));break; // ldm r9,r13,#*
case 0x19e: R9 = READ((R14+CONST()));break; // ldm r9,r14,#*
case 0x19f: R9 = READ(FETCH());break; // ldm r9,#*
case 0x1a0: R10 = READ((R0+CONST()));break; // ldm r10,r0,#*
case 0x1a1: R10 = READ((R1+CONST()));break; // ldm r10,r1,#*
case 0x1a2: R10 = READ((R2+CONST()));break; // ldm r10,r2,#*
case 0x1a3: R10 = READ((R3+CONST()));break; // ldm r10,r3,#*
case 0x1a4: R10 = READ((R4+CONST()));break; // ldm r10,r4,#*
case 0x1a5: R10 = READ((R5+CONST()));break; // ldm r10,r5,#*
case 0x1a6: R10 = READ((R6+CONST()));break; // ldm r10,r6,#*
case 0x1a7: R10 = READ((R7+CONST()));break; // ldm r10,r7,#*
case 0x1a8: R10 = READ((R8+CONST()));break; // ldm r10,r8,#*
case 0x1a9: R10 = READ((R9+CONST()));break; // ldm r10,r9,#*
case 0x1aa: R10 = READ((R10+CONST()));break; // ldm r10,r10,#*
case 0x1ab: R10 = READ((R11+CONST()));break; // ldm r10,r11,#*
case 0x1ac: R10 = READ((R12+CONST()));break; // ldm r10,r12,#*
case 0x1ad: R10 = READ((R13+CONST()));break; // ldm r10,r13,#*
case 0x1ae: R10 = READ((R14+CONST()));break; // ldm r10,r14,#*
case 0x1af: R10 = READ(FETCH());break; // ldm r10,#*
case 0x1b0: R11 = READ((R0+CONST()));break; // ldm r11,r0,#*
case 0x1b1: R11 = READ((R1+CONST()));break; // ldm r11,r1,#*
case 0x1b2: R11 = READ((R2+CONST()));break; // ldm r11,r2,#*
case 0x1b3: R11 = READ((R3+CONST()));break; // ldm r11,r3,#*
case 0x1b4: R11 = READ((R4+CONST()));break; // ldm r11,r4,#*
case 0x1b5: R11 = READ((R5+CONST()));break; // ldm r11,r5,#*
case 0x1b6: R11 = READ((R6+CONST()));break; // ldm r11,r6,#*
case 0x1b7: R11 = READ((R7+CONST()));break; // ldm r11,r7,#*
case 0x1b8: R11 = READ((R8+CONST()));break; // ldm r11,r8,#*
case 0x1b9: R11 = READ((R9+CONST()));break; // ldm r11,r9,#*
case 0x1ba: R11 = READ((R10+CONST()));break; // ldm r11,r10,#*
case 0x1bb: R11 = READ((R11+CONST()));break; // ldm r11,r11,#*
case 0x1bc: R11 = READ((R12+CONST()));break; // ldm r11,r12,#*
case 0x1bd: R11 = READ((R13+CONST()));break; // ldm r11,r13,#*
case 0x1be: R11 = READ((R14+CONST()));break; // ldm r11,r14,#*
case 0x1bf: R11 = READ(FETCH());break; // ldm r11,#*
case 0x1c0: R12 = READ((R0+CONST()));break; // ldm r12,r0,#*
case 0x1c1: R12 = READ((R1+CONST()));break; // ldm r12,r1,#*
case 0x1c2: R12 = READ((R2+CONST()));break; // ldm r12,r2,#*
case 0x1c3: R12 = READ((R3+CONST()));break; // ldm r12,r3,#*
case 0x1c4: R12 = READ((R4+CONST()));break; // ldm r12,r4,#*
case 0x1c5: R12 = READ((R5+CONST()));break; // ldm r12,r5,#*
case 0x1c6: R12 = READ((R6+CONST()));break; // ldm r12,r6,#*
case 0x1c7: R12 = READ((R7+CONST()));break; // ldm r12,r7,#*
case 0x1c8: R12 = READ((R8+CONST()));break; // ldm r12,r8,#*
case 0x1c9: R12 = READ((R9+CONST()));break; // ldm r12,r9,#*
case 0x1ca: R12 = READ((R10+CONST()));break; // ldm r12,r10,#*
case 0x1cb: R12 = READ((R11+CONST()));break; // ldm r12,r11,#*
case 0x1cc: R12 = READ((R12+CONST()));break; // ldm r12,r12,#*
case 0x1cd: R12 = READ((R13+CONST()));break; // ldm r12,r13,#*
case 0x1ce: R12 = READ((R14+CONST()));break; // ldm r12,r14,#*
case 0x1cf: R12 = READ(FETCH());break; // ldm r12,#*
case 0x1d0: R13 = READ((R0+CONST()));break; // ldm r13,r0,#*
case 0x1d1: R13 = READ((R1+CONST()));break; // ldm r13,r1,#*
case 0x1d2: R13 = READ((R2+CONST()));break; // ldm r13,r2,#*
case 0x1d3: R13 = READ((R3+CONST()));break; // ldm r13,r3,#*
case 0x1d4: R13 = READ((R4+CONST()));break; // ldm r13,r4,#*
case 0x1d5: R13 = READ((R5+CONST()));break; // ldm r13,r5,#*
case 0x1d6: R13 = READ((R6+CONST()));break; // ldm r13,r6,#*
case 0x1d7: R13 = READ((R7+CONST()));break; // ldm r13,r7,#*
case 0x1d8: R13 = READ((R8+CONST()));break; // ldm r13,r8,#*
case 0x1d9: R13 = READ((R9+CONST()));break; // ldm r13,r9,#*
case 0x1da: R13 = READ((R10+CONST()));break; // ldm r13,r10,#*
case 0x1db: R13 = READ((R11+CONST()));break; // ldm r13,r11,#*
case 0x1dc: R13 = READ((R12+CONST()));break; // ldm r13,r12,#*
case 0x1dd: R13 = READ((R13+CONST()));break; // ldm r13,r13,#*
case 0x1de: R13 = READ((R14+CONST()));break; // ldm r13,r14,#*
case 0x1df: R13 = READ(FETCH());break; // ldm r13,#*
case 0x1e0: R14 = READ((R0+CONST()));break; // ldm r14,r0,#*
case 0x1e1: R14 = READ((R1+CONST()));break; // ldm r14,r1,#*
case 0x1e2: R14 = READ((R2+CONST()));break; // ldm r14,r2,#*
case 0x1e3: R14 = READ((R3+CONST()));break; // ldm r14,r3,#*
case 0x1e4: R14 = READ((R4+CONST()));break; // ldm r14,r4,#*
case 0x1e5: R14 = READ((R5+CONST()));break; // ldm r14,r5,#*
case 0x1e6: R14 = READ((R6+CONST()));break; // ldm r14,r6,#*
case 0x1e7: R14 = READ((R7+CONST()));break; // ldm r14,r7,#*
case 0x1e8: R14 = READ((R8+CONST()));break; // ldm r14,r8,#*
case 0x1e9: R14 = READ((R9+CONST()));break; // ldm r14,r9,#*
case 0x1ea: R14 = READ((R10+CONST()));break; // ldm r14,r10,#*
case 0x1eb: R14 = READ((R11+CONST()));break; // ldm r14,r11,#*
case 0x1ec: R14 = READ((R12+CONST()));break; // ldm r14,r12,#*
case 0x1ed: R14 = READ((R13+CONST()));break; // ldm r14,r13,#*
case 0x1ee: R14 = READ((R14+CONST()));break; // ldm r14,r14,#*
case 0x1ef: R14 = READ(FETCH());break; // ldm r14,#*
case 0x1f0: R15 = READ((R0+CONST()));break; // ldm r15,r0,#*
case 0x1f1: R15 = READ((R1+CONST()));break; // ldm r15,r1,#*
case 0x1f2: R15 = READ((R2+CONST()));break; // ldm r15,r2,#*
case 0x1f3: R15 = READ((R3+CONST()));break; // ldm r15,r3,#*
case 0x1f4: R15 = READ((R4+CONST()));break; // ldm r15,r4,#*
case 0x1f5: R15 = READ((R5+CONST()));break; // ldm r15,r5,#*
case 0x1f6: R15 = READ((R6+CONST()));break; // ldm r15,r6,#*
case 0x1f7: R15 = READ((R7+CONST()));break; // ldm r15,r7,#*
case 0x1f8: R15 = READ((R8+CONST()));break; // ldm r15,r8,#*
case 0x1f9: R15 = READ((R9+CONST()));break; // ldm r15,r9,#*
case 0x1fa: R15 = READ((R10+CONST()));break; // ldm r15,r10,#*
case 0x1fb: R15 = READ((R11+CONST()));break; // ldm r15,r11,#*
case 0x1fc: R15 = READ((R12+CONST()));break; // ldm r15,r12,#*
case 0x1fd: R15 = READ((R13+CONST()));break; // ldm r15,r13,#*
case 0x1fe: R15 = READ((R14+CONST()));break; // ldm r15,r14,#*
case 0x1ff: R15 = READ(FETCH());break; // ldm r15,#*
case 0x200: WRITE((R0+CONST()),R0);break; // stm r0,r0,#*
case 0x201: WRITE((R1+CONST()),R0);break; // stm r0,r1,#*
case 0x202: WRITE((R2+CONST()),R0);break; // stm r0,r2,#*
case 0x203: WRITE((R3+CONST()),R0);break; // stm r0,r3,#*
case 0x204: WRITE((R4+CONST()),R0);break; // stm r0,r4,#*
case 0x205: WRITE((R5+CONST()),R0);break; // stm r0,r5,#*
case 0x206: WRITE((R6+CONST()),R0);break; // stm r0,r6,#*
case 0x207: WRITE((R7+CONST()),R0);break; // stm r0,r7,#*
case 0x208: WRITE((R8+CONST()),R0);break; // stm r0,r8,#*
case 0x209: WRITE((R9+CONST()),R0);break; // stm r0,r9,#*
case 0x20a: WRITE((R10+CONST()),R0);break; // stm r0,r10,#*
case 0x20b: WRITE((R11+CONST()),R0);break; // stm r0,r11,#*
case 0x20c: WRITE((R12+CONST()),R0);break; // stm r0,r12,#*
case 0x20d: WRITE((R13+CONST()),R0);break; // stm r0,r13,#*
case 0x20e: WRITE((R14+CONST()),R0);break; // stm r0,r14,#*
case 0x20f: WRITE(FETCH(),R0);break; // stm r0,#*
case 0x210: WRITE((R0+CONST()),R1);break; // stm r1,r0,#*
case 0x211: WRITE((R1+CONST()),R1);break; // stm r1,r1,#*
case 0x212: WRITE((R2+CONST()),R1);break; // stm r1,r2,#*
case 0x213: WRITE((R3+CONST()),R1);break; // stm r1,r3,#*
case 0x214: WRITE((R4+CONST()),R1);break; // stm r1,r4,#*
case 0x215: WRITE((R5+CONST()),R1);break; // stm r1,r5,#*
case 0x216: WRITE((R6+CONST()),R1);break; // stm r1,r6,#*
case 0x217: WRITE((R7+CONST()),R1);break; // stm r1,r7,#*
case 0x218: WRITE((R8+CONST()),R1);break; // stm r1,r8,#*
case 0x219: WRITE((R9+CONST()),R1);break; // stm r1,r9,#*
case 0x21a: WRITE((R10+CONST()),R1);break; // stm r1,r10,#*
case 0x21b: WRITE((R11+CONST()),R1);break; // stm r1,r11,#*
case 0x21c: WRITE((R12+CONST()),R1);break; // stm r1,r12,#*
case 0x21d: WRITE((R13+CONST()),R1);break; // stm r1,r13,#*
case 0x21e: WRITE((R14+CONST()),R1);break; // stm r1,r14,#*
case 0x21f: WRITE(FETCH(),R1);break; // stm r1,#*
case 0x220: WRITE((R0+CONST()),R2);break; // stm r2,r0,#*
case 0x221: WRITE((R1+CONST()),R2);break; // stm r2,r1,#*
case 0x222: WRITE((R2+CONST()),R2);break; // stm r2,r2,#*
case 0x223: WRITE((R3+CONST()),R2);break; // stm r2,r3,#*
case 0x224: WRITE((R4+CONST()),R2);break; // stm r2,r4,#*
case 0x225: WRITE((R5+CONST()),R2);break; // stm r2,r5,#*
case 0x226: WRITE((R6+CONST()),R2);break; // stm r2,r6,#*
case 0x227: WRITE((R7+CONST()),R2);break; // stm r2,r7,#*
case 0x228: WRITE((R8+CONST()),R2);break; // stm r2,r8,#*
case 0x229: WRITE((R9+CONST()),R2);break; // stm r2,r9,#*
case 0x22a: WRITE((R10+CONST()),R2);break; // stm r2,r10,#*
case 0x22b: WRITE((R11+CONST()),R2);break; // stm r2,r11,#*
case 0x22c: WRITE((R12+CONST()),R2);break; // stm r2,r12,#*
case 0x22d: WRITE((R13+CONST()),R2);break; // stm r2,r13,#*
case 0x22e: WRITE((R14+CONST()),R2);break; // stm r2,r14,#*
case 0x22f: WRITE(FETCH(),R2);break; // stm r2,#*
case 0x230: WRITE((R0+CONST()),R3);break; // stm r3,r0,#*
case 0x231: WRITE((R1+CONST()),R3);break; // stm r3,r1,#*
case 0x232: WRITE((R2+CONST()),R3);break; // stm r3,r2,#*
case 0x233: WRITE((R3+CONST()),R3);break; // stm r3,r3,#*
case 0x234: WRITE((R4+CONST()),R3);break; // stm r3,r4,#*
case 0x235: WRITE((R5+CONST()),R3);break; // stm r3,r5,#*
case 0x236: WRITE((R6+CONST()),R3);break; // stm r3,r6,#*
case 0x237: WRITE((R7+CONST()),R3);break; // stm r3,r7,#*
case 0x238: WRITE((R8+CONST()),R3);break; // stm r3,r8,#*
case 0x239: WRITE((R9+CONST()),R3);break; // stm r3,r9,#*
case 0x23a: WRITE((R10+CONST()),R3);break; // stm r3,r10,#*
case 0x23b: WRITE((R11+CONST()),R3);break; // stm r3,r11,#*
case 0x23c: WRITE((R12+CONST()),R3);break; // stm r3,r12,#*
case 0x23d: WRITE((R13+CONST()),R3);break; // stm r3,r13,#*
case 0x23e: WRITE((R14+CONST()),R3);break; // stm r3,r14,#*
case 0x23f: WRITE(FETCH(),R3);break; // stm r3,#*
case 0x240: WRITE((R0+CONST()),R4);break; // stm r4,r0,#*
case 0x241: WRITE((R1+CONST()),R4);break; // stm r4,r1,#*
case 0x242: WRITE((R2+CONST()),R4);break; // stm r4,r2,#*
case 0x243: WRITE((R3+CONST()),R4);break; // stm r4,r3,#*
case 0x244: WRITE((R4+CONST()),R4);break; // stm r4,r4,#*
case 0x245: WRITE((R5+CONST()),R4);break; // stm r4,r5,#*
case 0x246: WRITE((R6+CONST()),R4);break; // stm r4,r6,#*
case 0x247: WRITE((R7+CONST()),R4);break; // stm r4,r7,#*
case 0x248: WRITE((R8+CONST()),R4);break; // stm r4,r8,#*
case 0x249: WRITE((R9+CONST()),R4);break; // stm r4,r9,#*
case 0x24a: WRITE((R10+CONST()),R4);break; // stm r4,r10,#*
case 0x24b: WRITE((R11+CONST()),R4);break; // stm r4,r11,#*
case 0x24c: WRITE((R12+CONST()),R4);break; // stm r4,r12,#*
case 0x24d: WRITE((R13+CONST()),R4);break; // stm r4,r13,#*
case 0x24e: WRITE((R14+CONST()),R4);break; // stm r4,r14,#*
case 0x24f: WRITE(FETCH(),R4);break; // stm r4,#*
case 0x250: WRITE((R0+CONST()),R5);break; // stm r5,r0,#*
case 0x251: WRITE((R1+CONST()),R5);break; // stm r5,r1,#*
case 0x252: WRITE((R2+CONST()),R5);break; // stm r5,r2,#*
case 0x253: WRITE((R3+CONST()),R5);break; // stm r5,r3,#*
case 0x254: WRITE((R4+CONST()),R5);break; // stm r5,r4,#*
case 0x255: WRITE((R5+CONST()),R5);break; // stm r5,r5,#*
case 0x256: WRITE((R6+CONST()),R5);break; // stm r5,r6,#*
case 0x257: WRITE((R7+CONST()),R5);break; // stm r5,r7,#*
case 0x258: WRITE((R8+CONST()),R5);break; // stm r5,r8,#*
case 0x259: WRITE((R9+CONST()),R5);break; // stm r5,r9,#*
case 0x25a: WRITE((R10+CONST()),R5);break; // stm r5,r10,#*
case 0x25b: WRITE((R11+CONST()),R5);break; // stm r5,r11,#*
case 0x25c: WRITE((R12+CONST()),R5);break; // stm r5,r12,#*
case 0x25d: WRITE((R13+CONST()),R5);break; // stm r5,r13,#*
case 0x25e: WRITE((R14+CONST()),R5);break; // stm r5,r14,#*
case 0x25f: WRITE(FETCH(),R5);break; // stm r5,#*
case 0x260: WRITE((R0+CONST()),R6);break; // stm r6,r0,#*
case 0x261: WRITE((R1+CONST()),R6);break; // stm r6,r1,#*
case 0x262: WRITE((R2+CONST()),R6);break; // stm r6,r2,#*
case 0x263: WRITE((R3+CONST()),R6);break; // stm r6,r3,#*
case 0x264: WRITE((R4+CONST()),R6);break; // stm r6,r4,#*
case 0x265: WRITE((R5+CONST()),R6);break; // stm r6,r5,#*
case 0x266: WRITE((R6+CONST()),R6);break; // stm r6,r6,#*
case 0x267: WRITE((R7+CONST()),R6);break; // stm r6,r7,#*
case 0x268: WRITE((R8+CONST()),R6);break; // stm r6,r8,#*
case 0x269: WRITE((R9+CONST()),R6);break; // stm r6,r9,#*
case 0x26a: WRITE((R10+CONST()),R6);break; // stm r6,r10,#*
case 0x26b: WRITE((R11+CONST()),R6);break; // stm r6,r11,#*
case 0x26c: WRITE((R12+CONST()),R6);break; // stm r6,r12,#*
case 0x26d: WRITE((R13+CONST()),R6);break; // stm r6,r13,#*
case 0x26e: WRITE((R14+CONST()),R6);break; // stm r6,r14,#*
case 0x26f: WRITE(FETCH(),R6);break; // stm r6,#*
case 0x270: WRITE((R0+CONST()),R7);break; // stm r7,r0,#*
case 0x271: WRITE((R1+CONST()),R7);break; // stm r7,r1,#*
case 0x272: WRITE((R2+CONST()),R7);break; // stm r7,r2,#*
case 0x273: WRITE((R3+CONST()),R7);break; // stm r7,r3,#*
case 0x274: WRITE((R4+CONST()),R7);break; // stm r7,r4,#*
case 0x275: WRITE((R5+CONST()),R7);break; // stm r7,r5,#*
case 0x276: WRITE((R6+CONST()),R7);break; // stm r7,r6,#*
case 0x277: WRITE((R7+CONST()),R7);break; // stm r7,r7,#*
case 0x278: WRITE((R8+CONST()),R7);break; // stm r7,r8,#*
case 0x279: WRITE((R9+CONST()),R7);break; // stm r7,r9,#*
case 0x27a: WRITE((R10+CONST()),R7);break; // stm r7,r10,#*
case 0x27b: WRITE((R11+CONST()),R7);break; // stm r7,r11,#*
case 0x27c: WRITE((R12+CONST()),R7);break; // stm r7,r12,#*
case 0x27d: WRITE((R13+CONST()),R7);break; // stm r7,r13,#*
case 0x27e: WRITE((R14+CONST()),R7);break; // stm r7,r14,#*
case 0x27f: WRITE(FETCH(),R7);break; // stm r7,#*
case 0x280: WRITE((R0+CONST()),R8);break; // stm r8,r0,#*
case 0x281: WRITE((R1+CONST()),R8);break; // stm r8,r1,#*
case 0x282: WRITE((R2+CONST()),R8);break; // stm r8,r2,#*
case 0x283: WRITE((R3+CONST()),R8);break; // stm r8,r3,#*
case 0x284: WRITE((R4+CONST()),R8);break; // stm r8,r4,#*
case 0x285: WRITE((R5+CONST()),R8);break; // stm r8,r5,#*
case 0x286: WRITE((R6+CONST()),R8);break; // stm r8,r6,#*
case 0x287: WRITE((R7+CONST()),R8);break; // stm r8,r7,#*
case 0x288: WRITE((R8+CONST()),R8);break; // stm r8,r8,#*
case 0x289: WRITE((R9+CONST()),R8);break; // stm r8,r9,#*
case 0x28a: WRITE((R10+CONST()),R8);break; // stm r8,r10,#*
case 0x28b: WRITE((R11+CONST()),R8);break; // stm r8,r11,#*
case 0x28c: WRITE((R12+CONST()),R8);break; // stm r8,r12,#*
case 0x28d: WRITE((R13+CONST()),R8);break; // stm r8,r13,#*
case 0x28e: WRITE((R14+CONST()),R8);break; // stm r8,r14,#*
case 0x28f: WRITE(FETCH(),R8);break; // stm r8,#*
case 0x290: WRITE((R0+CONST()),R9);break; // stm r9,r0,#*
case 0x291: WRITE((R1+CONST()),R9);break; // stm r9,r1,#*
case 0x292: WRITE((R2+CONST()),R9);break; // stm r9,r2,#*
case 0x293: WRITE((R3+CONST()),R9);break; // stm r9,r3,#*
case 0x294: WRITE((R4+CONST()),R9);break; // stm r9,r4,#*
case 0x295: WRITE((R5+CONST()),R9);break; // stm r9,r5,#*
case 0x296: WRITE((R6+CONST()),R9);break; // stm r9,r6,#*
case 0x297: WRITE((R7+CONST()),R9);break; // stm r9,r7,#*
case 0x298: WRITE((R8+CONST()),R9);break; // stm r9,r8,#*
case 0x299: WRITE((R9+CONST()),R9);break; // stm r9,r9,#*
case 0x29a: WRITE((R10+CONST()),R9);break; // stm r9,r10,#*
case 0x29b: WRITE((R11+CONST()),R9);break; // stm r9,r11,#*
case 0x29c: WRITE((R12+CONST()),R9);break; // stm r9,r12,#*
case 0x29d: WRITE((R13+CONST()),R9);break; // stm r9,r13,#*
case 0x29e: WRITE((R14+CONST()),R9);break; // stm r9,r14,#*
case 0x29f: WRITE(FETCH(),R9);break; // stm r9,#*
case 0x2a0: WRITE((R0+CONST()),R10);break; // stm r10,r0,#*
case 0x2a1: WRITE((R1+CONST()),R10);break; // stm r10,r1,#*
case 0x2a2: WRITE((R2+CONST()),R10);break; // stm r10,r2,#*
case 0x2a3: WRITE((R3+CONST()),R10);break; // stm r10,r3,#*
case 0x2a4: WRITE((R4+CONST()),R10);break; // stm r10,r4,#*
case 0x2a5: WRITE((R5+CONST()),R10);break; // stm r10,r5,#*
case 0x2a6: WRITE((R6+CONST()),R10);break; // stm r10,r6,#*
case 0x2a7: WRITE((R7+CONST()),R10);break; // stm r10,r7,#*
case 0x2a8: WRITE((R8+CONST()),R10);break; // stm r10,r8,#*
case 0x2a9: WRITE((R9+CONST()),R10);break; // stm r10,r9,#*
case 0x2aa: WRITE((R10+CONST()),R10);break; // stm r10,r10,#*
case 0x2ab: WRITE((R11+CONST()),R10);break; // stm r10,r11,#*
case 0x2ac: WRITE((R12+CONST()),R10);break; // stm r10,r12,#*
case 0x2ad: WRITE((R13+CONST()),R10);break; // stm r10,r13,#*
case 0x2ae: WRITE((R14+CONST()),R10);break; // stm r10,r14,#*
case 0x2af: WRITE(FETCH(),R10);break; // stm r10,#*
case 0x2b0: WRITE((R0+CONST()),R11);break; // stm r11,r0,#*
case 0x2b1: WRITE((R1+CONST()),R11);break; // stm r11,r1,#*
case 0x2b2: WRITE((R2+CONST()),R11);break; // stm r11,r2,#*
case 0x2b3: WRITE((R3+CONST()),R11);break; // stm r11,r3,#*
case 0x2b4: WRITE((R4+CONST()),R11);break; // stm r11,r4,#*
case 0x2b5: WRITE((R5+CONST()),R11);break; // stm r11,r5,#*
case 0x2b6: WRITE((R6+CONST()),R11);break; // stm r11,r6,#*
case 0x2b7: WRITE((R7+CONST()),R11);break; // stm r11,r7,#*
case 0x2b8: WRITE((R8+CONST()),R11);break; // stm r11,r8,#*
case 0x2b9: WRITE((R9+CONST()),R11);break; // stm r11,r9,#*
case 0x2ba: WRITE((R10+CONST()),R11);break; // stm r11,r10,#*
case 0x2bb: WRITE((R11+CONST()),R11);break; // stm r11,r11,#*
case 0x2bc: WRITE((R12+CONST()),R11);break; // stm r11,r12,#*
case 0x2bd: WRITE((R13+CONST()),R11);break; // stm r11,r13,#*
case 0x2be: WRITE((R14+CONST()),R11);break; // stm r11,r14,#*
case 0x2bf: WRITE(FETCH(),R11);break; // stm r11,#*
case 0x2c0: WRITE((R0+CONST()),R12);break; // stm r12,r0,#*
case 0x2c1: WRITE((R1+CONST()),R12);break; // stm r12,r1,#*
case 0x2c2: WRITE((R2+CONST()),R12);break; // stm r12,r2,#*
case 0x2c3: WRITE((R3+CONST()),R12);break; // stm r12,r3,#*
case 0x2c4: WRITE((R4+CONST()),R12);break; // stm r12,r4,#*
case 0x2c5: WRITE((R5+CONST()),R12);break; // stm r12,r5,#*
case 0x2c6: WRITE((R6+CONST()),R12);break; // stm r12,r6,#*
case 0x2c7: WRITE((R7+CONST()),R12);break; // stm r12,r7,#*
case 0x2c8: WRITE((R8+CONST()),R12);break; // stm r12,r8,#*
case 0x2c9: WRITE((R9+CONST()),R12);break; // stm r12,r9,#*
case 0x2ca: WRITE((R10+CONST()),R12);break; // stm r12,r10,#*
case 0x2cb: WRITE((R11+CONST()),R12);break; // stm r12,r11,#*
case 0x2cc: WRITE((R12+CONST()),R12);break; // stm r12,r12,#*
case 0x2cd: WRITE((R13+CONST()),R12);break; // stm r12,r13,#*
case 0x2ce: WRITE((R14+CONST()),R12);break; // stm r12,r14,#*
case 0x2cf: WRITE(FETCH(),R12);break; // stm r12,#*
case 0x2d0: WRITE((R0+CONST()),R13);break; // stm r13,r0,#*
case 0x2d1: WRITE((R1+CONST()),R13);break; // stm r13,r1,#*
case 0x2d2: WRITE((R2+CONST()),R13);break; // stm r13,r2,#*
case 0x2d3: WRITE((R3+CONST()),R13);break; // stm r13,r3,#*
case 0x2d4: WRITE((R4+CONST()),R13);break; // stm r13,r4,#*
case 0x2d5: WRITE((R5+CONST()),R13);break; // stm r13,r5,#*
case 0x2d6: WRITE((R6+CONST()),R13);break; // stm r13,r6,#*
case 0x2d7: WRITE((R7+CONST()),R13);break; // stm r13,r7,#*
case 0x2d8: WRITE((R8+CONST()),R13);break; // stm r13,r8,#*
case 0x2d9: WRITE((R9+CONST()),R13);break; // stm r13,r9,#*
case 0x2da: WRITE((R10+CONST()),R13);break; // stm r13,r10,#*
case 0x2db: WRITE((R11+CONST()),R13);break; // stm r13,r11,#*
case 0x2dc: WRITE((R12+CONST()),R13);break; // stm r13,r12,#*
case 0x2dd: WRITE((R13+CONST()),R13);break; // stm r13,r13,#*
case 0x2de: WRITE((R14+CONST()),R13);break; // stm r13,r14,#*
case 0x2df: WRITE(FETCH(),R13);break; // stm r13,#*
case 0x2e0: WRITE((R0+CONST()),R14);break; // stm r14,r0,#*
case 0x2e1: WRITE((R1+CONST()),R14);break; // stm r14,r1,#*
case 0x2e2: WRITE((R2+CONST()),R14);break; // stm r14,r2,#*
case 0x2e3: WRITE((R3+CONST()),R14);break; // stm r14,r3,#*
case 0x2e4: WRITE((R4+CONST()),R14);break; // stm r14,r4,#*
case 0x2e5: WRITE((R5+CONST()),R14);break; // stm r14,r5,#*
case 0x2e6: WRITE((R6+CONST()),R14);break; // stm r14,r6,#*
case 0x2e7: WRITE((R7+CONST()),R14);break; // stm r14,r7,#*
case 0x2e8: WRITE((R8+CONST()),R14);break; // stm r14,r8,#*
case 0x2e9: WRITE((R9+CONST()),R14);break; // stm r14,r9,#*
case 0x2ea: WRITE((R10+CONST()),R14);break; // stm r14,r10,#*
case 0x2eb: WRITE((R11+CONST()),R14);break; // stm r14,r11,#*
case 0x2ec: WRITE((R12+CONST()),R14);break; // stm r14,r12,#*
case 0x2ed: WRITE((R13+CONST()),R14);break; // stm r14,r13,#*
case 0x2ee: WRITE((R14+CONST()),R14);break; // stm r14,r14,#*
case 0x2ef: WRITE(FETCH(),R14);break; // stm r14,#*
case 0x2f0: WRITE((R0+CONST()),R15);break; // stm r15,r0,#*
case 0x2f1: WRITE((R1+CONST()),R15);break; // stm r15,r1,#*
case 0x2f2: WRITE((R2+CONST()),R15);break; // stm r15,r2,#*
case 0x2f3: WRITE((R3+CONST()),R15);break; // stm r15,r3,#*
case 0x2f4: WRITE((R4+CONST()),R15);break; // stm r15,r4,#*
case 0x2f5: WRITE((R5+CONST()),R15);break; // stm r15,r5,#*
case 0x2f6: WRITE((R6+CONST()),R15);break; // stm r15,r6,#*
case 0x2f7: WRITE((R7+CONST()),R15);break; // stm r15,r7,#*
case 0x2f8: WRITE((R8+CONST()),R15);break; // stm r15,r8,#*
case 0x2f9: WRITE((R9+CONST()),R15);break; // stm r15,r9,#*
case 0x2fa: WRITE((R10+CONST()),R15);break; // stm r15,r10,#*
case 0x2fb: WRITE((R11+CONST()),R15);break; // stm r15,r11,#*
case 0x2fc: WRITE((R12+CONST()),R15);break; // stm r15,r12,#*
case 0x2fd: WRITE((R13+CONST()),R15);break; // stm r15,r13,#*
case 0x2fe: WRITE((R14+CONST()),R15);break; // stm r15,r14,#*
case 0x2ff: WRITE(FETCH(),R15);break; // stm r15,#*
case 0x300: R0 = add16Bit(R0,(R0+CONST()),0);break; // add r0,r0,#*
case 0x301: R0 = add16Bit(R0,(R1+CONST()),0);break; // add r0,r1,#*
case 0x302: R0 = add16Bit(R0,(R2+CONST()),0);break; // add r0,r2,#*
case 0x303: R0 = add16Bit(R0,(R3+CONST()),0);break; // add r0,r3,#*
case 0x304: R0 = add16Bit(R0,(R4+CONST()),0);break; // add r0,r4,#*
case 0x305: R0 = add16Bit(R0,(R5+CONST()),0);break; // add r0,r5,#*
case 0x306: R0 = add16Bit(R0,(R6+CONST()),0);break; // add r0,r6,#*
case 0x307: R0 = add16Bit(R0,(R7+CONST()),0);break; // add r0,r7,#*
case 0x308: R0 = add16Bit(R0,(R8+CONST()),0);break; // add r0,r8,#*
case 0x309: R0 = add16Bit(R0,(R9+CONST()),0);break; // add r0,r9,#*
case 0x30a: R0 = add16Bit(R0,(R10+CONST()),0);break; // add r0,r10,#*
case 0x30b: R0 = add16Bit(R0,(R11+CONST()),0);break; // add r0,r11,#*
case 0x30c: R0 = add16Bit(R0,(R12+CONST()),0);break; // add r0,r12,#*
case 0x30d: R0 = add16Bit(R0,(R13+CONST()),0);break; // add r0,r13,#*
case 0x30e: R0 = add16Bit(R0,(R14+CONST()),0);break; // add r0,r14,#*
case 0x30f: R0 = add16Bit(R0,FETCH(),0);break; // add r0,#*
case 0x310: R1 = add16Bit(R1,(R0+CONST()),0);break; // add r1,r0,#*
case 0x311: R1 = add16Bit(R1,(R1+CONST()),0);break; // add r1,r1,#*
case 0x312: R1 = add16Bit(R1,(R2+CONST()),0);break; // add r1,r2,#*
case 0x313: R1 = add16Bit(R1,(R3+CONST()),0);break; // add r1,r3,#*
case 0x314: R1 = add16Bit(R1,(R4+CONST()),0);break; // add r1,r4,#*
case 0x315: R1 = add16Bit(R1,(R5+CONST()),0);break; // add r1,r5,#*
case 0x316: R1 = add16Bit(R1,(R6+CONST()),0);break; // add r1,r6,#*
case 0x317: R1 = add16Bit(R1,(R7+CONST()),0);break; // add r1,r7,#*
case 0x318: R1 = add16Bit(R1,(R8+CONST()),0);break; // add r1,r8,#*
case 0x319: R1 = add16Bit(R1,(R9+CONST()),0);break; // add r1,r9,#*
case 0x31a: R1 = add16Bit(R1,(R10+CONST()),0);break; // add r1,r10,#*
case 0x31b: R1 = add16Bit(R1,(R11+CONST()),0);break; // add r1,r11,#*
case 0x31c: R1 = add16Bit(R1,(R12+CONST()),0);break; // add r1,r12,#*
case 0x31d: R1 = add16Bit(R1,(R13+CONST()),0);break; // add r1,r13,#*
case 0x31e: R1 = add16Bit(R1,(R14+CONST()),0);break; // add r1,r14,#*
case 0x31f: R1 = add16Bit(R1,FETCH(),0);break; // add r1,#*
case 0x320: R2 = add16Bit(R2,(R0+CONST()),0);break; // add r2,r0,#*
case 0x321: R2 = add16Bit(R2,(R1+CONST()),0);break; // add r2,r1,#*
case 0x322: R2 = add16Bit(R2,(R2+CONST()),0);break; // add r2,r2,#*
case 0x323: R2 = add16Bit(R2,(R3+CONST()),0);break; // add r2,r3,#*
case 0x324: R2 = add16Bit(R2,(R4+CONST()),0);break; // add r2,r4,#*
case 0x325: R2 = add16Bit(R2,(R5+CONST()),0);break; // add r2,r5,#*
case 0x326: R2 = add16Bit(R2,(R6+CONST()),0);break; // add r2,r6,#*
case 0x327: R2 = add16Bit(R2,(R7+CONST()),0);break; // add r2,r7,#*
case 0x328: R2 = add16Bit(R2,(R8+CONST()),0);break; // add r2,r8,#*
case 0x329: R2 = add16Bit(R2,(R9+CONST()),0);break; // add r2,r9,#*
case 0x32a: R2 = add16Bit(R2,(R10+CONST()),0);break; // add r2,r10,#*
case 0x32b: R2 = add16Bit(R2,(R11+CONST()),0);break; // add r2,r11,#*
case 0x32c: R2 = add16Bit(R2,(R12+CONST()),0);break; // add r2,r12,#*
case 0x32d: R2 = add16Bit(R2,(R13+CONST()),0);break; // add r2,r13,#*
case 0x32e: R2 = add16Bit(R2,(R14+CONST()),0);break; // add r2,r14,#*
case 0x32f: R2 = add16Bit(R2,FETCH(),0);break; // add r2,#*
case 0x330: R3 = add16Bit(R3,(R0+CONST()),0);break; // add r3,r0,#*
case 0x331: R3 = add16Bit(R3,(R1+CONST()),0);break; // add r3,r1,#*
case 0x332: R3 = add16Bit(R3,(R2+CONST()),0);break; // add r3,r2,#*
case 0x333: R3 = add16Bit(R3,(R3+CONST()),0);break; // add r3,r3,#*
case 0x334: R3 = add16Bit(R3,(R4+CONST()),0);break; // add r3,r4,#*
case 0x335: R3 = add16Bit(R3,(R5+CONST()),0);break; // add r3,r5,#*
case 0x336: R3 = add16Bit(R3,(R6+CONST()),0);break; // add r3,r6,#*
case 0x337: R3 = add16Bit(R3,(R7+CONST()),0);break; // add r3,r7,#*
case 0x338: R3 = add16Bit(R3,(R8+CONST()),0);break; // add r3,r8,#*
case 0x339: R3 = add16Bit(R3,(R9+CONST()),0);break; // add r3,r9,#*
case 0x33a: R3 = add16Bit(R3,(R10+CONST()),0);break; // add r3,r10,#*
case 0x33b: R3 = add16Bit(R3,(R11+CONST()),0);break; // add r3,r11,#*
case 0x33c: R3 = add16Bit(R3,(R12+CONST()),0);break; // add r3,r12,#*
case 0x33d: R3 = add16Bit(R3,(R13+CONST()),0);break; // add r3,r13,#*
case 0x33e: R3 = add16Bit(R3,(R14+CONST()),0);break; // add r3,r14,#*
case 0x33f: R3 = add16Bit(R3,FETCH(),0);break; // add r3,#*
case 0x340: R4 = add16Bit(R4,(R0+CONST()),0);break; // add r4,r0,#*
case 0x341: R4 = add16Bit(R4,(R1+CONST()),0);break; // add r4,r1,#*
case 0x342: R4 = add16Bit(R4,(R2+CONST()),0);break; // add r4,r2,#*
case 0x343: R4 = add16Bit(R4,(R3+CONST()),0);break; // add r4,r3,#*
case 0x344: R4 = add16Bit(R4,(R4+CONST()),0);break; // add r4,r4,#*
case 0x345: R4 = add16Bit(R4,(R5+CONST()),0);break; // add r4,r5,#*
case 0x346: R4 = add16Bit(R4,(R6+CONST()),0);break; // add r4,r6,#*
case 0x347: R4 = add16Bit(R4,(R7+CONST()),0);break; // add r4,r7,#*
case 0x348: R4 = add16Bit(R4,(R8+CONST()),0);break; // add r4,r8,#*
case 0x349: R4 = add16Bit(R4,(R9+CONST()),0);break; // add r4,r9,#*
case 0x34a: R4 = add16Bit(R4,(R10+CONST()),0);break; // add r4,r10,#*
case 0x34b: R4 = add16Bit(R4,(R11+CONST()),0);break; // add r4,r11,#*
case 0x34c: R4 = add16Bit(R4,(R12+CONST()),0);break; // add r4,r12,#*
case 0x34d: R4 = add16Bit(R4,(R13+CONST()),0);break; // add r4,r13,#*
case 0x34e: R4 = add16Bit(R4,(R14+CONST()),0);break; // add r4,r14,#*
case 0x34f: R4 = add16Bit(R4,FETCH(),0);break; // add r4,#*
case 0x350: R5 = add16Bit(R5,(R0+CONST()),0);break; // add r5,r0,#*
case 0x351: R5 = add16Bit(R5,(R1+CONST()),0);break; // add r5,r1,#*
case 0x352: R5 = add16Bit(R5,(R2+CONST()),0);break; // add r5,r2,#*
case 0x353: R5 = add16Bit(R5,(R3+CONST()),0);break; // add r5,r3,#*
case 0x354: R5 = add16Bit(R5,(R4+CONST()),0);break; // add r5,r4,#*
case 0x355: R5 = add16Bit(R5,(R5+CONST()),0);break; // add r5,r5,#*
case 0x356: R5 = add16Bit(R5,(R6+CONST()),0);break; // add r5,r6,#*
case 0x357: R5 = add16Bit(R5,(R7+CONST()),0);break; // add r5,r7,#*
case 0x358: R5 = add16Bit(R5,(R8+CONST()),0);break; // add r5,r8,#*
case 0x359: R5 = add16Bit(R5,(R9+CONST()),0);break; // add r5,r9,#*
case 0x35a: R5 = add16Bit(R5,(R10+CONST()),0);break; // add r5,r10,#*
case 0x35b: R5 = add16Bit(R5,(R11+CONST()),0);break; // add r5,r11,#*
case 0x35c: R5 = add16Bit(R5,(R12+CONST()),0);break; // add r5,r12,#*
case 0x35d: R5 = add16Bit(R5,(R13+CONST()),0);break; // add r5,r13,#*
case 0x35e: R5 = add16Bit(R5,(R14+CONST()),0);break; // add r5,r14,#*
case 0x35f: R5 = add16Bit(R5,FETCH(),0);break; // add r5,#*
case 0x360: R6 = add16Bit(R6,(R0+CONST()),0);break; // add r6,r0,#*
case 0x361: R6 = add16Bit(R6,(R1+CONST()),0);break; // add r6,r1,#*
case 0x362: R6 = add16Bit(R6,(R2+CONST()),0);break; // add r6,r2,#*
case 0x363: R6 = add16Bit(R6,(R3+CONST()),0);break; // add r6,r3,#*
case 0x364: R6 = add16Bit(R6,(R4+CONST()),0);break; // add r6,r4,#*
case 0x365: R6 = add16Bit(R6,(R5+CONST()),0);break; // add r6,r5,#*
case 0x366: R6 = add16Bit(R6,(R6+CONST()),0);break; // add r6,r6,#*
case 0x367: R6 = add16Bit(R6,(R7+CONST()),0);break; // add r6,r7,#*
case 0x368: R6 = add16Bit(R6,(R8+CONST()),0);break; // add r6,r8,#*
case 0x369: R6 = add16Bit(R6,(R9+CONST()),0);break; // add r6,r9,#*
case 0x36a: R6 = add16Bit(R6,(R10+CONST()),0);break; // add r6,r10,#*
case 0x36b: R6 = add16Bit(R6,(R11+CONST()),0);break; // add r6,r11,#*
case 0x36c: R6 = add16Bit(R6,(R12+CONST()),0);break; // add r6,r12,#*
case 0x36d: R6 = add16Bit(R6,(R13+CONST()),0);break; // add r6,r13,#*
case 0x36e: R6 = add16Bit(R6,(R14+CONST()),0);break; // add r6,r14,#*
case 0x36f: R6 = add16Bit(R6,FETCH(),0);break; // add r6,#*
case 0x370: R7 = add16Bit(R7,(R0+CONST()),0);break; // add r7,r0,#*
case 0x371: R7 = add16Bit(R7,(R1+CONST()),0);break; // add r7,r1,#*
case 0x372: R7 = add16Bit(R7,(R2+CONST()),0);break; // add r7,r2,#*
case 0x373: R7 = add16Bit(R7,(R3+CONST()),0);break; // add r7,r3,#*
case 0x374: R7 = add16Bit(R7,(R4+CONST()),0);break; // add r7,r4,#*
case 0x375: R7 = add16Bit(R7,(R5+CONST()),0);break; // add r7,r5,#*
case 0x376: R7 = add16Bit(R7,(R6+CONST()),0);break; // add r7,r6,#*
case 0x377: R7 = add16Bit(R7,(R7+CONST()),0);break; // add r7,r7,#*
case 0x378: R7 = add16Bit(R7,(R8+CONST()),0);break; // add r7,r8,#*
case 0x379: R7 = add16Bit(R7,(R9+CONST()),0);break; // add r7,r9,#*
case 0x37a: R7 = add16Bit(R7,(R10+CONST()),0);break; // add r7,r10,#*
case 0x37b: R7 = add16Bit(R7,(R11+CONST()),0);break; // add r7,r11,#*
case 0x37c: R7 = add16Bit(R7,(R12+CONST()),0);break; // add r7,r12,#*
case 0x37d: R7 = add16Bit(R7,(R13+CONST()),0);break; // add r7,r13,#*
case 0x37e: R7 = add16Bit(R7,(R14+CONST()),0);break; // add r7,r14,#*
case 0x37f: R7 = add16Bit(R7,FETCH(),0);break; // add r7,#*
case 0x380: R8 = add16Bit(R8,(R0+CONST()),0);break; // add r8,r0,#*
case 0x381: R8 = add16Bit(R8,(R1+CONST()),0);break; // add r8,r1,#*
case 0x382: R8 = add16Bit(R8,(R2+CONST()),0);break; // add r8,r2,#*
case 0x383: R8 = add16Bit(R8,(R3+CONST()),0);break; // add r8,r3,#*
case 0x384: R8 = add16Bit(R8,(R4+CONST()),0);break; // add r8,r4,#*
case 0x385: R8 = add16Bit(R8,(R5+CONST()),0);break; // add r8,r5,#*
case 0x386: R8 = add16Bit(R8,(R6+CONST()),0);break; // add r8,r6,#*
case 0x387: R8 = add16Bit(R8,(R7+CONST()),0);break; // add r8,r7,#*
case 0x388: R8 = add16Bit(R8,(R8+CONST()),0);break; // add r8,r8,#*
case 0x389: R8 = add16Bit(R8,(R9+CONST()),0);break; // add r8,r9,#*
case 0x38a: R8 = add16Bit(R8,(R10+CONST()),0);break; // add r8,r10,#*
case 0x38b: R8 = add16Bit(R8,(R11+CONST()),0);break; // add r8,r11,#*
case 0x38c: R8 = add16Bit(R8,(R12+CONST()),0);break; // add r8,r12,#*
case 0x38d: R8 = add16Bit(R8,(R13+CONST()),0);break; // add r8,r13,#*
case 0x38e: R8 = add16Bit(R8,(R14+CONST()),0);break; // add r8,r14,#*
case 0x38f: R8 = add16Bit(R8,FETCH(),0);break; // add r8,#*
case 0x390: R9 = add16Bit(R9,(R0+CONST()),0);break; // add r9,r0,#*
case 0x391: R9 = add16Bit(R9,(R1+CONST()),0);break; // add r9,r1,#*
case 0x392: R9 = add16Bit(R9,(R2+CONST()),0);break; // add r9,r2,#*
case 0x393: R9 = add16Bit(R9,(R3+CONST()),0);break; // add r9,r3,#*
case 0x394: R9 = add16Bit(R9,(R4+CONST()),0);break; // add r9,r4,#*
case 0x395: R9 = add16Bit(R9,(R5+CONST()),0);break; // add r9,r5,#*
case 0x396: R9 = add16Bit(R9,(R6+CONST()),0);break; // add r9,r6,#*
case 0x397: R9 = add16Bit(R9,(R7+CONST()),0);break; // add r9,r7,#*
case 0x398: R9 = add16Bit(R9,(R8+CONST()),0);break; // add r9,r8,#*
case 0x399: R9 = add16Bit(R9,(R9+CONST()),0);break; // add r9,r9,#*
case 0x39a: R9 = add16Bit(R9,(R10+CONST()),0);break; // add r9,r10,#*
case 0x39b: R9 = add16Bit(R9,(R11+CONST()),0);break; // add r9,r11,#*
case 0x39c: R9 = add16Bit(R9,(R12+CONST()),0);break; // add r9,r12,#*
case 0x39d: R9 = add16Bit(R9,(R13+CONST()),0);break; // add r9,r13,#*
case 0x39e: R9 = add16Bit(R9,(R14+CONST()),0);break; // add r9,r14,#*
case 0x39f: R9 = add16Bit(R9,FETCH(),0);break; // add r9,#*
case 0x3a0: R10 = add16Bit(R10,(R0+CONST()),0);break; // add r10,r0,#*
case 0x3a1: R10 = add16Bit(R10,(R1+CONST()),0);break; // add r10,r1,#*
case 0x3a2: R10 = add16Bit(R10,(R2+CONST()),0);break; // add r10,r2,#*
case 0x3a3: R10 = add16Bit(R10,(R3+CONST()),0);break; // add r10,r3,#*
case 0x3a4: R10 = add16Bit(R10,(R4+CONST()),0);break; // add r10,r4,#*
case 0x3a5: R10 = add16Bit(R10,(R5+CONST()),0);break; // add r10,r5,#*
case 0x3a6: R10 = add16Bit(R10,(R6+CONST()),0);break; // add r10,r6,#*
case 0x3a7: R10 = add16Bit(R10,(R7+CONST()),0);break; // add r10,r7,#*
case 0x3a8: R10 = add16Bit(R10,(R8+CONST()),0);break; // add r10,r8,#*
case 0x3a9: R10 = add16Bit(R10,(R9+CONST()),0);break; // add r10,r9,#*
case 0x3aa: R10 = add16Bit(R10,(R10+CONST()),0);break; // add r10,r10,#*
case 0x3ab: R10 = add16Bit(R10,(R11+CONST()),0);break; // add r10,r11,#*
case 0x3ac: R10 = add16Bit(R10,(R12+CONST()),0);break; // add r10,r12,#*
case 0x3ad: R10 = add16Bit(R10,(R13+CONST()),0);break; // add r10,r13,#*
case 0x3ae: R10 = add16Bit(R10,(R14+CONST()),0);break; // add r10,r14,#*
case 0x3af: R10 = add16Bit(R10,FETCH(),0);break; // add r10,#*
case 0x3b0: R11 = add16Bit(R11,(R0+CONST()),0);break; // add r11,r0,#*
case 0x3b1: R11 = add16Bit(R11,(R1+CONST()),0);break; // add r11,r1,#*
case 0x3b2: R11 = add16Bit(R11,(R2+CONST()),0);break; // add r11,r2,#*
case 0x3b3: R11 = add16Bit(R11,(R3+CONST()),0);break; // add r11,r3,#*
case 0x3b4: R11 = add16Bit(R11,(R4+CONST()),0);break; // add r11,r4,#*
case 0x3b5: R11 = add16Bit(R11,(R5+CONST()),0);break; // add r11,r5,#*
case 0x3b6: R11 = add16Bit(R11,(R6+CONST()),0);break; // add r11,r6,#*
case 0x3b7: R11 = add16Bit(R11,(R7+CONST()),0);break; // add r11,r7,#*
case 0x3b8: R11 = add16Bit(R11,(R8+CONST()),0);break; // add r11,r8,#*
case 0x3b9: R11 = add16Bit(R11,(R9+CONST()),0);break; // add r11,r9,#*
case 0x3ba: R11 = add16Bit(R11,(R10+CONST()),0);break; // add r11,r10,#*
case 0x3bb: R11 = add16Bit(R11,(R11+CONST()),0);break; // add r11,r11,#*
case 0x3bc: R11 = add16Bit(R11,(R12+CONST()),0);break; // add r11,r12,#*
case 0x3bd: R11 = add16Bit(R11,(R13+CONST()),0);break; // add r11,r13,#*
case 0x3be: R11 = add16Bit(R11,(R14+CONST()),0);break; // add r11,r14,#*
case 0x3bf: R11 = add16Bit(R11,FETCH(),0);break; // add r11,#*
case 0x3c0: R12 = add16Bit(R12,(R0+CONST()),0);break; // add r12,r0,#*
case 0x3c1: R12 = add16Bit(R12,(R1+CONST()),0);break; // add r12,r1,#*
case 0x3c2: R12 = add16Bit(R12,(R2+CONST()),0);break; // add r12,r2,#*
case 0x3c3: R12 = add16Bit(R12,(R3+CONST()),0);break; // add r12,r3,#*
case 0x3c4: R12 = add16Bit(R12,(R4+CONST()),0);break; // add r12,r4,#*
case 0x3c5: R12 = add16Bit(R12,(R5+CONST()),0);break; // add r12,r5,#*
case 0x3c6: R12 = add16Bit(R12,(R6+CONST()),0);break; // add r12,r6,#*
case 0x3c7: R12 = add16Bit(R12,(R7+CONST()),0);break; // add r12,r7,#*
case 0x3c8: R12 = add16Bit(R12,(R8+CONST()),0);break; // add r12,r8,#*
case 0x3c9: R12 = add16Bit(R12,(R9+CONST()),0);break; // add r12,r9,#*
case 0x3ca: R12 = add16Bit(R12,(R10+CONST()),0);break; // add r12,r10,#*
case 0x3cb: R12 = add16Bit(R12,(R11+CONST()),0);break; // add r12,r11,#*
case 0x3cc: R12 = add16Bit(R12,(R12+CONST()),0);break; // add r12,r12,#*
case 0x3cd: R12 = add16Bit(R12,(R13+CONST()),0);break; // add r12,r13,#*
case 0x3ce: R12 = add16Bit(R12,(R14+CONST()),0);break; // add r12,r14,#*
case 0x3cf: R12 = add16Bit(R12,FETCH(),0);break; // add r12,#*
case 0x3d0: R13 = add16Bit(R13,(R0+CONST()),0);break; // add r13,r0,#*
case 0x3d1: R13 = add16Bit(R13,(R1+CONST()),0);break; // add r13,r1,#*
case 0x3d2: R13 = add16Bit(R13,(R2+CONST()),0);break; // add r13,r2,#*
case 0x3d3: R13 = add16Bit(R13,(R3+CONST()),0);break; // add r13,r3,#*
case 0x3d4: R13 = add16Bit(R13,(R4+CONST()),0);break; // add r13,r4,#*
case 0x3d5: R13 = add16Bit(R13,(R5+CONST()),0);break; // add r13,r5,#*
case 0x3d6: R13 = add16Bit(R13,(R6+CONST()),0);break; // add r13,r6,#*
case 0x3d7: R13 = add16Bit(R13,(R7+CONST()),0);break; // add r13,r7,#*
case 0x3d8: R13 = add16Bit(R13,(R8+CONST()),0);break; // add r13,r8,#*
case 0x3d9: R13 = add16Bit(R13,(R9+CONST()),0);break; // add r13,r9,#*
case 0x3da: R13 = add16Bit(R13,(R10+CONST()),0);break; // add r13,r10,#*
case 0x3db: R13 = add16Bit(R13,(R11+CONST()),0);break; // add r13,r11,#*
case 0x3dc: R13 = add16Bit(R13,(R12+CONST()),0);break; // add r13,r12,#*
case 0x3dd: R13 = add16Bit(R13,(R13+CONST()),0);break; // add r13,r13,#*
case 0x3de: R13 = add16Bit(R13,(R14+CONST()),0);break; // add r13,r14,#*
case 0x3df: R13 = add16Bit(R13,FETCH(),0);break; // add r13,#*
case 0x3e0: R14 = add16Bit(R14,(R0+CONST()),0);break; // add r14,r0,#*
case 0x3e1: R14 = add16Bit(R14,(R1+CONST()),0);break; // add r14,r1,#*
case 0x3e2: R14 = add16Bit(R14,(R2+CONST()),0);break; // add r14,r2,#*
case 0x3e3: R14 = add16Bit(R14,(R3+CONST()),0);break; // add r14,r3,#*
case 0x3e4: R14 = add16Bit(R14,(R4+CONST()),0);break; // add r14,r4,#*
case 0x3e5: R14 = add16Bit(R14,(R5+CONST()),0);break; // add r14,r5,#*
case 0x3e6: R14 = add16Bit(R14,(R6+CONST()),0);break; // add r14,r6,#*
case 0x3e7: R14 = add16Bit(R14,(R7+CONST()),0);break; // add r14,r7,#*
case 0x3e8: R14 = add16Bit(R14,(R8+CONST()),0);break; // add r14,r8,#*
case 0x3e9: R14 = add16Bit(R14,(R9+CONST()),0);break; // add r14,r9,#*
case 0x3ea: R14 = add16Bit(R14,(R10+CONST()),0);break; // add r14,r10,#*
case 0x3eb: R14 = add16Bit(R14,(R11+CONST()),0);break; // add r14,r11,#*
case 0x3ec: R14 = add16Bit(R14,(R12+CONST()),0);break; // add r14,r12,#*
case 0x3ed: R14 = add16Bit(R14,(R13+CONST()),0);break; // add r14,r13,#*
case 0x3ee: R14 = add16Bit(R14,(R14+CONST()),0);break; // add r14,r14,#*
case 0x3ef: R14 = add16Bit(R14,FETCH(),0);break; // add r14,#*
case 0x3f0: R15 = add16Bit(R15,(R0+CONST()),0);break; // add r15,r0,#*
case 0x3f1: R15 = add16Bit(R15,(R1+CONST()),0);break; // add r15,r1,#*
case 0x3f2: R15 = add16Bit(R15,(R2+CONST()),0);break; // add r15,r2,#*
case 0x3f3: R15 = add16Bit(R15,(R3+CONST()),0);break; // add r15,r3,#*
case 0x3f4: R15 = add16Bit(R15,(R4+CONST()),0);break; // add r15,r4,#*
case 0x3f5: R15 = add16Bit(R15,(R5+CONST()),0);break; // add r15,r5,#*
case 0x3f6: R15 = add16Bit(R15,(R6+CONST()),0);break; // add r15,r6,#*
case 0x3f7: R15 = add16Bit(R15,(R7+CONST()),0);break; // add r15,r7,#*
case 0x3f8: R15 = add16Bit(R15,(R8+CONST()),0);break; // add r15,r8,#*
case 0x3f9: R15 = add16Bit(R15,(R9+CONST()),0);break; // add r15,r9,#*
case 0x3fa: R15 = add16Bit(R15,(R10+CONST()),0);break; // add r15,r10,#*
case 0x3fb: R15 = add16Bit(R15,(R11+CONST()),0);break; // add r15,r11,#*
case 0x3fc: R15 = add16Bit(R15,(R12+CONST()),0);break; // add r15,r12,#*
case 0x3fd: R15 = add16Bit(R15,(R13+CONST()),0);break; // add r15,r13,#*
case 0x3fe: R15 = add16Bit(R15,(R14+CONST()),0);break; // add r15,r14,#*
case 0x3ff: R15 = add16Bit(R15,FETCH(),0);break; // add r15,#*
case 0x400: R0 = add16Bit(R0,(R0+CONST()),carryFlag);break; // adc r0,r0,#*
case 0x401: R0 = add16Bit(R0,(R1+CONST()),carryFlag);break; // adc r0,r1,#*
case 0x402: R0 = add16Bit(R0,(R2+CONST()),carryFlag);break; // adc r0,r2,#*
case 0x403: R0 = add16Bit(R0,(R3+CONST()),carryFlag);break; // adc r0,r3,#*
case 0x404: R0 = add16Bit(R0,(R4+CONST()),carryFlag);break; // adc r0,r4,#*
case 0x405: R0 = add16Bit(R0,(R5+CONST()),carryFlag);break; // adc r0,r5,#*
case 0x406: R0 = add16Bit(R0,(R6+CONST()),carryFlag);break; // adc r0,r6,#*
case 0x407: R0 = add16Bit(R0,(R7+CONST()),carryFlag);break; // adc r0,r7,#*
case 0x408: R0 = add16Bit(R0,(R8+CONST()),carryFlag);break; // adc r0,r8,#*
case 0x409: R0 = add16Bit(R0,(R9+CONST()),carryFlag);break; // adc r0,r9,#*
case 0x40a: R0 = add16Bit(R0,(R10+CONST()),carryFlag);break; // adc r0,r10,#*
case 0x40b: R0 = add16Bit(R0,(R11+CONST()),carryFlag);break; // adc r0,r11,#*
case 0x40c: R0 = add16Bit(R0,(R12+CONST()),carryFlag);break; // adc r0,r12,#*
case 0x40d: R0 = add16Bit(R0,(R13+CONST()),carryFlag);break; // adc r0,r13,#*
case 0x40e: R0 = add16Bit(R0,(R14+CONST()),carryFlag);break; // adc r0,r14,#*
case 0x40f: R0 = add16Bit(R0,FETCH(),carryFlag);break; // adc r0,#*
case 0x410: R1 = add16Bit(R1,(R0+CONST()),carryFlag);break; // adc r1,r0,#*
case 0x411: R1 = add16Bit(R1,(R1+CONST()),carryFlag);break; // adc r1,r1,#*
case 0x412: R1 = add16Bit(R1,(R2+CONST()),carryFlag);break; // adc r1,r2,#*
case 0x413: R1 = add16Bit(R1,(R3+CONST()),carryFlag);break; // adc r1,r3,#*
case 0x414: R1 = add16Bit(R1,(R4+CONST()),carryFlag);break; // adc r1,r4,#*
case 0x415: R1 = add16Bit(R1,(R5+CONST()),carryFlag);break; // adc r1,r5,#*
case 0x416: R1 = add16Bit(R1,(R6+CONST()),carryFlag);break; // adc r1,r6,#*
case 0x417: R1 = add16Bit(R1,(R7+CONST()),carryFlag);break; // adc r1,r7,#*
case 0x418: R1 = add16Bit(R1,(R8+CONST()),carryFlag);break; // adc r1,r8,#*
case 0x419: R1 = add16Bit(R1,(R9+CONST()),carryFlag);break; // adc r1,r9,#*
case 0x41a: R1 = add16Bit(R1,(R10+CONST()),carryFlag);break; // adc r1,r10,#*
case 0x41b: R1 = add16Bit(R1,(R11+CONST()),carryFlag);break; // adc r1,r11,#*
case 0x41c: R1 = add16Bit(R1,(R12+CONST()),carryFlag);break; // adc r1,r12,#*
case 0x41d: R1 = add16Bit(R1,(R13+CONST()),carryFlag);break; // adc r1,r13,#*
case 0x41e: R1 = add16Bit(R1,(R14+CONST()),carryFlag);break; // adc r1,r14,#*
case 0x41f: R1 = add16Bit(R1,FETCH(),carryFlag);break; // adc r1,#*
case 0x420: R2 = add16Bit(R2,(R0+CONST()),carryFlag);break; // adc r2,r0,#*
case 0x421: R2 = add16Bit(R2,(R1+CONST()),carryFlag);break; // adc r2,r1,#*
case 0x422: R2 = add16Bit(R2,(R2+CONST()),carryFlag);break; // adc r2,r2,#*
case 0x423: R2 = add16Bit(R2,(R3+CONST()),carryFlag);break; // adc r2,r3,#*
case 0x424: R2 = add16Bit(R2,(R4+CONST()),carryFlag);break; // adc r2,r4,#*
case 0x425: R2 = add16Bit(R2,(R5+CONST()),carryFlag);break; // adc r2,r5,#*
case 0x426: R2 = add16Bit(R2,(R6+CONST()),carryFlag);break; // adc r2,r6,#*
case 0x427: R2 = add16Bit(R2,(R7+CONST()),carryFlag);break; // adc r2,r7,#*
case 0x428: R2 = add16Bit(R2,(R8+CONST()),carryFlag);break; // adc r2,r8,#*
case 0x429: R2 = add16Bit(R2,(R9+CONST()),carryFlag);break; // adc r2,r9,#*
case 0x42a: R2 = add16Bit(R2,(R10+CONST()),carryFlag);break; // adc r2,r10,#*
case 0x42b: R2 = add16Bit(R2,(R11+CONST()),carryFlag);break; // adc r2,r11,#*
case 0x42c: R2 = add16Bit(R2,(R12+CONST()),carryFlag);break; // adc r2,r12,#*
case 0x42d: R2 = add16Bit(R2,(R13+CONST()),carryFlag);break; // adc r2,r13,#*
case 0x42e: R2 = add16Bit(R2,(R14+CONST()),carryFlag);break; // adc r2,r14,#*
case 0x42f: R2 = add16Bit(R2,FETCH(),carryFlag);break; // adc r2,#*
case 0x430: R3 = add16Bit(R3,(R0+CONST()),carryFlag);break; // adc r3,r0,#*
case 0x431: R3 = add16Bit(R3,(R1+CONST()),carryFlag);break; // adc r3,r1,#*
case 0x432: R3 = add16Bit(R3,(R2+CONST()),carryFlag);break; // adc r3,r2,#*
case 0x433: R3 = add16Bit(R3,(R3+CONST()),carryFlag);break; // adc r3,r3,#*
case 0x434: R3 = add16Bit(R3,(R4+CONST()),carryFlag);break; // adc r3,r4,#*
case 0x435: R3 = add16Bit(R3,(R5+CONST()),carryFlag);break; // adc r3,r5,#*
case 0x436: R3 = add16Bit(R3,(R6+CONST()),carryFlag);break; // adc r3,r6,#*
case 0x437: R3 = add16Bit(R3,(R7+CONST()),carryFlag);break; // adc r3,r7,#*
case 0x438: R3 = add16Bit(R3,(R8+CONST()),carryFlag);break; // adc r3,r8,#*
case 0x439: R3 = add16Bit(R3,(R9+CONST()),carryFlag);break; // adc r3,r9,#*
case 0x43a: R3 = add16Bit(R3,(R10+CONST()),carryFlag);break; // adc r3,r10,#*
case 0x43b: R3 = add16Bit(R3,(R11+CONST()),carryFlag);break; // adc r3,r11,#*
case 0x43c: R3 = add16Bit(R3,(R12+CONST()),carryFlag);break; // adc r3,r12,#*
case 0x43d: R3 = add16Bit(R3,(R13+CONST()),carryFlag);break; // adc r3,r13,#*
case 0x43e: R3 = add16Bit(R3,(R14+CONST()),carryFlag);break; // adc r3,r14,#*
case 0x43f: R3 = add16Bit(R3,FETCH(),carryFlag);break; // adc r3,#*
case 0x440: R4 = add16Bit(R4,(R0+CONST()),carryFlag);break; // adc r4,r0,#*
case 0x441: R4 = add16Bit(R4,(R1+CONST()),carryFlag);break; // adc r4,r1,#*
case 0x442: R4 = add16Bit(R4,(R2+CONST()),carryFlag);break; // adc r4,r2,#*
case 0x443: R4 = add16Bit(R4,(R3+CONST()),carryFlag);break; // adc r4,r3,#*
case 0x444: R4 = add16Bit(R4,(R4+CONST()),carryFlag);break; // adc r4,r4,#*
case 0x445: R4 = add16Bit(R4,(R5+CONST()),carryFlag);break; // adc r4,r5,#*
case 0x446: R4 = add16Bit(R4,(R6+CONST()),carryFlag);break; // adc r4,r6,#*
case 0x447: R4 = add16Bit(R4,(R7+CONST()),carryFlag);break; // adc r4,r7,#*
case 0x448: R4 = add16Bit(R4,(R8+CONST()),carryFlag);break; // adc r4,r8,#*
case 0x449: R4 = add16Bit(R4,(R9+CONST()),carryFlag);break; // adc r4,r9,#*
case 0x44a: R4 = add16Bit(R4,(R10+CONST()),carryFlag);break; // adc r4,r10,#*
case 0x44b: R4 = add16Bit(R4,(R11+CONST()),carryFlag);break; // adc r4,r11,#*
case 0x44c: R4 = add16Bit(R4,(R12+CONST()),carryFlag);break; // adc r4,r12,#*
case 0x44d: R4 = add16Bit(R4,(R13+CONST()),carryFlag);break; // adc r4,r13,#*
case 0x44e: R4 = add16Bit(R4,(R14+CONST()),carryFlag);break; // adc r4,r14,#*
case 0x44f: R4 = add16Bit(R4,FETCH(),carryFlag);break; // adc r4,#*
case 0x450: R5 = add16Bit(R5,(R0+CONST()),carryFlag);break; // adc r5,r0,#*
case 0x451: R5 = add16Bit(R5,(R1+CONST()),carryFlag);break; // adc r5,r1,#*
case 0x452: R5 = add16Bit(R5,(R2+CONST()),carryFlag);break; // adc r5,r2,#*
case 0x453: R5 = add16Bit(R5,(R3+CONST()),carryFlag);break; // adc r5,r3,#*
case 0x454: R5 = add16Bit(R5,(R4+CONST()),carryFlag);break; // adc r5,r4,#*
case 0x455: R5 = add16Bit(R5,(R5+CONST()),carryFlag);break; // adc r5,r5,#*
case 0x456: R5 = add16Bit(R5,(R6+CONST()),carryFlag);break; // adc r5,r6,#*
case 0x457: R5 = add16Bit(R5,(R7+CONST()),carryFlag);break; // adc r5,r7,#*
case 0x458: R5 = add16Bit(R5,(R8+CONST()),carryFlag);break; // adc r5,r8,#*
case 0x459: R5 = add16Bit(R5,(R9+CONST()),carryFlag);break; // adc r5,r9,#*
case 0x45a: R5 = add16Bit(R5,(R10+CONST()),carryFlag);break; // adc r5,r10,#*
case 0x45b: R5 = add16Bit(R5,(R11+CONST()),carryFlag);break; // adc r5,r11,#*
case 0x45c: R5 = add16Bit(R5,(R12+CONST()),carryFlag);break; // adc r5,r12,#*
case 0x45d: R5 = add16Bit(R5,(R13+CONST()),carryFlag);break; // adc r5,r13,#*
case 0x45e: R5 = add16Bit(R5,(R14+CONST()),carryFlag);break; // adc r5,r14,#*
case 0x45f: R5 = add16Bit(R5,FETCH(),carryFlag);break; // adc r5,#*
case 0x460: R6 = add16Bit(R6,(R0+CONST()),carryFlag);break; // adc r6,r0,#*
case 0x461: R6 = add16Bit(R6,(R1+CONST()),carryFlag);break; // adc r6,r1,#*
case 0x462: R6 = add16Bit(R6,(R2+CONST()),carryFlag);break; // adc r6,r2,#*
case 0x463: R6 = add16Bit(R6,(R3+CONST()),carryFlag);break; // adc r6,r3,#*
case 0x464: R6 = add16Bit(R6,(R4+CONST()),carryFlag);break; // adc r6,r4,#*
case 0x465: R6 = add16Bit(R6,(R5+CONST()),carryFlag);break; // adc r6,r5,#*
case 0x466: R6 = add16Bit(R6,(R6+CONST()),carryFlag);break; // adc r6,r6,#*
case 0x467: R6 = add16Bit(R6,(R7+CONST()),carryFlag);break; // adc r6,r7,#*
case 0x468: R6 = add16Bit(R6,(R8+CONST()),carryFlag);break; // adc r6,r8,#*
case 0x469: R6 = add16Bit(R6,(R9+CONST()),carryFlag);break; // adc r6,r9,#*
case 0x46a: R6 = add16Bit(R6,(R10+CONST()),carryFlag);break; // adc r6,r10,#*
case 0x46b: R6 = add16Bit(R6,(R11+CONST()),carryFlag);break; // adc r6,r11,#*
case 0x46c: R6 = add16Bit(R6,(R12+CONST()),carryFlag);break; // adc r6,r12,#*
case 0x46d: R6 = add16Bit(R6,(R13+CONST()),carryFlag);break; // adc r6,r13,#*
case 0x46e: R6 = add16Bit(R6,(R14+CONST()),carryFlag);break; // adc r6,r14,#*
case 0x46f: R6 = add16Bit(R6,FETCH(),carryFlag);break; // adc r6,#*
case 0x470: R7 = add16Bit(R7,(R0+CONST()),carryFlag);break; // adc r7,r0,#*
case 0x471: R7 = add16Bit(R7,(R1+CONST()),carryFlag);break; // adc r7,r1,#*
case 0x472: R7 = add16Bit(R7,(R2+CONST()),carryFlag);break; // adc r7,r2,#*
case 0x473: R7 = add16Bit(R7,(R3+CONST()),carryFlag);break; // adc r7,r3,#*
case 0x474: R7 = add16Bit(R7,(R4+CONST()),carryFlag);break; // adc r7,r4,#*
case 0x475: R7 = add16Bit(R7,(R5+CONST()),carryFlag);break; // adc r7,r5,#*
case 0x476: R7 = add16Bit(R7,(R6+CONST()),carryFlag);break; // adc r7,r6,#*
case 0x477: R7 = add16Bit(R7,(R7+CONST()),carryFlag);break; // adc r7,r7,#*
case 0x478: R7 = add16Bit(R7,(R8+CONST()),carryFlag);break; // adc r7,r8,#*
case 0x479: R7 = add16Bit(R7,(R9+CONST()),carryFlag);break; // adc r7,r9,#*
case 0x47a: R7 = add16Bit(R7,(R10+CONST()),carryFlag);break; // adc r7,r10,#*
case 0x47b: R7 = add16Bit(R7,(R11+CONST()),carryFlag);break; // adc r7,r11,#*
case 0x47c: R7 = add16Bit(R7,(R12+CONST()),carryFlag);break; // adc r7,r12,#*
case 0x47d: R7 = add16Bit(R7,(R13+CONST()),carryFlag);break; // adc r7,r13,#*
case 0x47e: R7 = add16Bit(R7,(R14+CONST()),carryFlag);break; // adc r7,r14,#*
case 0x47f: R7 = add16Bit(R7,FETCH(),carryFlag);break; // adc r7,#*
case 0x480: R8 = add16Bit(R8,(R0+CONST()),carryFlag);break; // adc r8,r0,#*
case 0x481: R8 = add16Bit(R8,(R1+CONST()),carryFlag);break; // adc r8,r1,#*
case 0x482: R8 = add16Bit(R8,(R2+CONST()),carryFlag);break; // adc r8,r2,#*
case 0x483: R8 = add16Bit(R8,(R3+CONST()),carryFlag);break; // adc r8,r3,#*
case 0x484: R8 = add16Bit(R8,(R4+CONST()),carryFlag);break; // adc r8,r4,#*
case 0x485: R8 = add16Bit(R8,(R5+CONST()),carryFlag);break; // adc r8,r5,#*
case 0x486: R8 = add16Bit(R8,(R6+CONST()),carryFlag);break; // adc r8,r6,#*
case 0x487: R8 = add16Bit(R8,(R7+CONST()),carryFlag);break; // adc r8,r7,#*
case 0x488: R8 = add16Bit(R8,(R8+CONST()),carryFlag);break; // adc r8,r8,#*
case 0x489: R8 = add16Bit(R8,(R9+CONST()),carryFlag);break; // adc r8,r9,#*
case 0x48a: R8 = add16Bit(R8,(R10+CONST()),carryFlag);break; // adc r8,r10,#*
case 0x48b: R8 = add16Bit(R8,(R11+CONST()),carryFlag);break; // adc r8,r11,#*
case 0x48c: R8 = add16Bit(R8,(R12+CONST()),carryFlag);break; // adc r8,r12,#*
case 0x48d: R8 = add16Bit(R8,(R13+CONST()),carryFlag);break; // adc r8,r13,#*
case 0x48e: R8 = add16Bit(R8,(R14+CONST()),carryFlag);break; // adc r8,r14,#*
case 0x48f: R8 = add16Bit(R8,FETCH(),carryFlag);break; // adc r8,#*
case 0x490: R9 = add16Bit(R9,(R0+CONST()),carryFlag);break; // adc r9,r0,#*
case 0x491: R9 = add16Bit(R9,(R1+CONST()),carryFlag);break; // adc r9,r1,#*
case 0x492: R9 = add16Bit(R9,(R2+CONST()),carryFlag);break; // adc r9,r2,#*
case 0x493: R9 = add16Bit(R9,(R3+CONST()),carryFlag);break; // adc r9,r3,#*
case 0x494: R9 = add16Bit(R9,(R4+CONST()),carryFlag);break; // adc r9,r4,#*
case 0x495: R9 = add16Bit(R9,(R5+CONST()),carryFlag);break; // adc r9,r5,#*
case 0x496: R9 = add16Bit(R9,(R6+CONST()),carryFlag);break; // adc r9,r6,#*
case 0x497: R9 = add16Bit(R9,(R7+CONST()),carryFlag);break; // adc r9,r7,#*
case 0x498: R9 = add16Bit(R9,(R8+CONST()),carryFlag);break; // adc r9,r8,#*
case 0x499: R9 = add16Bit(R9,(R9+CONST()),carryFlag);break; // adc r9,r9,#*
case 0x49a: R9 = add16Bit(R9,(R10+CONST()),carryFlag);break; // adc r9,r10,#*
case 0x49b: R9 = add16Bit(R9,(R11+CONST()),carryFlag);break; // adc r9,r11,#*
case 0x49c: R9 = add16Bit(R9,(R12+CONST()),carryFlag);break; // adc r9,r12,#*
case 0x49d: R9 = add16Bit(R9,(R13+CONST()),carryFlag);break; // adc r9,r13,#*
case 0x49e: R9 = add16Bit(R9,(R14+CONST()),carryFlag);break; // adc r9,r14,#*
case 0x49f: R9 = add16Bit(R9,FETCH(),carryFlag);break; // adc r9,#*
case 0x4a0: R10 = add16Bit(R10,(R0+CONST()),carryFlag);break; // adc r10,r0,#*
case 0x4a1: R10 = add16Bit(R10,(R1+CONST()),carryFlag);break; // adc r10,r1,#*
case 0x4a2: R10 = add16Bit(R10,(R2+CONST()),carryFlag);break; // adc r10,r2,#*
case 0x4a3: R10 = add16Bit(R10,(R3+CONST()),carryFlag);break; // adc r10,r3,#*
case 0x4a4: R10 = add16Bit(R10,(R4+CONST()),carryFlag);break; // adc r10,r4,#*
case 0x4a5: R10 = add16Bit(R10,(R5+CONST()),carryFlag);break; // adc r10,r5,#*
case 0x4a6: R10 = add16Bit(R10,(R6+CONST()),carryFlag);break; // adc r10,r6,#*
case 0x4a7: R10 = add16Bit(R10,(R7+CONST()),carryFlag);break; // adc r10,r7,#*
case 0x4a8: R10 = add16Bit(R10,(R8+CONST()),carryFlag);break; // adc r10,r8,#*
case 0x4a9: R10 = add16Bit(R10,(R9+CONST()),carryFlag);break; // adc r10,r9,#*
case 0x4aa: R10 = add16Bit(R10,(R10+CONST()),carryFlag);break; // adc r10,r10,#*
case 0x4ab: R10 = add16Bit(R10,(R11+CONST()),carryFlag);break; // adc r10,r11,#*
case 0x4ac: R10 = add16Bit(R10,(R12+CONST()),carryFlag);break; // adc r10,r12,#*
case 0x4ad: R10 = add16Bit(R10,(R13+CONST()),carryFlag);break; // adc r10,r13,#*
case 0x4ae: R10 = add16Bit(R10,(R14+CONST()),carryFlag);break; // adc r10,r14,#*
case 0x4af: R10 = add16Bit(R10,FETCH(),carryFlag);break; // adc r10,#*
case 0x4b0: R11 = add16Bit(R11,(R0+CONST()),carryFlag);break; // adc r11,r0,#*
case 0x4b1: R11 = add16Bit(R11,(R1+CONST()),carryFlag);break; // adc r11,r1,#*
case 0x4b2: R11 = add16Bit(R11,(R2+CONST()),carryFlag);break; // adc r11,r2,#*
case 0x4b3: R11 = add16Bit(R11,(R3+CONST()),carryFlag);break; // adc r11,r3,#*
case 0x4b4: R11 = add16Bit(R11,(R4+CONST()),carryFlag);break; // adc r11,r4,#*
case 0x4b5: R11 = add16Bit(R11,(R5+CONST()),carryFlag);break; // adc r11,r5,#*
case 0x4b6: R11 = add16Bit(R11,(R6+CONST()),carryFlag);break; // adc r11,r6,#*
case 0x4b7: R11 = add16Bit(R11,(R7+CONST()),carryFlag);break; // adc r11,r7,#*
case 0x4b8: R11 = add16Bit(R11,(R8+CONST()),carryFlag);break; // adc r11,r8,#*
case 0x4b9: R11 = add16Bit(R11,(R9+CONST()),carryFlag);break; // adc r11,r9,#*
case 0x4ba: R11 = add16Bit(R11,(R10+CONST()),carryFlag);break; // adc r11,r10,#*
case 0x4bb: R11 = add16Bit(R11,(R11+CONST()),carryFlag);break; // adc r11,r11,#*
case 0x4bc: R11 = add16Bit(R11,(R12+CONST()),carryFlag);break; // adc r11,r12,#*
case 0x4bd: R11 = add16Bit(R11,(R13+CONST()),carryFlag);break; // adc r11,r13,#*
case 0x4be: R11 = add16Bit(R11,(R14+CONST()),carryFlag);break; // adc r11,r14,#*
case 0x4bf: R11 = add16Bit(R11,FETCH(),carryFlag);break; // adc r11,#*
case 0x4c0: R12 = add16Bit(R12,(R0+CONST()),carryFlag);break; // adc r12,r0,#*
case 0x4c1: R12 = add16Bit(R12,(R1+CONST()),carryFlag);break; // adc r12,r1,#*
case 0x4c2: R12 = add16Bit(R12,(R2+CONST()),carryFlag);break; // adc r12,r2,#*
case 0x4c3: R12 = add16Bit(R12,(R3+CONST()),carryFlag);break; // adc r12,r3,#*
case 0x4c4: R12 = add16Bit(R12,(R4+CONST()),carryFlag);break; // adc r12,r4,#*
case 0x4c5: R12 = add16Bit(R12,(R5+CONST()),carryFlag);break; // adc r12,r5,#*
case 0x4c6: R12 = add16Bit(R12,(R6+CONST()),carryFlag);break; // adc r12,r6,#*
case 0x4c7: R12 = add16Bit(R12,(R7+CONST()),carryFlag);break; // adc r12,r7,#*
case 0x4c8: R12 = add16Bit(R12,(R8+CONST()),carryFlag);break; // adc r12,r8,#*
case 0x4c9: R12 = add16Bit(R12,(R9+CONST()),carryFlag);break; // adc r12,r9,#*
case 0x4ca: R12 = add16Bit(R12,(R10+CONST()),carryFlag);break; // adc r12,r10,#*
case 0x4cb: R12 = add16Bit(R12,(R11+CONST()),carryFlag);break; // adc r12,r11,#*
case 0x4cc: R12 = add16Bit(R12,(R12+CONST()),carryFlag);break; // adc r12,r12,#*
case 0x4cd: R12 = add16Bit(R12,(R13+CONST()),carryFlag);break; // adc r12,r13,#*
case 0x4ce: R12 = add16Bit(R12,(R14+CONST()),carryFlag);break; // adc r12,r14,#*
case 0x4cf: R12 = add16Bit(R12,FETCH(),carryFlag);break; // adc r12,#*
case 0x4d0: R13 = add16Bit(R13,(R0+CONST()),carryFlag);break; // adc r13,r0,#*
case 0x4d1: R13 = add16Bit(R13,(R1+CONST()),carryFlag);break; // adc r13,r1,#*
case 0x4d2: R13 = add16Bit(R13,(R2+CONST()),carryFlag);break; // adc r13,r2,#*
case 0x4d3: R13 = add16Bit(R13,(R3+CONST()),carryFlag);break; // adc r13,r3,#*
case 0x4d4: R13 = add16Bit(R13,(R4+CONST()),carryFlag);break; // adc r13,r4,#*
case 0x4d5: R13 = add16Bit(R13,(R5+CONST()),carryFlag);break; // adc r13,r5,#*
case 0x4d6: R13 = add16Bit(R13,(R6+CONST()),carryFlag);break; // adc r13,r6,#*
case 0x4d7: R13 = add16Bit(R13,(R7+CONST()),carryFlag);break; // adc r13,r7,#*
case 0x4d8: R13 = add16Bit(R13,(R8+CONST()),carryFlag);break; // adc r13,r8,#*
case 0x4d9: R13 = add16Bit(R13,(R9+CONST()),carryFlag);break; // adc r13,r9,#*
case 0x4da: R13 = add16Bit(R13,(R10+CONST()),carryFlag);break; // adc r13,r10,#*
case 0x4db: R13 = add16Bit(R13,(R11+CONST()),carryFlag);break; // adc r13,r11,#*
case 0x4dc: R13 = add16Bit(R13,(R12+CONST()),carryFlag);break; // adc r13,r12,#*
case 0x4dd: R13 = add16Bit(R13,(R13+CONST()),carryFlag);break; // adc r13,r13,#*
case 0x4de: R13 = add16Bit(R13,(R14+CONST()),carryFlag);break; // adc r13,r14,#*
case 0x4df: R13 = add16Bit(R13,FETCH(),carryFlag);break; // adc r13,#*
case 0x4e0: R14 = add16Bit(R14,(R0+CONST()),carryFlag);break; // adc r14,r0,#*
case 0x4e1: R14 = add16Bit(R14,(R1+CONST()),carryFlag);break; // adc r14,r1,#*
case 0x4e2: R14 = add16Bit(R14,(R2+CONST()),carryFlag);break; // adc r14,r2,#*
case 0x4e3: R14 = add16Bit(R14,(R3+CONST()),carryFlag);break; // adc r14,r3,#*
case 0x4e4: R14 = add16Bit(R14,(R4+CONST()),carryFlag);break; // adc r14,r4,#*
case 0x4e5: R14 = add16Bit(R14,(R5+CONST()),carryFlag);break; // adc r14,r5,#*
case 0x4e6: R14 = add16Bit(R14,(R6+CONST()),carryFlag);break; // adc r14,r6,#*
case 0x4e7: R14 = add16Bit(R14,(R7+CONST()),carryFlag);break; // adc r14,r7,#*
case 0x4e8: R14 = add16Bit(R14,(R8+CONST()),carryFlag);break; // adc r14,r8,#*
case 0x4e9: R14 = add16Bit(R14,(R9+CONST()),carryFlag);break; // adc r14,r9,#*
case 0x4ea: R14 = add16Bit(R14,(R10+CONST()),carryFlag);break; // adc r14,r10,#*
case 0x4eb: R14 = add16Bit(R14,(R11+CONST()),carryFlag);break; // adc r14,r11,#*
case 0x4ec: R14 = add16Bit(R14,(R12+CONST()),carryFlag);break; // adc r14,r12,#*
case 0x4ed: R14 = add16Bit(R14,(R13+CONST()),carryFlag);break; // adc r14,r13,#*
case 0x4ee: R14 = add16Bit(R14,(R14+CONST()),carryFlag);break; // adc r14,r14,#*
case 0x4ef: R14 = add16Bit(R14,FETCH(),carryFlag);break; // adc r14,#*
case 0x4f0: R15 = add16Bit(R15,(R0+CONST()),carryFlag);break; // adc r15,r0,#*
case 0x4f1: R15 = add16Bit(R15,(R1+CONST()),carryFlag);break; // adc r15,r1,#*
case 0x4f2: R15 = add16Bit(R15,(R2+CONST()),carryFlag);break; // adc r15,r2,#*
case 0x4f3: R15 = add16Bit(R15,(R3+CONST()),carryFlag);break; // adc r15,r3,#*
case 0x4f4: R15 = add16Bit(R15,(R4+CONST()),carryFlag);break; // adc r15,r4,#*
case 0x4f5: R15 = add16Bit(R15,(R5+CONST()),carryFlag);break; // adc r15,r5,#*
case 0x4f6: R15 = add16Bit(R15,(R6+CONST()),carryFlag);break; // adc r15,r6,#*
case 0x4f7: R15 = add16Bit(R15,(R7+CONST()),carryFlag);break; // adc r15,r7,#*
case 0x4f8: R15 = add16Bit(R15,(R8+CONST()),carryFlag);break; // adc r15,r8,#*
case 0x4f9: R15 = add16Bit(R15,(R9+CONST()),carryFlag);break; // adc r15,r9,#*
case 0x4fa: R15 = add16Bit(R15,(R10+CONST()),carryFlag);break; // adc r15,r10,#*
case 0x4fb: R15 = add16Bit(R15,(R11+CONST()),carryFlag);break; // adc r15,r11,#*
case 0x4fc: R15 = add16Bit(R15,(R12+CONST()),carryFlag);break; // adc r15,r12,#*
case 0x4fd: R15 = add16Bit(R15,(R13+CONST()),carryFlag);break; // adc r15,r13,#*
case 0x4fe: R15 = add16Bit(R15,(R14+CONST()),carryFlag);break; // adc r15,r14,#*
case 0x4ff: R15 = add16Bit(R15,FETCH(),carryFlag);break; // adc r15,#*
case 0x500: R0 = sub16Bit(R0,(R0+CONST()));break; // sub r0,r0,#*
case 0x501: R0 = sub16Bit(R0,(R1+CONST()));break; // sub r0,r1,#*
case 0x502: R0 = sub16Bit(R0,(R2+CONST()));break; // sub r0,r2,#*
case 0x503: R0 = sub16Bit(R0,(R3+CONST()));break; // sub r0,r3,#*
case 0x504: R0 = sub16Bit(R0,(R4+CONST()));break; // sub r0,r4,#*
case 0x505: R0 = sub16Bit(R0,(R5+CONST()));break; // sub r0,r5,#*
case 0x506: R0 = sub16Bit(R0,(R6+CONST()));break; // sub r0,r6,#*
case 0x507: R0 = sub16Bit(R0,(R7+CONST()));break; // sub r0,r7,#*
case 0x508: R0 = sub16Bit(R0,(R8+CONST()));break; // sub r0,r8,#*
case 0x509: R0 = sub16Bit(R0,(R9+CONST()));break; // sub r0,r9,#*
case 0x50a: R0 = sub16Bit(R0,(R10+CONST()));break; // sub r0,r10,#*
case 0x50b: R0 = sub16Bit(R0,(R11+CONST()));break; // sub r0,r11,#*
case 0x50c: R0 = sub16Bit(R0,(R12+CONST()));break; // sub r0,r12,#*
case 0x50d: R0 = sub16Bit(R0,(R13+CONST()));break; // sub r0,r13,#*
case 0x50e: R0 = sub16Bit(R0,(R14+CONST()));break; // sub r0,r14,#*
case 0x50f: R0 = sub16Bit(R0,FETCH());break; // sub r0,#*
case 0x510: R1 = sub16Bit(R1,(R0+CONST()));break; // sub r1,r0,#*
case 0x511: R1 = sub16Bit(R1,(R1+CONST()));break; // sub r1,r1,#*
case 0x512: R1 = sub16Bit(R1,(R2+CONST()));break; // sub r1,r2,#*
case 0x513: R1 = sub16Bit(R1,(R3+CONST()));break; // sub r1,r3,#*
case 0x514: R1 = sub16Bit(R1,(R4+CONST()));break; // sub r1,r4,#*
case 0x515: R1 = sub16Bit(R1,(R5+CONST()));break; // sub r1,r5,#*
case 0x516: R1 = sub16Bit(R1,(R6+CONST()));break; // sub r1,r6,#*
case 0x517: R1 = sub16Bit(R1,(R7+CONST()));break; // sub r1,r7,#*
case 0x518: R1 = sub16Bit(R1,(R8+CONST()));break; // sub r1,r8,#*
case 0x519: R1 = sub16Bit(R1,(R9+CONST()));break; // sub r1,r9,#*
case 0x51a: R1 = sub16Bit(R1,(R10+CONST()));break; // sub r1,r10,#*
case 0x51b: R1 = sub16Bit(R1,(R11+CONST()));break; // sub r1,r11,#*
case 0x51c: R1 = sub16Bit(R1,(R12+CONST()));break; // sub r1,r12,#*
case 0x51d: R1 = sub16Bit(R1,(R13+CONST()));break; // sub r1,r13,#*
case 0x51e: R1 = sub16Bit(R1,(R14+CONST()));break; // sub r1,r14,#*
case 0x51f: R1 = sub16Bit(R1,FETCH());break; // sub r1,#*
case 0x520: R2 = sub16Bit(R2,(R0+CONST()));break; // sub r2,r0,#*
case 0x521: R2 = sub16Bit(R2,(R1+CONST()));break; // sub r2,r1,#*
case 0x522: R2 = sub16Bit(R2,(R2+CONST()));break; // sub r2,r2,#*
case 0x523: R2 = sub16Bit(R2,(R3+CONST()));break; // sub r2,r3,#*
case 0x524: R2 = sub16Bit(R2,(R4+CONST()));break; // sub r2,r4,#*
case 0x525: R2 = sub16Bit(R2,(R5+CONST()));break; // sub r2,r5,#*
case 0x526: R2 = sub16Bit(R2,(R6+CONST()));break; // sub r2,r6,#*
case 0x527: R2 = sub16Bit(R2,(R7+CONST()));break; // sub r2,r7,#*
case 0x528: R2 = sub16Bit(R2,(R8+CONST()));break; // sub r2,r8,#*
case 0x529: R2 = sub16Bit(R2,(R9+CONST()));break; // sub r2,r9,#*
case 0x52a: R2 = sub16Bit(R2,(R10+CONST()));break; // sub r2,r10,#*
case 0x52b: R2 = sub16Bit(R2,(R11+CONST()));break; // sub r2,r11,#*
case 0x52c: R2 = sub16Bit(R2,(R12+CONST()));break; // sub r2,r12,#*
case 0x52d: R2 = sub16Bit(R2,(R13+CONST()));break; // sub r2,r13,#*
case 0x52e: R2 = sub16Bit(R2,(R14+CONST()));break; // sub r2,r14,#*
case 0x52f: R2 = sub16Bit(R2,FETCH());break; // sub r2,#*
case 0x530: R3 = sub16Bit(R3,(R0+CONST()));break; // sub r3,r0,#*
case 0x531: R3 = sub16Bit(R3,(R1+CONST()));break; // sub r3,r1,#*
case 0x532: R3 = sub16Bit(R3,(R2+CONST()));break; // sub r3,r2,#*
case 0x533: R3 = sub16Bit(R3,(R3+CONST()));break; // sub r3,r3,#*
case 0x534: R3 = sub16Bit(R3,(R4+CONST()));break; // sub r3,r4,#*
case 0x535: R3 = sub16Bit(R3,(R5+CONST()));break; // sub r3,r5,#*
case 0x536: R3 = sub16Bit(R3,(R6+CONST()));break; // sub r3,r6,#*
case 0x537: R3 = sub16Bit(R3,(R7+CONST()));break; // sub r3,r7,#*
case 0x538: R3 = sub16Bit(R3,(R8+CONST()));break; // sub r3,r8,#*
case 0x539: R3 = sub16Bit(R3,(R9+CONST()));break; // sub r3,r9,#*
case 0x53a: R3 = sub16Bit(R3,(R10+CONST()));break; // sub r3,r10,#*
case 0x53b: R3 = sub16Bit(R3,(R11+CONST()));break; // sub r3,r11,#*
case 0x53c: R3 = sub16Bit(R3,(R12+CONST()));break; // sub r3,r12,#*
case 0x53d: R3 = sub16Bit(R3,(R13+CONST()));break; // sub r3,r13,#*
case 0x53e: R3 = sub16Bit(R3,(R14+CONST()));break; // sub r3,r14,#*
case 0x53f: R3 = sub16Bit(R3,FETCH());break; // sub r3,#*
case 0x540: R4 = sub16Bit(R4,(R0+CONST()));break; // sub r4,r0,#*
case 0x541: R4 = sub16Bit(R4,(R1+CONST()));break; // sub r4,r1,#*
case 0x542: R4 = sub16Bit(R4,(R2+CONST()));break; // sub r4,r2,#*
case 0x543: R4 = sub16Bit(R4,(R3+CONST()));break; // sub r4,r3,#*
case 0x544: R4 = sub16Bit(R4,(R4+CONST()));break; // sub r4,r4,#*
case 0x545: R4 = sub16Bit(R4,(R5+CONST()));break; // sub r4,r5,#*
case 0x546: R4 = sub16Bit(R4,(R6+CONST()));break; // sub r4,r6,#*
case 0x547: R4 = sub16Bit(R4,(R7+CONST()));break; // sub r4,r7,#*
case 0x548: R4 = sub16Bit(R4,(R8+CONST()));break; // sub r4,r8,#*
case 0x549: R4 = sub16Bit(R4,(R9+CONST()));break; // sub r4,r9,#*
case 0x54a: R4 = sub16Bit(R4,(R10+CONST()));break; // sub r4,r10,#*
case 0x54b: R4 = sub16Bit(R4,(R11+CONST()));break; // sub r4,r11,#*
case 0x54c: R4 = sub16Bit(R4,(R12+CONST()));break; // sub r4,r12,#*
case 0x54d: R4 = sub16Bit(R4,(R13+CONST()));break; // sub r4,r13,#*
case 0x54e: R4 = sub16Bit(R4,(R14+CONST()));break; // sub r4,r14,#*
case 0x54f: R4 = sub16Bit(R4,FETCH());break; // sub r4,#*
case 0x550: R5 = sub16Bit(R5,(R0+CONST()));break; // sub r5,r0,#*
case 0x551: R5 = sub16Bit(R5,(R1+CONST()));break; // sub r5,r1,#*
case 0x552: R5 = sub16Bit(R5,(R2+CONST()));break; // sub r5,r2,#*
case 0x553: R5 = sub16Bit(R5,(R3+CONST()));break; // sub r5,r3,#*
case 0x554: R5 = sub16Bit(R5,(R4+CONST()));break; // sub r5,r4,#*
case 0x555: R5 = sub16Bit(R5,(R5+CONST()));break; // sub r5,r5,#*
case 0x556: R5 = sub16Bit(R5,(R6+CONST()));break; // sub r5,r6,#*
case 0x557: R5 = sub16Bit(R5,(R7+CONST()));break; // sub r5,r7,#*
case 0x558: R5 = sub16Bit(R5,(R8+CONST()));break; // sub r5,r8,#*
case 0x559: R5 = sub16Bit(R5,(R9+CONST()));break; // sub r5,r9,#*
case 0x55a: R5 = sub16Bit(R5,(R10+CONST()));break; // sub r5,r10,#*
case 0x55b: R5 = sub16Bit(R5,(R11+CONST()));break; // sub r5,r11,#*
case 0x55c: R5 = sub16Bit(R5,(R12+CONST()));break; // sub r5,r12,#*
case 0x55d: R5 = sub16Bit(R5,(R13+CONST()));break; // sub r5,r13,#*
case 0x55e: R5 = sub16Bit(R5,(R14+CONST()));break; // sub r5,r14,#*
case 0x55f: R5 = sub16Bit(R5,FETCH());break; // sub r5,#*
case 0x560: R6 = sub16Bit(R6,(R0+CONST()));break; // sub r6,r0,#*
case 0x561: R6 = sub16Bit(R6,(R1+CONST()));break; // sub r6,r1,#*
case 0x562: R6 = sub16Bit(R6,(R2+CONST()));break; // sub r6,r2,#*
case 0x563: R6 = sub16Bit(R6,(R3+CONST()));break; // sub r6,r3,#*
case 0x564: R6 = sub16Bit(R6,(R4+CONST()));break; // sub r6,r4,#*
case 0x565: R6 = sub16Bit(R6,(R5+CONST()));break; // sub r6,r5,#*
case 0x566: R6 = sub16Bit(R6,(R6+CONST()));break; // sub r6,r6,#*
case 0x567: R6 = sub16Bit(R6,(R7+CONST()));break; // sub r6,r7,#*
case 0x568: R6 = sub16Bit(R6,(R8+CONST()));break; // sub r6,r8,#*
case 0x569: R6 = sub16Bit(R6,(R9+CONST()));break; // sub r6,r9,#*
case 0x56a: R6 = sub16Bit(R6,(R10+CONST()));break; // sub r6,r10,#*
case 0x56b: R6 = sub16Bit(R6,(R11+CONST()));break; // sub r6,r11,#*
case 0x56c: R6 = sub16Bit(R6,(R12+CONST()));break; // sub r6,r12,#*
case 0x56d: R6 = sub16Bit(R6,(R13+CONST()));break; // sub r6,r13,#*
case 0x56e: R6 = sub16Bit(R6,(R14+CONST()));break; // sub r6,r14,#*
case 0x56f: R6 = sub16Bit(R6,FETCH());break; // sub r6,#*
case 0x570: R7 = sub16Bit(R7,(R0+CONST()));break; // sub r7,r0,#*
case 0x571: R7 = sub16Bit(R7,(R1+CONST()));break; // sub r7,r1,#*
case 0x572: R7 = sub16Bit(R7,(R2+CONST()));break; // sub r7,r2,#*
case 0x573: R7 = sub16Bit(R7,(R3+CONST()));break; // sub r7,r3,#*
case 0x574: R7 = sub16Bit(R7,(R4+CONST()));break; // sub r7,r4,#*
case 0x575: R7 = sub16Bit(R7,(R5+CONST()));break; // sub r7,r5,#*
case 0x576: R7 = sub16Bit(R7,(R6+CONST()));break; // sub r7,r6,#*
case 0x577: R7 = sub16Bit(R7,(R7+CONST()));break; // sub r7,r7,#*
case 0x578: R7 = sub16Bit(R7,(R8+CONST()));break; // sub r7,r8,#*
case 0x579: R7 = sub16Bit(R7,(R9+CONST()));break; // sub r7,r9,#*
case 0x57a: R7 = sub16Bit(R7,(R10+CONST()));break; // sub r7,r10,#*
case 0x57b: R7 = sub16Bit(R7,(R11+CONST()));break; // sub r7,r11,#*
case 0x57c: R7 = sub16Bit(R7,(R12+CONST()));break; // sub r7,r12,#*
case 0x57d: R7 = sub16Bit(R7,(R13+CONST()));break; // sub r7,r13,#*
case 0x57e: R7 = sub16Bit(R7,(R14+CONST()));break; // sub r7,r14,#*
case 0x57f: R7 = sub16Bit(R7,FETCH());break; // sub r7,#*
case 0x580: R8 = sub16Bit(R8,(R0+CONST()));break; // sub r8,r0,#*
case 0x581: R8 = sub16Bit(R8,(R1+CONST()));break; // sub r8,r1,#*
case 0x582: R8 = sub16Bit(R8,(R2+CONST()));break; // sub r8,r2,#*
case 0x583: R8 = sub16Bit(R8,(R3+CONST()));break; // sub r8,r3,#*
case 0x584: R8 = sub16Bit(R8,(R4+CONST()));break; // sub r8,r4,#*
case 0x585: R8 = sub16Bit(R8,(R5+CONST()));break; // sub r8,r5,#*
case 0x586: R8 = sub16Bit(R8,(R6+CONST()));break; // sub r8,r6,#*
case 0x587: R8 = sub16Bit(R8,(R7+CONST()));break; // sub r8,r7,#*
case 0x588: R8 = sub16Bit(R8,(R8+CONST()));break; // sub r8,r8,#*
case 0x589: R8 = sub16Bit(R8,(R9+CONST()));break; // sub r8,r9,#*
case 0x58a: R8 = sub16Bit(R8,(R10+CONST()));break; // sub r8,r10,#*
case 0x58b: R8 = sub16Bit(R8,(R11+CONST()));break; // sub r8,r11,#*
case 0x58c: R8 = sub16Bit(R8,(R12+CONST()));break; // sub r8,r12,#*
case 0x58d: R8 = sub16Bit(R8,(R13+CONST()));break; // sub r8,r13,#*
case 0x58e: R8 = sub16Bit(R8,(R14+CONST()));break; // sub r8,r14,#*
case 0x58f: R8 = sub16Bit(R8,FETCH());break; // sub r8,#*
case 0x590: R9 = sub16Bit(R9,(R0+CONST()));break; // sub r9,r0,#*
case 0x591: R9 = sub16Bit(R9,(R1+CONST()));break; // sub r9,r1,#*
case 0x592: R9 = sub16Bit(R9,(R2+CONST()));break; // sub r9,r2,#*
case 0x593: R9 = sub16Bit(R9,(R3+CONST()));break; // sub r9,r3,#*
case 0x594: R9 = sub16Bit(R9,(R4+CONST()));break; // sub r9,r4,#*
case 0x595: R9 = sub16Bit(R9,(R5+CONST()));break; // sub r9,r5,#*
case 0x596: R9 = sub16Bit(R9,(R6+CONST()));break; // sub r9,r6,#*
case 0x597: R9 = sub16Bit(R9,(R7+CONST()));break; // sub r9,r7,#*
case 0x598: R9 = sub16Bit(R9,(R8+CONST()));break; // sub r9,r8,#*
case 0x599: R9 = sub16Bit(R9,(R9+CONST()));break; // sub r9,r9,#*
case 0x59a: R9 = sub16Bit(R9,(R10+CONST()));break; // sub r9,r10,#*
case 0x59b: R9 = sub16Bit(R9,(R11+CONST()));break; // sub r9,r11,#*
case 0x59c: R9 = sub16Bit(R9,(R12+CONST()));break; // sub r9,r12,#*
case 0x59d: R9 = sub16Bit(R9,(R13+CONST()));break; // sub r9,r13,#*
case 0x59e: R9 = sub16Bit(R9,(R14+CONST()));break; // sub r9,r14,#*
case 0x59f: R9 = sub16Bit(R9,FETCH());break; // sub r9,#*
case 0x5a0: R10 = sub16Bit(R10,(R0+CONST()));break; // sub r10,r0,#*
case 0x5a1: R10 = sub16Bit(R10,(R1+CONST()));break; // sub r10,r1,#*
case 0x5a2: R10 = sub16Bit(R10,(R2+CONST()));break; // sub r10,r2,#*
case 0x5a3: R10 = sub16Bit(R10,(R3+CONST()));break; // sub r10,r3,#*
case 0x5a4: R10 = sub16Bit(R10,(R4+CONST()));break; // sub r10,r4,#*
case 0x5a5: R10 = sub16Bit(R10,(R5+CONST()));break; // sub r10,r5,#*
case 0x5a6: R10 = sub16Bit(R10,(R6+CONST()));break; // sub r10,r6,#*
case 0x5a7: R10 = sub16Bit(R10,(R7+CONST()));break; // sub r10,r7,#*
case 0x5a8: R10 = sub16Bit(R10,(R8+CONST()));break; // sub r10,r8,#*
case 0x5a9: R10 = sub16Bit(R10,(R9+CONST()));break; // sub r10,r9,#*
case 0x5aa: R10 = sub16Bit(R10,(R10+CONST()));break; // sub r10,r10,#*
case 0x5ab: R10 = sub16Bit(R10,(R11+CONST()));break; // sub r10,r11,#*
case 0x5ac: R10 = sub16Bit(R10,(R12+CONST()));break; // sub r10,r12,#*
case 0x5ad: R10 = sub16Bit(R10,(R13+CONST()));break; // sub r10,r13,#*
case 0x5ae: R10 = sub16Bit(R10,(R14+CONST()));break; // sub r10,r14,#*
case 0x5af: R10 = sub16Bit(R10,FETCH());break; // sub r10,#*
case 0x5b0: R11 = sub16Bit(R11,(R0+CONST()));break; // sub r11,r0,#*
case 0x5b1: R11 = sub16Bit(R11,(R1+CONST()));break; // sub r11,r1,#*
case 0x5b2: R11 = sub16Bit(R11,(R2+CONST()));break; // sub r11,r2,#*
case 0x5b3: R11 = sub16Bit(R11,(R3+CONST()));break; // sub r11,r3,#*
case 0x5b4: R11 = sub16Bit(R11,(R4+CONST()));break; // sub r11,r4,#*
case 0x5b5: R11 = sub16Bit(R11,(R5+CONST()));break; // sub r11,r5,#*
case 0x5b6: R11 = sub16Bit(R11,(R6+CONST()));break; // sub r11,r6,#*
case 0x5b7: R11 = sub16Bit(R11,(R7+CONST()));break; // sub r11,r7,#*
case 0x5b8: R11 = sub16Bit(R11,(R8+CONST()));break; // sub r11,r8,#*
case 0x5b9: R11 = sub16Bit(R11,(R9+CONST()));break; // sub r11,r9,#*
case 0x5ba: R11 = sub16Bit(R11,(R10+CONST()));break; // sub r11,r10,#*
case 0x5bb: R11 = sub16Bit(R11,(R11+CONST()));break; // sub r11,r11,#*
case 0x5bc: R11 = sub16Bit(R11,(R12+CONST()));break; // sub r11,r12,#*
case 0x5bd: R11 = sub16Bit(R11,(R13+CONST()));break; // sub r11,r13,#*
case 0x5be: R11 = sub16Bit(R11,(R14+CONST()));break; // sub r11,r14,#*
case 0x5bf: R11 = sub16Bit(R11,FETCH());break; // sub r11,#*
case 0x5c0: R12 = sub16Bit(R12,(R0+CONST()));break; // sub r12,r0,#*
case 0x5c1: R12 = sub16Bit(R12,(R1+CONST()));break; // sub r12,r1,#*
case 0x5c2: R12 = sub16Bit(R12,(R2+CONST()));break; // sub r12,r2,#*
case 0x5c3: R12 = sub16Bit(R12,(R3+CONST()));break; // sub r12,r3,#*
case 0x5c4: R12 = sub16Bit(R12,(R4+CONST()));break; // sub r12,r4,#*
case 0x5c5: R12 = sub16Bit(R12,(R5+CONST()));break; // sub r12,r5,#*
case 0x5c6: R12 = sub16Bit(R12,(R6+CONST()));break; // sub r12,r6,#*
case 0x5c7: R12 = sub16Bit(R12,(R7+CONST()));break; // sub r12,r7,#*
case 0x5c8: R12 = sub16Bit(R12,(R8+CONST()));break; // sub r12,r8,#*
case 0x5c9: R12 = sub16Bit(R12,(R9+CONST()));break; // sub r12,r9,#*
case 0x5ca: R12 = sub16Bit(R12,(R10+CONST()));break; // sub r12,r10,#*
case 0x5cb: R12 = sub16Bit(R12,(R11+CONST()));break; // sub r12,r11,#*
case 0x5cc: R12 = sub16Bit(R12,(R12+CONST()));break; // sub r12,r12,#*
case 0x5cd: R12 = sub16Bit(R12,(R13+CONST()));break; // sub r12,r13,#*
case 0x5ce: R12 = sub16Bit(R12,(R14+CONST()));break; // sub r12,r14,#*
case 0x5cf: R12 = sub16Bit(R12,FETCH());break; // sub r12,#*
case 0x5d0: R13 = sub16Bit(R13,(R0+CONST()));break; // sub r13,r0,#*
case 0x5d1: R13 = sub16Bit(R13,(R1+CONST()));break; // sub r13,r1,#*
case 0x5d2: R13 = sub16Bit(R13,(R2+CONST()));break; // sub r13,r2,#*
case 0x5d3: R13 = sub16Bit(R13,(R3+CONST()));break; // sub r13,r3,#*
case 0x5d4: R13 = sub16Bit(R13,(R4+CONST()));break; // sub r13,r4,#*
case 0x5d5: R13 = sub16Bit(R13,(R5+CONST()));break; // sub r13,r5,#*
case 0x5d6: R13 = sub16Bit(R13,(R6+CONST()));break; // sub r13,r6,#*
case 0x5d7: R13 = sub16Bit(R13,(R7+CONST()));break; // sub r13,r7,#*
case 0x5d8: R13 = sub16Bit(R13,(R8+CONST()));break; // sub r13,r8,#*
case 0x5d9: R13 = sub16Bit(R13,(R9+CONST()));break; // sub r13,r9,#*
case 0x5da: R13 = sub16Bit(R13,(R10+CONST()));break; // sub r13,r10,#*
case 0x5db: R13 = sub16Bit(R13,(R11+CONST()));break; // sub r13,r11,#*
case 0x5dc: R13 = sub16Bit(R13,(R12+CONST()));break; // sub r13,r12,#*
case 0x5dd: R13 = sub16Bit(R13,(R13+CONST()));break; // sub r13,r13,#*
case 0x5de: R13 = sub16Bit(R13,(R14+CONST()));break; // sub r13,r14,#*
case 0x5df: R13 = sub16Bit(R13,FETCH());break; // sub r13,#*
case 0x5e0: R14 = sub16Bit(R14,(R0+CONST()));break; // sub r14,r0,#*
case 0x5e1: R14 = sub16Bit(R14,(R1+CONST()));break; // sub r14,r1,#*
case 0x5e2: R14 = sub16Bit(R14,(R2+CONST()));break; // sub r14,r2,#*
case 0x5e3: R14 = sub16Bit(R14,(R3+CONST()));break; // sub r14,r3,#*
case 0x5e4: R14 = sub16Bit(R14,(R4+CONST()));break; // sub r14,r4,#*
case 0x5e5: R14 = sub16Bit(R14,(R5+CONST()));break; // sub r14,r5,#*
case 0x5e6: R14 = sub16Bit(R14,(R6+CONST()));break; // sub r14,r6,#*
case 0x5e7: R14 = sub16Bit(R14,(R7+CONST()));break; // sub r14,r7,#*
case 0x5e8: R14 = sub16Bit(R14,(R8+CONST()));break; // sub r14,r8,#*
case 0x5e9: R14 = sub16Bit(R14,(R9+CONST()));break; // sub r14,r9,#*
case 0x5ea: R14 = sub16Bit(R14,(R10+CONST()));break; // sub r14,r10,#*
case 0x5eb: R14 = sub16Bit(R14,(R11+CONST()));break; // sub r14,r11,#*
case 0x5ec: R14 = sub16Bit(R14,(R12+CONST()));break; // sub r14,r12,#*
case 0x5ed: R14 = sub16Bit(R14,(R13+CONST()));break; // sub r14,r13,#*
case 0x5ee: R14 = sub16Bit(R14,(R14+CONST()));break; // sub r14,r14,#*
case 0x5ef: R14 = sub16Bit(R14,FETCH());break; // sub r14,#*
case 0x5f0: R15 = sub16Bit(R15,(R0+CONST()));break; // sub r15,r0,#*
case 0x5f1: R15 = sub16Bit(R15,(R1+CONST()));break; // sub r15,r1,#*
case 0x5f2: R15 = sub16Bit(R15,(R2+CONST()));break; // sub r15,r2,#*
case 0x5f3: R15 = sub16Bit(R15,(R3+CONST()));break; // sub r15,r3,#*
case 0x5f4: R15 = sub16Bit(R15,(R4+CONST()));break; // sub r15,r4,#*
case 0x5f5: R15 = sub16Bit(R15,(R5+CONST()));break; // sub r15,r5,#*
case 0x5f6: R15 = sub16Bit(R15,(R6+CONST()));break; // sub r15,r6,#*
case 0x5f7: R15 = sub16Bit(R15,(R7+CONST()));break; // sub r15,r7,#*
case 0x5f8: R15 = sub16Bit(R15,(R8+CONST()));break; // sub r15,r8,#*
case 0x5f9: R15 = sub16Bit(R15,(R9+CONST()));break; // sub r15,r9,#*
case 0x5fa: R15 = sub16Bit(R15,(R10+CONST()));break; // sub r15,r10,#*
case 0x5fb: R15 = sub16Bit(R15,(R11+CONST()));break; // sub r15,r11,#*
case 0x5fc: R15 = sub16Bit(R15,(R12+CONST()));break; // sub r15,r12,#*
case 0x5fd: R15 = sub16Bit(R15,(R13+CONST()));break; // sub r15,r13,#*
case 0x5fe: R15 = sub16Bit(R15,(R14+CONST()));break; // sub r15,r14,#*
case 0x5ff: R15 = sub16Bit(R15,FETCH());break; // sub r15,#*
case 0x600: R0 &= (R0+CONST());break; // and r0,r0,#*
case 0x601: R0 &= (R1+CONST());break; // and r0,r1,#*
case 0x602: R0 &= (R2+CONST());break; // and r0,r2,#*
case 0x603: R0 &= (R3+CONST());break; // and r0,r3,#*
case 0x604: R0 &= (R4+CONST());break; // and r0,r4,#*
case 0x605: R0 &= (R5+CONST());break; // and r0,r5,#*
case 0x606: R0 &= (R6+CONST());break; // and r0,r6,#*
case 0x607: R0 &= (R7+CONST());break; // and r0,r7,#*
case 0x608: R0 &= (R8+CONST());break; // and r0,r8,#*
case 0x609: R0 &= (R9+CONST());break; // and r0,r9,#*
case 0x60a: R0 &= (R10+CONST());break; // and r0,r10,#*
case 0x60b: R0 &= (R11+CONST());break; // and r0,r11,#*
case 0x60c: R0 &= (R12+CONST());break; // and r0,r12,#*
case 0x60d: R0 &= (R13+CONST());break; // and r0,r13,#*
case 0x60e: R0 &= (R14+CONST());break; // and r0,r14,#*
case 0x60f: R0 &= FETCH();break; // and r0,#*
case 0x610: R1 &= (R0+CONST());break; // and r1,r0,#*
case 0x611: R1 &= (R1+CONST());break; // and r1,r1,#*
case 0x612: R1 &= (R2+CONST());break; // and r1,r2,#*
case 0x613: R1 &= (R3+CONST());break; // and r1,r3,#*
case 0x614: R1 &= (R4+CONST());break; // and r1,r4,#*
case 0x615: R1 &= (R5+CONST());break; // and r1,r5,#*
case 0x616: R1 &= (R6+CONST());break; // and r1,r6,#*
case 0x617: R1 &= (R7+CONST());break; // and r1,r7,#*
case 0x618: R1 &= (R8+CONST());break; // and r1,r8,#*
case 0x619: R1 &= (R9+CONST());break; // and r1,r9,#*
case 0x61a: R1 &= (R10+CONST());break; // and r1,r10,#*
case 0x61b: R1 &= (R11+CONST());break; // and r1,r11,#*
case 0x61c: R1 &= (R12+CONST());break; // and r1,r12,#*
case 0x61d: R1 &= (R13+CONST());break; // and r1,r13,#*
case 0x61e: R1 &= (R14+CONST());break; // and r1,r14,#*
case 0x61f: R1 &= FETCH();break; // and r1,#*
case 0x620: R2 &= (R0+CONST());break; // and r2,r0,#*
case 0x621: R2 &= (R1+CONST());break; // and r2,r1,#*
case 0x622: R2 &= (R2+CONST());break; // and r2,r2,#*
case 0x623: R2 &= (R3+CONST());break; // and r2,r3,#*
case 0x624: R2 &= (R4+CONST());break; // and r2,r4,#*
case 0x625: R2 &= (R5+CONST());break; // and r2,r5,#*
case 0x626: R2 &= (R6+CONST());break; // and r2,r6,#*
case 0x627: R2 &= (R7+CONST());break; // and r2,r7,#*
case 0x628: R2 &= (R8+CONST());break; // and r2,r8,#*
case 0x629: R2 &= (R9+CONST());break; // and r2,r9,#*
case 0x62a: R2 &= (R10+CONST());break; // and r2,r10,#*
case 0x62b: R2 &= (R11+CONST());break; // and r2,r11,#*
case 0x62c: R2 &= (R12+CONST());break; // and r2,r12,#*
case 0x62d: R2 &= (R13+CONST());break; // and r2,r13,#*
case 0x62e: R2 &= (R14+CONST());break; // and r2,r14,#*
case 0x62f: R2 &= FETCH();break; // and r2,#*
case 0x630: R3 &= (R0+CONST());break; // and r3,r0,#*
case 0x631: R3 &= (R1+CONST());break; // and r3,r1,#*
case 0x632: R3 &= (R2+CONST());break; // and r3,r2,#*
case 0x633: R3 &= (R3+CONST());break; // and r3,r3,#*
case 0x634: R3 &= (R4+CONST());break; // and r3,r4,#*
case 0x635: R3 &= (R5+CONST());break; // and r3,r5,#*
case 0x636: R3 &= (R6+CONST());break; // and r3,r6,#*
case 0x637: R3 &= (R7+CONST());break; // and r3,r7,#*
case 0x638: R3 &= (R8+CONST());break; // and r3,r8,#*
case 0x639: R3 &= (R9+CONST());break; // and r3,r9,#*
case 0x63a: R3 &= (R10+CONST());break; // and r3,r10,#*
case 0x63b: R3 &= (R11+CONST());break; // and r3,r11,#*
case 0x63c: R3 &= (R12+CONST());break; // and r3,r12,#*
case 0x63d: R3 &= (R13+CONST());break; // and r3,r13,#*
case 0x63e: R3 &= (R14+CONST());break; // and r3,r14,#*
case 0x63f: R3 &= FETCH();break; // and r3,#*
case 0x640: R4 &= (R0+CONST());break; // and r4,r0,#*
case 0x641: R4 &= (R1+CONST());break; // and r4,r1,#*
case 0x642: R4 &= (R2+CONST());break; // and r4,r2,#*
case 0x643: R4 &= (R3+CONST());break; // and r4,r3,#*
case 0x644: R4 &= (R4+CONST());break; // and r4,r4,#*
case 0x645: R4 &= (R5+CONST());break; // and r4,r5,#*
case 0x646: R4 &= (R6+CONST());break; // and r4,r6,#*
case 0x647: R4 &= (R7+CONST());break; // and r4,r7,#*
case 0x648: R4 &= (R8+CONST());break; // and r4,r8,#*
case 0x649: R4 &= (R9+CONST());break; // and r4,r9,#*
case 0x64a: R4 &= (R10+CONST());break; // and r4,r10,#*
case 0x64b: R4 &= (R11+CONST());break; // and r4,r11,#*
case 0x64c: R4 &= (R12+CONST());break; // and r4,r12,#*
case 0x64d: R4 &= (R13+CONST());break; // and r4,r13,#*
case 0x64e: R4 &= (R14+CONST());break; // and r4,r14,#*
case 0x64f: R4 &= FETCH();break; // and r4,#*
case 0x650: R5 &= (R0+CONST());break; // and r5,r0,#*
case 0x651: R5 &= (R1+CONST());break; // and r5,r1,#*
case 0x652: R5 &= (R2+CONST());break; // and r5,r2,#*
case 0x653: R5 &= (R3+CONST());break; // and r5,r3,#*
case 0x654: R5 &= (R4+CONST());break; // and r5,r4,#*
case 0x655: R5 &= (R5+CONST());break; // and r5,r5,#*
case 0x656: R5 &= (R6+CONST());break; // and r5,r6,#*
case 0x657: R5 &= (R7+CONST());break; // and r5,r7,#*
case 0x658: R5 &= (R8+CONST());break; // and r5,r8,#*
case 0x659: R5 &= (R9+CONST());break; // and r5,r9,#*
case 0x65a: R5 &= (R10+CONST());break; // and r5,r10,#*
case 0x65b: R5 &= (R11+CONST());break; // and r5,r11,#*
case 0x65c: R5 &= (R12+CONST());break; // and r5,r12,#*
case 0x65d: R5 &= (R13+CONST());break; // and r5,r13,#*
case 0x65e: R5 &= (R14+CONST());break; // and r5,r14,#*
case 0x65f: R5 &= FETCH();break; // and r5,#*
case 0x660: R6 &= (R0+CONST());break; // and r6,r0,#*
case 0x661: R6 &= (R1+CONST());break; // and r6,r1,#*
case 0x662: R6 &= (R2+CONST());break; // and r6,r2,#*
case 0x663: R6 &= (R3+CONST());break; // and r6,r3,#*
case 0x664: R6 &= (R4+CONST());break; // and r6,r4,#*
case 0x665: R6 &= (R5+CONST());break; // and r6,r5,#*
case 0x666: R6 &= (R6+CONST());break; // and r6,r6,#*
case 0x667: R6 &= (R7+CONST());break; // and r6,r7,#*
case 0x668: R6 &= (R8+CONST());break; // and r6,r8,#*
case 0x669: R6 &= (R9+CONST());break; // and r6,r9,#*
case 0x66a: R6 &= (R10+CONST());break; // and r6,r10,#*
case 0x66b: R6 &= (R11+CONST());break; // and r6,r11,#*
case 0x66c: R6 &= (R12+CONST());break; // and r6,r12,#*
case 0x66d: R6 &= (R13+CONST());break; // and r6,r13,#*
case 0x66e: R6 &= (R14+CONST());break; // and r6,r14,#*
case 0x66f: R6 &= FETCH();break; // and r6,#*
case 0x670: R7 &= (R0+CONST());break; // and r7,r0,#*
case 0x671: R7 &= (R1+CONST());break; // and r7,r1,#*
case 0x672: R7 &= (R2+CONST());break; // and r7,r2,#*
case 0x673: R7 &= (R3+CONST());break; // and r7,r3,#*
case 0x674: R7 &= (R4+CONST());break; // and r7,r4,#*
case 0x675: R7 &= (R5+CONST());break; // and r7,r5,#*
case 0x676: R7 &= (R6+CONST());break; // and r7,r6,#*
case 0x677: R7 &= (R7+CONST());break; // and r7,r7,#*
case 0x678: R7 &= (R8+CONST());break; // and r7,r8,#*
case 0x679: R7 &= (R9+CONST());break; // and r7,r9,#*
case 0x67a: R7 &= (R10+CONST());break; // and r7,r10,#*
case 0x67b: R7 &= (R11+CONST());break; // and r7,r11,#*
case 0x67c: R7 &= (R12+CONST());break; // and r7,r12,#*
case 0x67d: R7 &= (R13+CONST());break; // and r7,r13,#*
case 0x67e: R7 &= (R14+CONST());break; // and r7,r14,#*
case 0x67f: R7 &= FETCH();break; // and r7,#*
case 0x680: R8 &= (R0+CONST());break; // and r8,r0,#*
case 0x681: R8 &= (R1+CONST());break; // and r8,r1,#*
case 0x682: R8 &= (R2+CONST());break; // and r8,r2,#*
case 0x683: R8 &= (R3+CONST());break; // and r8,r3,#*
case 0x684: R8 &= (R4+CONST());break; // and r8,r4,#*
case 0x685: R8 &= (R5+CONST());break; // and r8,r5,#*
case 0x686: R8 &= (R6+CONST());break; // and r8,r6,#*
case 0x687: R8 &= (R7+CONST());break; // and r8,r7,#*
case 0x688: R8 &= (R8+CONST());break; // and r8,r8,#*
case 0x689: R8 &= (R9+CONST());break; // and r8,r9,#*
case 0x68a: R8 &= (R10+CONST());break; // and r8,r10,#*
case 0x68b: R8 &= (R11+CONST());break; // and r8,r11,#*
case 0x68c: R8 &= (R12+CONST());break; // and r8,r12,#*
case 0x68d: R8 &= (R13+CONST());break; // and r8,r13,#*
case 0x68e: R8 &= (R14+CONST());break; // and r8,r14,#*
case 0x68f: R8 &= FETCH();break; // and r8,#*
case 0x690: R9 &= (R0+CONST());break; // and r9,r0,#*
case 0x691: R9 &= (R1+CONST());break; // and r9,r1,#*
case 0x692: R9 &= (R2+CONST());break; // and r9,r2,#*
case 0x693: R9 &= (R3+CONST());break; // and r9,r3,#*
case 0x694: R9 &= (R4+CONST());break; // and r9,r4,#*
case 0x695: R9 &= (R5+CONST());break; // and r9,r5,#*
case 0x696: R9 &= (R6+CONST());break; // and r9,r6,#*
case 0x697: R9 &= (R7+CONST());break; // and r9,r7,#*
case 0x698: R9 &= (R8+CONST());break; // and r9,r8,#*
case 0x699: R9 &= (R9+CONST());break; // and r9,r9,#*
case 0x69a: R9 &= (R10+CONST());break; // and r9,r10,#*
case 0x69b: R9 &= (R11+CONST());break; // and r9,r11,#*
case 0x69c: R9 &= (R12+CONST());break; // and r9,r12,#*
case 0x69d: R9 &= (R13+CONST());break; // and r9,r13,#*
case 0x69e: R9 &= (R14+CONST());break; // and r9,r14,#*
case 0x69f: R9 &= FETCH();break; // and r9,#*
case 0x6a0: R10 &= (R0+CONST());break; // and r10,r0,#*
case 0x6a1: R10 &= (R1+CONST());break; // and r10,r1,#*
case 0x6a2: R10 &= (R2+CONST());break; // and r10,r2,#*
case 0x6a3: R10 &= (R3+CONST());break; // and r10,r3,#*
case 0x6a4: R10 &= (R4+CONST());break; // and r10,r4,#*
case 0x6a5: R10 &= (R5+CONST());break; // and r10,r5,#*
case 0x6a6: R10 &= (R6+CONST());break; // and r10,r6,#*
case 0x6a7: R10 &= (R7+CONST());break; // and r10,r7,#*
case 0x6a8: R10 &= (R8+CONST());break; // and r10,r8,#*
case 0x6a9: R10 &= (R9+CONST());break; // and r10,r9,#*
case 0x6aa: R10 &= (R10+CONST());break; // and r10,r10,#*
case 0x6ab: R10 &= (R11+CONST());break; // and r10,r11,#*
case 0x6ac: R10 &= (R12+CONST());break; // and r10,r12,#*
case 0x6ad: R10 &= (R13+CONST());break; // and r10,r13,#*
case 0x6ae: R10 &= (R14+CONST());break; // and r10,r14,#*
case 0x6af: R10 &= FETCH();break; // and r10,#*
case 0x6b0: R11 &= (R0+CONST());break; // and r11,r0,#*
case 0x6b1: R11 &= (R1+CONST());break; // and r11,r1,#*
case 0x6b2: R11 &= (R2+CONST());break; // and r11,r2,#*
case 0x6b3: R11 &= (R3+CONST());break; // and r11,r3,#*
case 0x6b4: R11 &= (R4+CONST());break; // and r11,r4,#*
case 0x6b5: R11 &= (R5+CONST());break; // and r11,r5,#*
case 0x6b6: R11 &= (R6+CONST());break; // and r11,r6,#*
case 0x6b7: R11 &= (R7+CONST());break; // and r11,r7,#*
case 0x6b8: R11 &= (R8+CONST());break; // and r11,r8,#*
case 0x6b9: R11 &= (R9+CONST());break; // and r11,r9,#*
case 0x6ba: R11 &= (R10+CONST());break; // and r11,r10,#*
case 0x6bb: R11 &= (R11+CONST());break; // and r11,r11,#*
case 0x6bc: R11 &= (R12+CONST());break; // and r11,r12,#*
case 0x6bd: R11 &= (R13+CONST());break; // and r11,r13,#*
case 0x6be: R11 &= (R14+CONST());break; // and r11,r14,#*
case 0x6bf: R11 &= FETCH();break; // and r11,#*
case 0x6c0: R12 &= (R0+CONST());break; // and r12,r0,#*
case 0x6c1: R12 &= (R1+CONST());break; // and r12,r1,#*
case 0x6c2: R12 &= (R2+CONST());break; // and r12,r2,#*
case 0x6c3: R12 &= (R3+CONST());break; // and r12,r3,#*
case 0x6c4: R12 &= (R4+CONST());break; // and r12,r4,#*
case 0x6c5: R12 &= (R5+CONST());break; // and r12,r5,#*
case 0x6c6: R12 &= (R6+CONST());break; // and r12,r6,#*
case 0x6c7: R12 &= (R7+CONST());break; // and r12,r7,#*
case 0x6c8: R12 &= (R8+CONST());break; // and r12,r8,#*
case 0x6c9: R12 &= (R9+CONST());break; // and r12,r9,#*
case 0x6ca: R12 &= (R10+CONST());break; // and r12,r10,#*
case 0x6cb: R12 &= (R11+CONST());break; // and r12,r11,#*
case 0x6cc: R12 &= (R12+CONST());break; // and r12,r12,#*
case 0x6cd: R12 &= (R13+CONST());break; // and r12,r13,#*
case 0x6ce: R12 &= (R14+CONST());break; // and r12,r14,#*
case 0x6cf: R12 &= FETCH();break; // and r12,#*
case 0x6d0: R13 &= (R0+CONST());break; // and r13,r0,#*
case 0x6d1: R13 &= (R1+CONST());break; // and r13,r1,#*
case 0x6d2: R13 &= (R2+CONST());break; // and r13,r2,#*
case 0x6d3: R13 &= (R3+CONST());break; // and r13,r3,#*
case 0x6d4: R13 &= (R4+CONST());break; // and r13,r4,#*
case 0x6d5: R13 &= (R5+CONST());break; // and r13,r5,#*
case 0x6d6: R13 &= (R6+CONST());break; // and r13,r6,#*
case 0x6d7: R13 &= (R7+CONST());break; // and r13,r7,#*
case 0x6d8: R13 &= (R8+CONST());break; // and r13,r8,#*
case 0x6d9: R13 &= (R9+CONST());break; // and r13,r9,#*
case 0x6da: R13 &= (R10+CONST());break; // and r13,r10,#*
case 0x6db: R13 &= (R11+CONST());break; // and r13,r11,#*
case 0x6dc: R13 &= (R12+CONST());break; // and r13,r12,#*
case 0x6dd: R13 &= (R13+CONST());break; // and r13,r13,#*
case 0x6de: R13 &= (R14+CONST());break; // and r13,r14,#*
case 0x6df: R13 &= FETCH();break; // and r13,#*
case 0x6e0: R14 &= (R0+CONST());break; // and r14,r0,#*
case 0x6e1: R14 &= (R1+CONST());break; // and r14,r1,#*
case 0x6e2: R14 &= (R2+CONST());break; // and r14,r2,#*
case 0x6e3: R14 &= (R3+CONST());break; // and r14,r3,#*
case 0x6e4: R14 &= (R4+CONST());break; // and r14,r4,#*
case 0x6e5: R14 &= (R5+CONST());break; // and r14,r5,#*
case 0x6e6: R14 &= (R6+CONST());break; // and r14,r6,#*
case 0x6e7: R14 &= (R7+CONST());break; // and r14,r7,#*
case 0x6e8: R14 &= (R8+CONST());break; // and r14,r8,#*
case 0x6e9: R14 &= (R9+CONST());break; // and r14,r9,#*
case 0x6ea: R14 &= (R10+CONST());break; // and r14,r10,#*
case 0x6eb: R14 &= (R11+CONST());break; // and r14,r11,#*
case 0x6ec: R14 &= (R12+CONST());break; // and r14,r12,#*
case 0x6ed: R14 &= (R13+CONST());break; // and r14,r13,#*
case 0x6ee: R14 &= (R14+CONST());break; // and r14,r14,#*
case 0x6ef: R14 &= FETCH();break; // and r14,#*
case 0x6f0: R15 &= (R0+CONST());break; // and r15,r0,#*
case 0x6f1: R15 &= (R1+CONST());break; // and r15,r1,#*
case 0x6f2: R15 &= (R2+CONST());break; // and r15,r2,#*
case 0x6f3: R15 &= (R3+CONST());break; // and r15,r3,#*
case 0x6f4: R15 &= (R4+CONST());break; // and r15,r4,#*
case 0x6f5: R15 &= (R5+CONST());break; // and r15,r5,#*
case 0x6f6: R15 &= (R6+CONST());break; // and r15,r6,#*
case 0x6f7: R15 &= (R7+CONST());break; // and r15,r7,#*
case 0x6f8: R15 &= (R8+CONST());break; // and r15,r8,#*
case 0x6f9: R15 &= (R9+CONST());break; // and r15,r9,#*
case 0x6fa: R15 &= (R10+CONST());break; // and r15,r10,#*
case 0x6fb: R15 &= (R11+CONST());break; // and r15,r11,#*
case 0x6fc: R15 &= (R12+CONST());break; // and r15,r12,#*
case 0x6fd: R15 &= (R13+CONST());break; // and r15,r13,#*
case 0x6fe: R15 &= (R14+CONST());break; // and r15,r14,#*
case 0x6ff: R15 &= FETCH();break; // and r15,#*
case 0x700: R0 ^= (R0+CONST());break; // xor r0,r0,#*
case 0x701: R0 ^= (R1+CONST());break; // xor r0,r1,#*
case 0x702: R0 ^= (R2+CONST());break; // xor r0,r2,#*
case 0x703: R0 ^= (R3+CONST());break; // xor r0,r3,#*
case 0x704: R0 ^= (R4+CONST());break; // xor r0,r4,#*
case 0x705: R0 ^= (R5+CONST());break; // xor r0,r5,#*
case 0x706: R0 ^= (R6+CONST());break; // xor r0,r6,#*
case 0x707: R0 ^= (R7+CONST());break; // xor r0,r7,#*
case 0x708: R0 ^= (R8+CONST());break; // xor r0,r8,#*
case 0x709: R0 ^= (R9+CONST());break; // xor r0,r9,#*
case 0x70a: R0 ^= (R10+CONST());break; // xor r0,r10,#*
case 0x70b: R0 ^= (R11+CONST());break; // xor r0,r11,#*
case 0x70c: R0 ^= (R12+CONST());break; // xor r0,r12,#*
case 0x70d: R0 ^= (R13+CONST());break; // xor r0,r13,#*
case 0x70e: R0 ^= (R14+CONST());break; // xor r0,r14,#*
case 0x70f: R0 ^= FETCH();break; // xor r0,#*
case 0x710: R1 ^= (R0+CONST());break; // xor r1,r0,#*
case 0x711: R1 ^= (R1+CONST());break; // xor r1,r1,#*
case 0x712: R1 ^= (R2+CONST());break; // xor r1,r2,#*
case 0x713: R1 ^= (R3+CONST());break; // xor r1,r3,#*
case 0x714: R1 ^= (R4+CONST());break; // xor r1,r4,#*
case 0x715: R1 ^= (R5+CONST());break; // xor r1,r5,#*
case 0x716: R1 ^= (R6+CONST());break; // xor r1,r6,#*
case 0x717: R1 ^= (R7+CONST());break; // xor r1,r7,#*
case 0x718: R1 ^= (R8+CONST());break; // xor r1,r8,#*
case 0x719: R1 ^= (R9+CONST());break; // xor r1,r9,#*
case 0x71a: R1 ^= (R10+CONST());break; // xor r1,r10,#*
case 0x71b: R1 ^= (R11+CONST());break; // xor r1,r11,#*
case 0x71c: R1 ^= (R12+CONST());break; // xor r1,r12,#*
case 0x71d: R1 ^= (R13+CONST());break; // xor r1,r13,#*
case 0x71e: R1 ^= (R14+CONST());break; // xor r1,r14,#*
case 0x71f: R1 ^= FETCH();break; // xor r1,#*
case 0x720: R2 ^= (R0+CONST());break; // xor r2,r0,#*
case 0x721: R2 ^= (R1+CONST());break; // xor r2,r1,#*
case 0x722: R2 ^= (R2+CONST());break; // xor r2,r2,#*
case 0x723: R2 ^= (R3+CONST());break; // xor r2,r3,#*
case 0x724: R2 ^= (R4+CONST());break; // xor r2,r4,#*
case 0x725: R2 ^= (R5+CONST());break; // xor r2,r5,#*
case 0x726: R2 ^= (R6+CONST());break; // xor r2,r6,#*
case 0x727: R2 ^= (R7+CONST());break; // xor r2,r7,#*
case 0x728: R2 ^= (R8+CONST());break; // xor r2,r8,#*
case 0x729: R2 ^= (R9+CONST());break; // xor r2,r9,#*
case 0x72a: R2 ^= (R10+CONST());break; // xor r2,r10,#*
case 0x72b: R2 ^= (R11+CONST());break; // xor r2,r11,#*
case 0x72c: R2 ^= (R12+CONST());break; // xor r2,r12,#*
case 0x72d: R2 ^= (R13+CONST());break; // xor r2,r13,#*
case 0x72e: R2 ^= (R14+CONST());break; // xor r2,r14,#*
case 0x72f: R2 ^= FETCH();break; // xor r2,#*
case 0x730: R3 ^= (R0+CONST());break; // xor r3,r0,#*
case 0x731: R3 ^= (R1+CONST());break; // xor r3,r1,#*
case 0x732: R3 ^= (R2+CONST());break; // xor r3,r2,#*
case 0x733: R3 ^= (R3+CONST());break; // xor r3,r3,#*
case 0x734: R3 ^= (R4+CONST());break; // xor r3,r4,#*
case 0x735: R3 ^= (R5+CONST());break; // xor r3,r5,#*
case 0x736: R3 ^= (R6+CONST());break; // xor r3,r6,#*
case 0x737: R3 ^= (R7+CONST());break; // xor r3,r7,#*
case 0x738: R3 ^= (R8+CONST());break; // xor r3,r8,#*
case 0x739: R3 ^= (R9+CONST());break; // xor r3,r9,#*
case 0x73a: R3 ^= (R10+CONST());break; // xor r3,r10,#*
case 0x73b: R3 ^= (R11+CONST());break; // xor r3,r11,#*
case 0x73c: R3 ^= (R12+CONST());break; // xor r3,r12,#*
case 0x73d: R3 ^= (R13+CONST());break; // xor r3,r13,#*
case 0x73e: R3 ^= (R14+CONST());break; // xor r3,r14,#*
case 0x73f: R3 ^= FETCH();break; // xor r3,#*
case 0x740: R4 ^= (R0+CONST());break; // xor r4,r0,#*
case 0x741: R4 ^= (R1+CONST());break; // xor r4,r1,#*
case 0x742: R4 ^= (R2+CONST());break; // xor r4,r2,#*
case 0x743: R4 ^= (R3+CONST());break; // xor r4,r3,#*
case 0x744: R4 ^= (R4+CONST());break; // xor r4,r4,#*
case 0x745: R4 ^= (R5+CONST());break; // xor r4,r5,#*
case 0x746: R4 ^= (R6+CONST());break; // xor r4,r6,#*
case 0x747: R4 ^= (R7+CONST());break; // xor r4,r7,#*
case 0x748: R4 ^= (R8+CONST());break; // xor r4,r8,#*
case 0x749: R4 ^= (R9+CONST());break; // xor r4,r9,#*
case 0x74a: R4 ^= (R10+CONST());break; // xor r4,r10,#*
case 0x74b: R4 ^= (R11+CONST());break; // xor r4,r11,#*
case 0x74c: R4 ^= (R12+CONST());break; // xor r4,r12,#*
case 0x74d: R4 ^= (R13+CONST());break; // xor r4,r13,#*
case 0x74e: R4 ^= (R14+CONST());break; // xor r4,r14,#*
case 0x74f: R4 ^= FETCH();break; // xor r4,#*
case 0x750: R5 ^= (R0+CONST());break; // xor r5,r0,#*
case 0x751: R5 ^= (R1+CONST());break; // xor r5,r1,#*
case 0x752: R5 ^= (R2+CONST());break; // xor r5,r2,#*
case 0x753: R5 ^= (R3+CONST());break; // xor r5,r3,#*
case 0x754: R5 ^= (R4+CONST());break; // xor r5,r4,#*
case 0x755: R5 ^= (R5+CONST());break; // xor r5,r5,#*
case 0x756: R5 ^= (R6+CONST());break; // xor r5,r6,#*
case 0x757: R5 ^= (R7+CONST());break; // xor r5,r7,#*
case 0x758: R5 ^= (R8+CONST());break; // xor r5,r8,#*
case 0x759: R5 ^= (R9+CONST());break; // xor r5,r9,#*
case 0x75a: R5 ^= (R10+CONST());break; // xor r5,r10,#*
case 0x75b: R5 ^= (R11+CONST());break; // xor r5,r11,#*
case 0x75c: R5 ^= (R12+CONST());break; // xor r5,r12,#*
case 0x75d: R5 ^= (R13+CONST());break; // xor r5,r13,#*
case 0x75e: R5 ^= (R14+CONST());break; // xor r5,r14,#*
case 0x75f: R5 ^= FETCH();break; // xor r5,#*
case 0x760: R6 ^= (R0+CONST());break; // xor r6,r0,#*
case 0x761: R6 ^= (R1+CONST());break; // xor r6,r1,#*
case 0x762: R6 ^= (R2+CONST());break; // xor r6,r2,#*
case 0x763: R6 ^= (R3+CONST());break; // xor r6,r3,#*
case 0x764: R6 ^= (R4+CONST());break; // xor r6,r4,#*
case 0x765: R6 ^= (R5+CONST());break; // xor r6,r5,#*
case 0x766: R6 ^= (R6+CONST());break; // xor r6,r6,#*
case 0x767: R6 ^= (R7+CONST());break; // xor r6,r7,#*
case 0x768: R6 ^= (R8+CONST());break; // xor r6,r8,#*
case 0x769: R6 ^= (R9+CONST());break; // xor r6,r9,#*
case 0x76a: R6 ^= (R10+CONST());break; // xor r6,r10,#*
case 0x76b: R6 ^= (R11+CONST());break; // xor r6,r11,#*
case 0x76c: R6 ^= (R12+CONST());break; // xor r6,r12,#*
case 0x76d: R6 ^= (R13+CONST());break; // xor r6,r13,#*
case 0x76e: R6 ^= (R14+CONST());break; // xor r6,r14,#*
case 0x76f: R6 ^= FETCH();break; // xor r6,#*
case 0x770: R7 ^= (R0+CONST());break; // xor r7,r0,#*
case 0x771: R7 ^= (R1+CONST());break; // xor r7,r1,#*
case 0x772: R7 ^= (R2+CONST());break; // xor r7,r2,#*
case 0x773: R7 ^= (R3+CONST());break; // xor r7,r3,#*
case 0x774: R7 ^= (R4+CONST());break; // xor r7,r4,#*
case 0x775: R7 ^= (R5+CONST());break; // xor r7,r5,#*
case 0x776: R7 ^= (R6+CONST());break; // xor r7,r6,#*
case 0x777: R7 ^= (R7+CONST());break; // xor r7,r7,#*
case 0x778: R7 ^= (R8+CONST());break; // xor r7,r8,#*
case 0x779: R7 ^= (R9+CONST());break; // xor r7,r9,#*
case 0x77a: R7 ^= (R10+CONST());break; // xor r7,r10,#*
case 0x77b: R7 ^= (R11+CONST());break; // xor r7,r11,#*
case 0x77c: R7 ^= (R12+CONST());break; // xor r7,r12,#*
case 0x77d: R7 ^= (R13+CONST());break; // xor r7,r13,#*
case 0x77e: R7 ^= (R14+CONST());break; // xor r7,r14,#*
case 0x77f: R7 ^= FETCH();break; // xor r7,#*
case 0x780: R8 ^= (R0+CONST());break; // xor r8,r0,#*
case 0x781: R8 ^= (R1+CONST());break; // xor r8,r1,#*
case 0x782: R8 ^= (R2+CONST());break; // xor r8,r2,#*
case 0x783: R8 ^= (R3+CONST());break; // xor r8,r3,#*
case 0x784: R8 ^= (R4+CONST());break; // xor r8,r4,#*
case 0x785: R8 ^= (R5+CONST());break; // xor r8,r5,#*
case 0x786: R8 ^= (R6+CONST());break; // xor r8,r6,#*
case 0x787: R8 ^= (R7+CONST());break; // xor r8,r7,#*
case 0x788: R8 ^= (R8+CONST());break; // xor r8,r8,#*
case 0x789: R8 ^= (R9+CONST());break; // xor r8,r9,#*
case 0x78a: R8 ^= (R10+CONST());break; // xor r8,r10,#*
case 0x78b: R8 ^= (R11+CONST());break; // xor r8,r11,#*
case 0x78c: R8 ^= (R12+CONST());break; // xor r8,r12,#*
case 0x78d: R8 ^= (R13+CONST());break; // xor r8,r13,#*
case 0x78e: R8 ^= (R14+CONST());break; // xor r8,r14,#*
case 0x78f: R8 ^= FETCH();break; // xor r8,#*
case 0x790: R9 ^= (R0+CONST());break; // xor r9,r0,#*
case 0x791: R9 ^= (R1+CONST());break; // xor r9,r1,#*
case 0x792: R9 ^= (R2+CONST());break; // xor r9,r2,#*
case 0x793: R9 ^= (R3+CONST());break; // xor r9,r3,#*
case 0x794: R9 ^= (R4+CONST());break; // xor r9,r4,#*
case 0x795: R9 ^= (R5+CONST());break; // xor r9,r5,#*
case 0x796: R9 ^= (R6+CONST());break; // xor r9,r6,#*
case 0x797: R9 ^= (R7+CONST());break; // xor r9,r7,#*
case 0x798: R9 ^= (R8+CONST());break; // xor r9,r8,#*
case 0x799: R9 ^= (R9+CONST());break; // xor r9,r9,#*
case 0x79a: R9 ^= (R10+CONST());break; // xor r9,r10,#*
case 0x79b: R9 ^= (R11+CONST());break; // xor r9,r11,#*
case 0x79c: R9 ^= (R12+CONST());break; // xor r9,r12,#*
case 0x79d: R9 ^= (R13+CONST());break; // xor r9,r13,#*
case 0x79e: R9 ^= (R14+CONST());break; // xor r9,r14,#*
case 0x79f: R9 ^= FETCH();break; // xor r9,#*
case 0x7a0: R10 ^= (R0+CONST());break; // xor r10,r0,#*
case 0x7a1: R10 ^= (R1+CONST());break; // xor r10,r1,#*
case 0x7a2: R10 ^= (R2+CONST());break; // xor r10,r2,#*
case 0x7a3: R10 ^= (R3+CONST());break; // xor r10,r3,#*
case 0x7a4: R10 ^= (R4+CONST());break; // xor r10,r4,#*
case 0x7a5: R10 ^= (R5+CONST());break; // xor r10,r5,#*
case 0x7a6: R10 ^= (R6+CONST());break; // xor r10,r6,#*
case 0x7a7: R10 ^= (R7+CONST());break; // xor r10,r7,#*
case 0x7a8: R10 ^= (R8+CONST());break; // xor r10,r8,#*
case 0x7a9: R10 ^= (R9+CONST());break; // xor r10,r9,#*
case 0x7aa: R10 ^= (R10+CONST());break; // xor r10,r10,#*
case 0x7ab: R10 ^= (R11+CONST());break; // xor r10,r11,#*
case 0x7ac: R10 ^= (R12+CONST());break; // xor r10,r12,#*
case 0x7ad: R10 ^= (R13+CONST());break; // xor r10,r13,#*
case 0x7ae: R10 ^= (R14+CONST());break; // xor r10,r14,#*
case 0x7af: R10 ^= FETCH();break; // xor r10,#*
case 0x7b0: R11 ^= (R0+CONST());break; // xor r11,r0,#*
case 0x7b1: R11 ^= (R1+CONST());break; // xor r11,r1,#*
case 0x7b2: R11 ^= (R2+CONST());break; // xor r11,r2,#*
case 0x7b3: R11 ^= (R3+CONST());break; // xor r11,r3,#*
case 0x7b4: R11 ^= (R4+CONST());break; // xor r11,r4,#*
case 0x7b5: R11 ^= (R5+CONST());break; // xor r11,r5,#*
case 0x7b6: R11 ^= (R6+CONST());break; // xor r11,r6,#*
case 0x7b7: R11 ^= (R7+CONST());break; // xor r11,r7,#*
case 0x7b8: R11 ^= (R8+CONST());break; // xor r11,r8,#*
case 0x7b9: R11 ^= (R9+CONST());break; // xor r11,r9,#*
case 0x7ba: R11 ^= (R10+CONST());break; // xor r11,r10,#*
case 0x7bb: R11 ^= (R11+CONST());break; // xor r11,r11,#*
case 0x7bc: R11 ^= (R12+CONST());break; // xor r11,r12,#*
case 0x7bd: R11 ^= (R13+CONST());break; // xor r11,r13,#*
case 0x7be: R11 ^= (R14+CONST());break; // xor r11,r14,#*
case 0x7bf: R11 ^= FETCH();break; // xor r11,#*
case 0x7c0: R12 ^= (R0+CONST());break; // xor r12,r0,#*
case 0x7c1: R12 ^= (R1+CONST());break; // xor r12,r1,#*
case 0x7c2: R12 ^= (R2+CONST());break; // xor r12,r2,#*
case 0x7c3: R12 ^= (R3+CONST());break; // xor r12,r3,#*
case 0x7c4: R12 ^= (R4+CONST());break; // xor r12,r4,#*
case 0x7c5: R12 ^= (R5+CONST());break; // xor r12,r5,#*
case 0x7c6: R12 ^= (R6+CONST());break; // xor r12,r6,#*
case 0x7c7: R12 ^= (R7+CONST());break; // xor r12,r7,#*
case 0x7c8: R12 ^= (R8+CONST());break; // xor r12,r8,#*
case 0x7c9: R12 ^= (R9+CONST());break; // xor r12,r9,#*
case 0x7ca: R12 ^= (R10+CONST());break; // xor r12,r10,#*
case 0x7cb: R12 ^= (R11+CONST());break; // xor r12,r11,#*
case 0x7cc: R12 ^= (R12+CONST());break; // xor r12,r12,#*
case 0x7cd: R12 ^= (R13+CONST());break; // xor r12,r13,#*
case 0x7ce: R12 ^= (R14+CONST());break; // xor r12,r14,#*
case 0x7cf: R12 ^= FETCH();break; // xor r12,#*
case 0x7d0: R13 ^= (R0+CONST());break; // xor r13,r0,#*
case 0x7d1: R13 ^= (R1+CONST());break; // xor r13,r1,#*
case 0x7d2: R13 ^= (R2+CONST());break; // xor r13,r2,#*
case 0x7d3: R13 ^= (R3+CONST());break; // xor r13,r3,#*
case 0x7d4: R13 ^= (R4+CONST());break; // xor r13,r4,#*
case 0x7d5: R13 ^= (R5+CONST());break; // xor r13,r5,#*
case 0x7d6: R13 ^= (R6+CONST());break; // xor r13,r6,#*
case 0x7d7: R13 ^= (R7+CONST());break; // xor r13,r7,#*
case 0x7d8: R13 ^= (R8+CONST());break; // xor r13,r8,#*
case 0x7d9: R13 ^= (R9+CONST());break; // xor r13,r9,#*
case 0x7da: R13 ^= (R10+CONST());break; // xor r13,r10,#*
case 0x7db: R13 ^= (R11+CONST());break; // xor r13,r11,#*
case 0x7dc: R13 ^= (R12+CONST());break; // xor r13,r12,#*
case 0x7dd: R13 ^= (R13+CONST());break; // xor r13,r13,#*
case 0x7de: R13 ^= (R14+CONST());break; // xor r13,r14,#*
case 0x7df: R13 ^= FETCH();break; // xor r13,#*
case 0x7e0: R14 ^= (R0+CONST());break; // xor r14,r0,#*
case 0x7e1: R14 ^= (R1+CONST());break; // xor r14,r1,#*
case 0x7e2: R14 ^= (R2+CONST());break; // xor r14,r2,#*
case 0x7e3: R14 ^= (R3+CONST());break; // xor r14,r3,#*
case 0x7e4: R14 ^= (R4+CONST());break; // xor r14,r4,#*
case 0x7e5: R14 ^= (R5+CONST());break; // xor r14,r5,#*
case 0x7e6: R14 ^= (R6+CONST());break; // xor r14,r6,#*
case 0x7e7: R14 ^= (R7+CONST());break; // xor r14,r7,#*
case 0x7e8: R14 ^= (R8+CONST());break; // xor r14,r8,#*
case 0x7e9: R14 ^= (R9+CONST());break; // xor r14,r9,#*
case 0x7ea: R14 ^= (R10+CONST());break; // xor r14,r10,#*
case 0x7eb: R14 ^= (R11+CONST());break; // xor r14,r11,#*
case 0x7ec: R14 ^= (R12+CONST());break; // xor r14,r12,#*
case 0x7ed: R14 ^= (R13+CONST());break; // xor r14,r13,#*
case 0x7ee: R14 ^= (R14+CONST());break; // xor r14,r14,#*
case 0x7ef: R14 ^= FETCH();break; // xor r14,#*
case 0x7f0: R15 ^= (R0+CONST());break; // xor r15,r0,#*
case 0x7f1: R15 ^= (R1+CONST());break; // xor r15,r1,#*
case 0x7f2: R15 ^= (R2+CONST());break; // xor r15,r2,#*
case 0x7f3: R15 ^= (R3+CONST());break; // xor r15,r3,#*
case 0x7f4: R15 ^= (R4+CONST());break; // xor r15,r4,#*
case 0x7f5: R15 ^= (R5+CONST());break; // xor r15,r5,#*
case 0x7f6: R15 ^= (R6+CONST());break; // xor r15,r6,#*
case 0x7f7: R15 ^= (R7+CONST());break; // xor r15,r7,#*
case 0x7f8: R15 ^= (R8+CONST());break; // xor r15,r8,#*
case 0x7f9: R15 ^= (R9+CONST());break; // xor r15,r9,#*
case 0x7fa: R15 ^= (R10+CONST());break; // xor r15,r10,#*
case 0x7fb: R15 ^= (R11+CONST());break; // xor r15,r11,#*
case 0x7fc: R15 ^= (R12+CONST());break; // xor r15,r12,#*
case 0x7fd: R15 ^= (R13+CONST());break; // xor r15,r13,#*
case 0x7fe: R15 ^= (R14+CONST());break; // xor r15,r14,#*
case 0x7ff: R15 ^= FETCH();break; // xor r15,#*
case 0x800: R0 = mul16Bit(R0,(R0+CONST()));break; // mult r0,r0,#*
case 0x801: R0 = mul16Bit(R0,(R1+CONST()));break; // mult r0,r1,#*
case 0x802: R0 = mul16Bit(R0,(R2+CONST()));break; // mult r0,r2,#*
case 0x803: R0 = mul16Bit(R0,(R3+CONST()));break; // mult r0,r3,#*
case 0x804: R0 = mul16Bit(R0,(R4+CONST()));break; // mult r0,r4,#*
case 0x805: R0 = mul16Bit(R0,(R5+CONST()));break; // mult r0,r5,#*
case 0x806: R0 = mul16Bit(R0,(R6+CONST()));break; // mult r0,r6,#*
case 0x807: R0 = mul16Bit(R0,(R7+CONST()));break; // mult r0,r7,#*
case 0x808: R0 = mul16Bit(R0,(R8+CONST()));break; // mult r0,r8,#*
case 0x809: R0 = mul16Bit(R0,(R9+CONST()));break; // mult r0,r9,#*
case 0x80a: R0 = mul16Bit(R0,(R10+CONST()));break; // mult r0,r10,#*
case 0x80b: R0 = mul16Bit(R0,(R11+CONST()));break; // mult r0,r11,#*
case 0x80c: R0 = mul16Bit(R0,(R12+CONST()));break; // mult r0,r12,#*
case 0x80d: R0 = mul16Bit(R0,(R13+CONST()));break; // mult r0,r13,#*
case 0x80e: R0 = mul16Bit(R0,(R14+CONST()));break; // mult r0,r14,#*
case 0x80f: R0 = mul16Bit(R0,FETCH());break; // mult r0,#*
case 0x810: R1 = mul16Bit(R1,(R0+CONST()));break; // mult r1,r0,#*
case 0x811: R1 = mul16Bit(R1,(R1+CONST()));break; // mult r1,r1,#*
case 0x812: R1 = mul16Bit(R1,(R2+CONST()));break; // mult r1,r2,#*
case 0x813: R1 = mul16Bit(R1,(R3+CONST()));break; // mult r1,r3,#*
case 0x814: R1 = mul16Bit(R1,(R4+CONST()));break; // mult r1,r4,#*
case 0x815: R1 = mul16Bit(R1,(R5+CONST()));break; // mult r1,r5,#*
case 0x816: R1 = mul16Bit(R1,(R6+CONST()));break; // mult r1,r6,#*
case 0x817: R1 = mul16Bit(R1,(R7+CONST()));break; // mult r1,r7,#*
case 0x818: R1 = mul16Bit(R1,(R8+CONST()));break; // mult r1,r8,#*
case 0x819: R1 = mul16Bit(R1,(R9+CONST()));break; // mult r1,r9,#*
case 0x81a: R1 = mul16Bit(R1,(R10+CONST()));break; // mult r1,r10,#*
case 0x81b: R1 = mul16Bit(R1,(R11+CONST()));break; // mult r1,r11,#*
case 0x81c: R1 = mul16Bit(R1,(R12+CONST()));break; // mult r1,r12,#*
case 0x81d: R1 = mul16Bit(R1,(R13+CONST()));break; // mult r1,r13,#*
case 0x81e: R1 = mul16Bit(R1,(R14+CONST()));break; // mult r1,r14,#*
case 0x81f: R1 = mul16Bit(R1,FETCH());break; // mult r1,#*
case 0x820: R2 = mul16Bit(R2,(R0+CONST()));break; // mult r2,r0,#*
case 0x821: R2 = mul16Bit(R2,(R1+CONST()));break; // mult r2,r1,#*
case 0x822: R2 = mul16Bit(R2,(R2+CONST()));break; // mult r2,r2,#*
case 0x823: R2 = mul16Bit(R2,(R3+CONST()));break; // mult r2,r3,#*
case 0x824: R2 = mul16Bit(R2,(R4+CONST()));break; // mult r2,r4,#*
case 0x825: R2 = mul16Bit(R2,(R5+CONST()));break; // mult r2,r5,#*
case 0x826: R2 = mul16Bit(R2,(R6+CONST()));break; // mult r2,r6,#*
case 0x827: R2 = mul16Bit(R2,(R7+CONST()));break; // mult r2,r7,#*
case 0x828: R2 = mul16Bit(R2,(R8+CONST()));break; // mult r2,r8,#*
case 0x829: R2 = mul16Bit(R2,(R9+CONST()));break; // mult r2,r9,#*
case 0x82a: R2 = mul16Bit(R2,(R10+CONST()));break; // mult r2,r10,#*
case 0x82b: R2 = mul16Bit(R2,(R11+CONST()));break; // mult r2,r11,#*
case 0x82c: R2 = mul16Bit(R2,(R12+CONST()));break; // mult r2,r12,#*
case 0x82d: R2 = mul16Bit(R2,(R13+CONST()));break; // mult r2,r13,#*
case 0x82e: R2 = mul16Bit(R2,(R14+CONST()));break; // mult r2,r14,#*
case 0x82f: R2 = mul16Bit(R2,FETCH());break; // mult r2,#*
case 0x830: R3 = mul16Bit(R3,(R0+CONST()));break; // mult r3,r0,#*
case 0x831: R3 = mul16Bit(R3,(R1+CONST()));break; // mult r3,r1,#*
case 0x832: R3 = mul16Bit(R3,(R2+CONST()));break; // mult r3,r2,#*
case 0x833: R3 = mul16Bit(R3,(R3+CONST()));break; // mult r3,r3,#*
case 0x834: R3 = mul16Bit(R3,(R4+CONST()));break; // mult r3,r4,#*
case 0x835: R3 = mul16Bit(R3,(R5+CONST()));break; // mult r3,r5,#*
case 0x836: R3 = mul16Bit(R3,(R6+CONST()));break; // mult r3,r6,#*
case 0x837: R3 = mul16Bit(R3,(R7+CONST()));break; // mult r3,r7,#*
case 0x838: R3 = mul16Bit(R3,(R8+CONST()));break; // mult r3,r8,#*
case 0x839: R3 = mul16Bit(R3,(R9+CONST()));break; // mult r3,r9,#*
case 0x83a: R3 = mul16Bit(R3,(R10+CONST()));break; // mult r3,r10,#*
case 0x83b: R3 = mul16Bit(R3,(R11+CONST()));break; // mult r3,r11,#*
case 0x83c: R3 = mul16Bit(R3,(R12+CONST()));break; // mult r3,r12,#*
case 0x83d: R3 = mul16Bit(R3,(R13+CONST()));break; // mult r3,r13,#*
case 0x83e: R3 = mul16Bit(R3,(R14+CONST()));break; // mult r3,r14,#*
case 0x83f: R3 = mul16Bit(R3,FETCH());break; // mult r3,#*
case 0x840: R4 = mul16Bit(R4,(R0+CONST()));break; // mult r4,r0,#*
case 0x841: R4 = mul16Bit(R4,(R1+CONST()));break; // mult r4,r1,#*
case 0x842: R4 = mul16Bit(R4,(R2+CONST()));break; // mult r4,r2,#*
case 0x843: R4 = mul16Bit(R4,(R3+CONST()));break; // mult r4,r3,#*
case 0x844: R4 = mul16Bit(R4,(R4+CONST()));break; // mult r4,r4,#*
case 0x845: R4 = mul16Bit(R4,(R5+CONST()));break; // mult r4,r5,#*
case 0x846: R4 = mul16Bit(R4,(R6+CONST()));break; // mult r4,r6,#*
case 0x847: R4 = mul16Bit(R4,(R7+CONST()));break; // mult r4,r7,#*
case 0x848: R4 = mul16Bit(R4,(R8+CONST()));break; // mult r4,r8,#*
case 0x849: R4 = mul16Bit(R4,(R9+CONST()));break; // mult r4,r9,#*
case 0x84a: R4 = mul16Bit(R4,(R10+CONST()));break; // mult r4,r10,#*
case 0x84b: R4 = mul16Bit(R4,(R11+CONST()));break; // mult r4,r11,#*
case 0x84c: R4 = mul16Bit(R4,(R12+CONST()));break; // mult r4,r12,#*
case 0x84d: R4 = mul16Bit(R4,(R13+CONST()));break; // mult r4,r13,#*
case 0x84e: R4 = mul16Bit(R4,(R14+CONST()));break; // mult r4,r14,#*
case 0x84f: R4 = mul16Bit(R4,FETCH());break; // mult r4,#*
case 0x850: R5 = mul16Bit(R5,(R0+CONST()));break; // mult r5,r0,#*
case 0x851: R5 = mul16Bit(R5,(R1+CONST()));break; // mult r5,r1,#*
case 0x852: R5 = mul16Bit(R5,(R2+CONST()));break; // mult r5,r2,#*
case 0x853: R5 = mul16Bit(R5,(R3+CONST()));break; // mult r5,r3,#*
case 0x854: R5 = mul16Bit(R5,(R4+CONST()));break; // mult r5,r4,#*
case 0x855: R5 = mul16Bit(R5,(R5+CONST()));break; // mult r5,r5,#*
case 0x856: R5 = mul16Bit(R5,(R6+CONST()));break; // mult r5,r6,#*
case 0x857: R5 = mul16Bit(R5,(R7+CONST()));break; // mult r5,r7,#*
case 0x858: R5 = mul16Bit(R5,(R8+CONST()));break; // mult r5,r8,#*
case 0x859: R5 = mul16Bit(R5,(R9+CONST()));break; // mult r5,r9,#*
case 0x85a: R5 = mul16Bit(R5,(R10+CONST()));break; // mult r5,r10,#*
case 0x85b: R5 = mul16Bit(R5,(R11+CONST()));break; // mult r5,r11,#*
case 0x85c: R5 = mul16Bit(R5,(R12+CONST()));break; // mult r5,r12,#*
case 0x85d: R5 = mul16Bit(R5,(R13+CONST()));break; // mult r5,r13,#*
case 0x85e: R5 = mul16Bit(R5,(R14+CONST()));break; // mult r5,r14,#*
case 0x85f: R5 = mul16Bit(R5,FETCH());break; // mult r5,#*
case 0x860: R6 = mul16Bit(R6,(R0+CONST()));break; // mult r6,r0,#*
case 0x861: R6 = mul16Bit(R6,(R1+CONST()));break; // mult r6,r1,#*
case 0x862: R6 = mul16Bit(R6,(R2+CONST()));break; // mult r6,r2,#*
case 0x863: R6 = mul16Bit(R6,(R3+CONST()));break; // mult r6,r3,#*
case 0x864: R6 = mul16Bit(R6,(R4+CONST()));break; // mult r6,r4,#*
case 0x865: R6 = mul16Bit(R6,(R5+CONST()));break; // mult r6,r5,#*
case 0x866: R6 = mul16Bit(R6,(R6+CONST()));break; // mult r6,r6,#*
case 0x867: R6 = mul16Bit(R6,(R7+CONST()));break; // mult r6,r7,#*
case 0x868: R6 = mul16Bit(R6,(R8+CONST()));break; // mult r6,r8,#*
case 0x869: R6 = mul16Bit(R6,(R9+CONST()));break; // mult r6,r9,#*
case 0x86a: R6 = mul16Bit(R6,(R10+CONST()));break; // mult r6,r10,#*
case 0x86b: R6 = mul16Bit(R6,(R11+CONST()));break; // mult r6,r11,#*
case 0x86c: R6 = mul16Bit(R6,(R12+CONST()));break; // mult r6,r12,#*
case 0x86d: R6 = mul16Bit(R6,(R13+CONST()));break; // mult r6,r13,#*
case 0x86e: R6 = mul16Bit(R6,(R14+CONST()));break; // mult r6,r14,#*
case 0x86f: R6 = mul16Bit(R6,FETCH());break; // mult r6,#*
case 0x870: R7 = mul16Bit(R7,(R0+CONST()));break; // mult r7,r0,#*
case 0x871: R7 = mul16Bit(R7,(R1+CONST()));break; // mult r7,r1,#*
case 0x872: R7 = mul16Bit(R7,(R2+CONST()));break; // mult r7,r2,#*
case 0x873: R7 = mul16Bit(R7,(R3+CONST()));break; // mult r7,r3,#*
case 0x874: R7 = mul16Bit(R7,(R4+CONST()));break; // mult r7,r4,#*
case 0x875: R7 = mul16Bit(R7,(R5+CONST()));break; // mult r7,r5,#*
case 0x876: R7 = mul16Bit(R7,(R6+CONST()));break; // mult r7,r6,#*
case 0x877: R7 = mul16Bit(R7,(R7+CONST()));break; // mult r7,r7,#*
case 0x878: R7 = mul16Bit(R7,(R8+CONST()));break; // mult r7,r8,#*
case 0x879: R7 = mul16Bit(R7,(R9+CONST()));break; // mult r7,r9,#*
case 0x87a: R7 = mul16Bit(R7,(R10+CONST()));break; // mult r7,r10,#*
case 0x87b: R7 = mul16Bit(R7,(R11+CONST()));break; // mult r7,r11,#*
case 0x87c: R7 = mul16Bit(R7,(R12+CONST()));break; // mult r7,r12,#*
case 0x87d: R7 = mul16Bit(R7,(R13+CONST()));break; // mult r7,r13,#*
case 0x87e: R7 = mul16Bit(R7,(R14+CONST()));break; // mult r7,r14,#*
case 0x87f: R7 = mul16Bit(R7,FETCH());break; // mult r7,#*
case 0x880: R8 = mul16Bit(R8,(R0+CONST()));break; // mult r8,r0,#*
case 0x881: R8 = mul16Bit(R8,(R1+CONST()));break; // mult r8,r1,#*
case 0x882: R8 = mul16Bit(R8,(R2+CONST()));break; // mult r8,r2,#*
case 0x883: R8 = mul16Bit(R8,(R3+CONST()));break; // mult r8,r3,#*
case 0x884: R8 = mul16Bit(R8,(R4+CONST()));break; // mult r8,r4,#*
case 0x885: R8 = mul16Bit(R8,(R5+CONST()));break; // mult r8,r5,#*
case 0x886: R8 = mul16Bit(R8,(R6+CONST()));break; // mult r8,r6,#*
case 0x887: R8 = mul16Bit(R8,(R7+CONST()));break; // mult r8,r7,#*
case 0x888: R8 = mul16Bit(R8,(R8+CONST()));break; // mult r8,r8,#*
case 0x889: R8 = mul16Bit(R8,(R9+CONST()));break; // mult r8,r9,#*
case 0x88a: R8 = mul16Bit(R8,(R10+CONST()));break; // mult r8,r10,#*
case 0x88b: R8 = mul16Bit(R8,(R11+CONST()));break; // mult r8,r11,#*
case 0x88c: R8 = mul16Bit(R8,(R12+CONST()));break; // mult r8,r12,#*
case 0x88d: R8 = mul16Bit(R8,(R13+CONST()));break; // mult r8,r13,#*
case 0x88e: R8 = mul16Bit(R8,(R14+CONST()));break; // mult r8,r14,#*
case 0x88f: R8 = mul16Bit(R8,FETCH());break; // mult r8,#*
case 0x890: R9 = mul16Bit(R9,(R0+CONST()));break; // mult r9,r0,#*
case 0x891: R9 = mul16Bit(R9,(R1+CONST()));break; // mult r9,r1,#*
case 0x892: R9 = mul16Bit(R9,(R2+CONST()));break; // mult r9,r2,#*
case 0x893: R9 = mul16Bit(R9,(R3+CONST()));break; // mult r9,r3,#*
case 0x894: R9 = mul16Bit(R9,(R4+CONST()));break; // mult r9,r4,#*
case 0x895: R9 = mul16Bit(R9,(R5+CONST()));break; // mult r9,r5,#*
case 0x896: R9 = mul16Bit(R9,(R6+CONST()));break; // mult r9,r6,#*
case 0x897: R9 = mul16Bit(R9,(R7+CONST()));break; // mult r9,r7,#*
case 0x898: R9 = mul16Bit(R9,(R8+CONST()));break; // mult r9,r8,#*
case 0x899: R9 = mul16Bit(R9,(R9+CONST()));break; // mult r9,r9,#*
case 0x89a: R9 = mul16Bit(R9,(R10+CONST()));break; // mult r9,r10,#*
case 0x89b: R9 = mul16Bit(R9,(R11+CONST()));break; // mult r9,r11,#*
case 0x89c: R9 = mul16Bit(R9,(R12+CONST()));break; // mult r9,r12,#*
case 0x89d: R9 = mul16Bit(R9,(R13+CONST()));break; // mult r9,r13,#*
case 0x89e: R9 = mul16Bit(R9,(R14+CONST()));break; // mult r9,r14,#*
case 0x89f: R9 = mul16Bit(R9,FETCH());break; // mult r9,#*
case 0x8a0: R10 = mul16Bit(R10,(R0+CONST()));break; // mult r10,r0,#*
case 0x8a1: R10 = mul16Bit(R10,(R1+CONST()));break; // mult r10,r1,#*
case 0x8a2: R10 = mul16Bit(R10,(R2+CONST()));break; // mult r10,r2,#*
case 0x8a3: R10 = mul16Bit(R10,(R3+CONST()));break; // mult r10,r3,#*
case 0x8a4: R10 = mul16Bit(R10,(R4+CONST()));break; // mult r10,r4,#*
case 0x8a5: R10 = mul16Bit(R10,(R5+CONST()));break; // mult r10,r5,#*
case 0x8a6: R10 = mul16Bit(R10,(R6+CONST()));break; // mult r10,r6,#*
case 0x8a7: R10 = mul16Bit(R10,(R7+CONST()));break; // mult r10,r7,#*
case 0x8a8: R10 = mul16Bit(R10,(R8+CONST()));break; // mult r10,r8,#*
case 0x8a9: R10 = mul16Bit(R10,(R9+CONST()));break; // mult r10,r9,#*
case 0x8aa: R10 = mul16Bit(R10,(R10+CONST()));break; // mult r10,r10,#*
case 0x8ab: R10 = mul16Bit(R10,(R11+CONST()));break; // mult r10,r11,#*
case 0x8ac: R10 = mul16Bit(R10,(R12+CONST()));break; // mult r10,r12,#*
case 0x8ad: R10 = mul16Bit(R10,(R13+CONST()));break; // mult r10,r13,#*
case 0x8ae: R10 = mul16Bit(R10,(R14+CONST()));break; // mult r10,r14,#*
case 0x8af: R10 = mul16Bit(R10,FETCH());break; // mult r10,#*
case 0x8b0: R11 = mul16Bit(R11,(R0+CONST()));break; // mult r11,r0,#*
case 0x8b1: R11 = mul16Bit(R11,(R1+CONST()));break; // mult r11,r1,#*
case 0x8b2: R11 = mul16Bit(R11,(R2+CONST()));break; // mult r11,r2,#*
case 0x8b3: R11 = mul16Bit(R11,(R3+CONST()));break; // mult r11,r3,#*
case 0x8b4: R11 = mul16Bit(R11,(R4+CONST()));break; // mult r11,r4,#*
case 0x8b5: R11 = mul16Bit(R11,(R5+CONST()));break; // mult r11,r5,#*
case 0x8b6: R11 = mul16Bit(R11,(R6+CONST()));break; // mult r11,r6,#*
case 0x8b7: R11 = mul16Bit(R11,(R7+CONST()));break; // mult r11,r7,#*
case 0x8b8: R11 = mul16Bit(R11,(R8+CONST()));break; // mult r11,r8,#*
case 0x8b9: R11 = mul16Bit(R11,(R9+CONST()));break; // mult r11,r9,#*
case 0x8ba: R11 = mul16Bit(R11,(R10+CONST()));break; // mult r11,r10,#*
case 0x8bb: R11 = mul16Bit(R11,(R11+CONST()));break; // mult r11,r11,#*
case 0x8bc: R11 = mul16Bit(R11,(R12+CONST()));break; // mult r11,r12,#*
case 0x8bd: R11 = mul16Bit(R11,(R13+CONST()));break; // mult r11,r13,#*
case 0x8be: R11 = mul16Bit(R11,(R14+CONST()));break; // mult r11,r14,#*
case 0x8bf: R11 = mul16Bit(R11,FETCH());break; // mult r11,#*
case 0x8c0: R12 = mul16Bit(R12,(R0+CONST()));break; // mult r12,r0,#*
case 0x8c1: R12 = mul16Bit(R12,(R1+CONST()));break; // mult r12,r1,#*
case 0x8c2: R12 = mul16Bit(R12,(R2+CONST()));break; // mult r12,r2,#*
case 0x8c3: R12 = mul16Bit(R12,(R3+CONST()));break; // mult r12,r3,#*
case 0x8c4: R12 = mul16Bit(R12,(R4+CONST()));break; // mult r12,r4,#*
case 0x8c5: R12 = mul16Bit(R12,(R5+CONST()));break; // mult r12,r5,#*
case 0x8c6: R12 = mul16Bit(R12,(R6+CONST()));break; // mult r12,r6,#*
case 0x8c7: R12 = mul16Bit(R12,(R7+CONST()));break; // mult r12,r7,#*
case 0x8c8: R12 = mul16Bit(R12,(R8+CONST()));break; // mult r12,r8,#*
case 0x8c9: R12 = mul16Bit(R12,(R9+CONST()));break; // mult r12,r9,#*
case 0x8ca: R12 = mul16Bit(R12,(R10+CONST()));break; // mult r12,r10,#*
case 0x8cb: R12 = mul16Bit(R12,(R11+CONST()));break; // mult r12,r11,#*
case 0x8cc: R12 = mul16Bit(R12,(R12+CONST()));break; // mult r12,r12,#*
case 0x8cd: R12 = mul16Bit(R12,(R13+CONST()));break; // mult r12,r13,#*
case 0x8ce: R12 = mul16Bit(R12,(R14+CONST()));break; // mult r12,r14,#*
case 0x8cf: R12 = mul16Bit(R12,FETCH());break; // mult r12,#*
case 0x8d0: R13 = mul16Bit(R13,(R0+CONST()));break; // mult r13,r0,#*
case 0x8d1: R13 = mul16Bit(R13,(R1+CONST()));break; // mult r13,r1,#*
case 0x8d2: R13 = mul16Bit(R13,(R2+CONST()));break; // mult r13,r2,#*
case 0x8d3: R13 = mul16Bit(R13,(R3+CONST()));break; // mult r13,r3,#*
case 0x8d4: R13 = mul16Bit(R13,(R4+CONST()));break; // mult r13,r4,#*
case 0x8d5: R13 = mul16Bit(R13,(R5+CONST()));break; // mult r13,r5,#*
case 0x8d6: R13 = mul16Bit(R13,(R6+CONST()));break; // mult r13,r6,#*
case 0x8d7: R13 = mul16Bit(R13,(R7+CONST()));break; // mult r13,r7,#*
case 0x8d8: R13 = mul16Bit(R13,(R8+CONST()));break; // mult r13,r8,#*
case 0x8d9: R13 = mul16Bit(R13,(R9+CONST()));break; // mult r13,r9,#*
case 0x8da: R13 = mul16Bit(R13,(R10+CONST()));break; // mult r13,r10,#*
case 0x8db: R13 = mul16Bit(R13,(R11+CONST()));break; // mult r13,r11,#*
case 0x8dc: R13 = mul16Bit(R13,(R12+CONST()));break; // mult r13,r12,#*
case 0x8dd: R13 = mul16Bit(R13,(R13+CONST()));break; // mult r13,r13,#*
case 0x8de: R13 = mul16Bit(R13,(R14+CONST()));break; // mult r13,r14,#*
case 0x8df: R13 = mul16Bit(R13,FETCH());break; // mult r13,#*
case 0x8e0: R14 = mul16Bit(R14,(R0+CONST()));break; // mult r14,r0,#*
case 0x8e1: R14 = mul16Bit(R14,(R1+CONST()));break; // mult r14,r1,#*
case 0x8e2: R14 = mul16Bit(R14,(R2+CONST()));break; // mult r14,r2,#*
case 0x8e3: R14 = mul16Bit(R14,(R3+CONST()));break; // mult r14,r3,#*
case 0x8e4: R14 = mul16Bit(R14,(R4+CONST()));break; // mult r14,r4,#*
case 0x8e5: R14 = mul16Bit(R14,(R5+CONST()));break; // mult r14,r5,#*
case 0x8e6: R14 = mul16Bit(R14,(R6+CONST()));break; // mult r14,r6,#*
case 0x8e7: R14 = mul16Bit(R14,(R7+CONST()));break; // mult r14,r7,#*
case 0x8e8: R14 = mul16Bit(R14,(R8+CONST()));break; // mult r14,r8,#*
case 0x8e9: R14 = mul16Bit(R14,(R9+CONST()));break; // mult r14,r9,#*
case 0x8ea: R14 = mul16Bit(R14,(R10+CONST()));break; // mult r14,r10,#*
case 0x8eb: R14 = mul16Bit(R14,(R11+CONST()));break; // mult r14,r11,#*
case 0x8ec: R14 = mul16Bit(R14,(R12+CONST()));break; // mult r14,r12,#*
case 0x8ed: R14 = mul16Bit(R14,(R13+CONST()));break; // mult r14,r13,#*
case 0x8ee: R14 = mul16Bit(R14,(R14+CONST()));break; // mult r14,r14,#*
case 0x8ef: R14 = mul16Bit(R14,FETCH());break; // mult r14,#*
case 0x8f0: R15 = mul16Bit(R15,(R0+CONST()));break; // mult r15,r0,#*
case 0x8f1: R15 = mul16Bit(R15,(R1+CONST()));break; // mult r15,r1,#*
case 0x8f2: R15 = mul16Bit(R15,(R2+CONST()));break; // mult r15,r2,#*
case 0x8f3: R15 = mul16Bit(R15,(R3+CONST()));break; // mult r15,r3,#*
case 0x8f4: R15 = mul16Bit(R15,(R4+CONST()));break; // mult r15,r4,#*
case 0x8f5: R15 = mul16Bit(R15,(R5+CONST()));break; // mult r15,r5,#*
case 0x8f6: R15 = mul16Bit(R15,(R6+CONST()));break; // mult r15,r6,#*
case 0x8f7: R15 = mul16Bit(R15,(R7+CONST()));break; // mult r15,r7,#*
case 0x8f8: R15 = mul16Bit(R15,(R8+CONST()));break; // mult r15,r8,#*
case 0x8f9: R15 = mul16Bit(R15,(R9+CONST()));break; // mult r15,r9,#*
case 0x8fa: R15 = mul16Bit(R15,(R10+CONST()));break; // mult r15,r10,#*
case 0x8fb: R15 = mul16Bit(R15,(R11+CONST()));break; // mult r15,r11,#*
case 0x8fc: R15 = mul16Bit(R15,(R12+CONST()));break; // mult r15,r12,#*
case 0x8fd: R15 = mul16Bit(R15,(R13+CONST()));break; // mult r15,r13,#*
case 0x8fe: R15 = mul16Bit(R15,(R14+CONST()));break; // mult r15,r14,#*
case 0x8ff: R15 = mul16Bit(R15,FETCH());break; // mult r15,#*
case 0x900: R0 = ror16Bit(R0,(R0+CONST()));break; // ror r0,r0,#*
case 0x901: R0 = ror16Bit(R0,(R1+CONST()));break; // ror r0,r1,#*
case 0x902: R0 = ror16Bit(R0,(R2+CONST()));break; // ror r0,r2,#*
case 0x903: R0 = ror16Bit(R0,(R3+CONST()));break; // ror r0,r3,#*
case 0x904: R0 = ror16Bit(R0,(R4+CONST()));break; // ror r0,r4,#*
case 0x905: R0 = ror16Bit(R0,(R5+CONST()));break; // ror r0,r5,#*
case 0x906: R0 = ror16Bit(R0,(R6+CONST()));break; // ror r0,r6,#*
case 0x907: R0 = ror16Bit(R0,(R7+CONST()));break; // ror r0,r7,#*
case 0x908: R0 = ror16Bit(R0,(R8+CONST()));break; // ror r0,r8,#*
case 0x909: R0 = ror16Bit(R0,(R9+CONST()));break; // ror r0,r9,#*
case 0x90a: R0 = ror16Bit(R0,(R10+CONST()));break; // ror r0,r10,#*
case 0x90b: R0 = ror16Bit(R0,(R11+CONST()));break; // ror r0,r11,#*
case 0x90c: R0 = ror16Bit(R0,(R12+CONST()));break; // ror r0,r12,#*
case 0x90d: R0 = ror16Bit(R0,(R13+CONST()));break; // ror r0,r13,#*
case 0x90e: R0 = ror16Bit(R0,(R14+CONST()));break; // ror r0,r14,#*
case 0x90f: R0 = ror16Bit(R0,FETCH());break; // ror r0,#*
case 0x910: R1 = ror16Bit(R1,(R0+CONST()));break; // ror r1,r0,#*
case 0x911: R1 = ror16Bit(R1,(R1+CONST()));break; // ror r1,r1,#*
case 0x912: R1 = ror16Bit(R1,(R2+CONST()));break; // ror r1,r2,#*
case 0x913: R1 = ror16Bit(R1,(R3+CONST()));break; // ror r1,r3,#*
case 0x914: R1 = ror16Bit(R1,(R4+CONST()));break; // ror r1,r4,#*
case 0x915: R1 = ror16Bit(R1,(R5+CONST()));break; // ror r1,r5,#*
case 0x916: R1 = ror16Bit(R1,(R6+CONST()));break; // ror r1,r6,#*
case 0x917: R1 = ror16Bit(R1,(R7+CONST()));break; // ror r1,r7,#*
case 0x918: R1 = ror16Bit(R1,(R8+CONST()));break; // ror r1,r8,#*
case 0x919: R1 = ror16Bit(R1,(R9+CONST()));break; // ror r1,r9,#*
case 0x91a: R1 = ror16Bit(R1,(R10+CONST()));break; // ror r1,r10,#*
case 0x91b: R1 = ror16Bit(R1,(R11+CONST()));break; // ror r1,r11,#*
case 0x91c: R1 = ror16Bit(R1,(R12+CONST()));break; // ror r1,r12,#*
case 0x91d: R1 = ror16Bit(R1,(R13+CONST()));break; // ror r1,r13,#*
case 0x91e: R1 = ror16Bit(R1,(R14+CONST()));break; // ror r1,r14,#*
case 0x91f: R1 = ror16Bit(R1,FETCH());break; // ror r1,#*
case 0x920: R2 = ror16Bit(R2,(R0+CONST()));break; // ror r2,r0,#*
case 0x921: R2 = ror16Bit(R2,(R1+CONST()));break; // ror r2,r1,#*
case 0x922: R2 = ror16Bit(R2,(R2+CONST()));break; // ror r2,r2,#*
case 0x923: R2 = ror16Bit(R2,(R3+CONST()));break; // ror r2,r3,#*
case 0x924: R2 = ror16Bit(R2,(R4+CONST()));break; // ror r2,r4,#*
case 0x925: R2 = ror16Bit(R2,(R5+CONST()));break; // ror r2,r5,#*
case 0x926: R2 = ror16Bit(R2,(R6+CONST()));break; // ror r2,r6,#*
case 0x927: R2 = ror16Bit(R2,(R7+CONST()));break; // ror r2,r7,#*
case 0x928: R2 = ror16Bit(R2,(R8+CONST()));break; // ror r2,r8,#*
case 0x929: R2 = ror16Bit(R2,(R9+CONST()));break; // ror r2,r9,#*
case 0x92a: R2 = ror16Bit(R2,(R10+CONST()));break; // ror r2,r10,#*
case 0x92b: R2 = ror16Bit(R2,(R11+CONST()));break; // ror r2,r11,#*
case 0x92c: R2 = ror16Bit(R2,(R12+CONST()));break; // ror r2,r12,#*
case 0x92d: R2 = ror16Bit(R2,(R13+CONST()));break; // ror r2,r13,#*
case 0x92e: R2 = ror16Bit(R2,(R14+CONST()));break; // ror r2,r14,#*
case 0x92f: R2 = ror16Bit(R2,FETCH());break; // ror r2,#*
case 0x930: R3 = ror16Bit(R3,(R0+CONST()));break; // ror r3,r0,#*
case 0x931: R3 = ror16Bit(R3,(R1+CONST()));break; // ror r3,r1,#*
case 0x932: R3 = ror16Bit(R3,(R2+CONST()));break; // ror r3,r2,#*
case 0x933: R3 = ror16Bit(R3,(R3+CONST()));break; // ror r3,r3,#*
case 0x934: R3 = ror16Bit(R3,(R4+CONST()));break; // ror r3,r4,#*
case 0x935: R3 = ror16Bit(R3,(R5+CONST()));break; // ror r3,r5,#*
case 0x936: R3 = ror16Bit(R3,(R6+CONST()));break; // ror r3,r6,#*
case 0x937: R3 = ror16Bit(R3,(R7+CONST()));break; // ror r3,r7,#*
case 0x938: R3 = ror16Bit(R3,(R8+CONST()));break; // ror r3,r8,#*
case 0x939: R3 = ror16Bit(R3,(R9+CONST()));break; // ror r3,r9,#*
case 0x93a: R3 = ror16Bit(R3,(R10+CONST()));break; // ror r3,r10,#*
case 0x93b: R3 = ror16Bit(R3,(R11+CONST()));break; // ror r3,r11,#*
case 0x93c: R3 = ror16Bit(R3,(R12+CONST()));break; // ror r3,r12,#*
case 0x93d: R3 = ror16Bit(R3,(R13+CONST()));break; // ror r3,r13,#*
case 0x93e: R3 = ror16Bit(R3,(R14+CONST()));break; // ror r3,r14,#*
case 0x93f: R3 = ror16Bit(R3,FETCH());break; // ror r3,#*
case 0x940: R4 = ror16Bit(R4,(R0+CONST()));break; // ror r4,r0,#*
case 0x941: R4 = ror16Bit(R4,(R1+CONST()));break; // ror r4,r1,#*
case 0x942: R4 = ror16Bit(R4,(R2+CONST()));break; // ror r4,r2,#*
case 0x943: R4 = ror16Bit(R4,(R3+CONST()));break; // ror r4,r3,#*
case 0x944: R4 = ror16Bit(R4,(R4+CONST()));break; // ror r4,r4,#*
case 0x945: R4 = ror16Bit(R4,(R5+CONST()));break; // ror r4,r5,#*
case 0x946: R4 = ror16Bit(R4,(R6+CONST()));break; // ror r4,r6,#*
case 0x947: R4 = ror16Bit(R4,(R7+CONST()));break; // ror r4,r7,#*
case 0x948: R4 = ror16Bit(R4,(R8+CONST()));break; // ror r4,r8,#*
case 0x949: R4 = ror16Bit(R4,(R9+CONST()));break; // ror r4,r9,#*
case 0x94a: R4 = ror16Bit(R4,(R10+CONST()));break; // ror r4,r10,#*
case 0x94b: R4 = ror16Bit(R4,(R11+CONST()));break; // ror r4,r11,#*
case 0x94c: R4 = ror16Bit(R4,(R12+CONST()));break; // ror r4,r12,#*
case 0x94d: R4 = ror16Bit(R4,(R13+CONST()));break; // ror r4,r13,#*
case 0x94e: R4 = ror16Bit(R4,(R14+CONST()));break; // ror r4,r14,#*
case 0x94f: R4 = ror16Bit(R4,FETCH());break; // ror r4,#*
case 0x950: R5 = ror16Bit(R5,(R0+CONST()));break; // ror r5,r0,#*
case 0x951: R5 = ror16Bit(R5,(R1+CONST()));break; // ror r5,r1,#*
case 0x952: R5 = ror16Bit(R5,(R2+CONST()));break; // ror r5,r2,#*
case 0x953: R5 = ror16Bit(R5,(R3+CONST()));break; // ror r5,r3,#*
case 0x954: R5 = ror16Bit(R5,(R4+CONST()));break; // ror r5,r4,#*
case 0x955: R5 = ror16Bit(R5,(R5+CONST()));break; // ror r5,r5,#*
case 0x956: R5 = ror16Bit(R5,(R6+CONST()));break; // ror r5,r6,#*
case 0x957: R5 = ror16Bit(R5,(R7+CONST()));break; // ror r5,r7,#*
case 0x958: R5 = ror16Bit(R5,(R8+CONST()));break; // ror r5,r8,#*
case 0x959: R5 = ror16Bit(R5,(R9+CONST()));break; // ror r5,r9,#*
case 0x95a: R5 = ror16Bit(R5,(R10+CONST()));break; // ror r5,r10,#*
case 0x95b: R5 = ror16Bit(R5,(R11+CONST()));break; // ror r5,r11,#*
case 0x95c: R5 = ror16Bit(R5,(R12+CONST()));break; // ror r5,r12,#*
case 0x95d: R5 = ror16Bit(R5,(R13+CONST()));break; // ror r5,r13,#*
case 0x95e: R5 = ror16Bit(R5,(R14+CONST()));break; // ror r5,r14,#*
case 0x95f: R5 = ror16Bit(R5,FETCH());break; // ror r5,#*
case 0x960: R6 = ror16Bit(R6,(R0+CONST()));break; // ror r6,r0,#*
case 0x961: R6 = ror16Bit(R6,(R1+CONST()));break; // ror r6,r1,#*
case 0x962: R6 = ror16Bit(R6,(R2+CONST()));break; // ror r6,r2,#*
case 0x963: R6 = ror16Bit(R6,(R3+CONST()));break; // ror r6,r3,#*
case 0x964: R6 = ror16Bit(R6,(R4+CONST()));break; // ror r6,r4,#*
case 0x965: R6 = ror16Bit(R6,(R5+CONST()));break; // ror r6,r5,#*
case 0x966: R6 = ror16Bit(R6,(R6+CONST()));break; // ror r6,r6,#*
case 0x967: R6 = ror16Bit(R6,(R7+CONST()));break; // ror r6,r7,#*
case 0x968: R6 = ror16Bit(R6,(R8+CONST()));break; // ror r6,r8,#*
case 0x969: R6 = ror16Bit(R6,(R9+CONST()));break; // ror r6,r9,#*
case 0x96a: R6 = ror16Bit(R6,(R10+CONST()));break; // ror r6,r10,#*
case 0x96b: R6 = ror16Bit(R6,(R11+CONST()));break; // ror r6,r11,#*
case 0x96c: R6 = ror16Bit(R6,(R12+CONST()));break; // ror r6,r12,#*
case 0x96d: R6 = ror16Bit(R6,(R13+CONST()));break; // ror r6,r13,#*
case 0x96e: R6 = ror16Bit(R6,(R14+CONST()));break; // ror r6,r14,#*
case 0x96f: R6 = ror16Bit(R6,FETCH());break; // ror r6,#*
case 0x970: R7 = ror16Bit(R7,(R0+CONST()));break; // ror r7,r0,#*
case 0x971: R7 = ror16Bit(R7,(R1+CONST()));break; // ror r7,r1,#*
case 0x972: R7 = ror16Bit(R7,(R2+CONST()));break; // ror r7,r2,#*
case 0x973: R7 = ror16Bit(R7,(R3+CONST()));break; // ror r7,r3,#*
case 0x974: R7 = ror16Bit(R7,(R4+CONST()));break; // ror r7,r4,#*
case 0x975: R7 = ror16Bit(R7,(R5+CONST()));break; // ror r7,r5,#*
case 0x976: R7 = ror16Bit(R7,(R6+CONST()));break; // ror r7,r6,#*
case 0x977: R7 = ror16Bit(R7,(R7+CONST()));break; // ror r7,r7,#*
case 0x978: R7 = ror16Bit(R7,(R8+CONST()));break; // ror r7,r8,#*
case 0x979: R7 = ror16Bit(R7,(R9+CONST()));break; // ror r7,r9,#*
case 0x97a: R7 = ror16Bit(R7,(R10+CONST()));break; // ror r7,r10,#*
case 0x97b: R7 = ror16Bit(R7,(R11+CONST()));break; // ror r7,r11,#*
case 0x97c: R7 = ror16Bit(R7,(R12+CONST()));break; // ror r7,r12,#*
case 0x97d: R7 = ror16Bit(R7,(R13+CONST()));break; // ror r7,r13,#*
case 0x97e: R7 = ror16Bit(R7,(R14+CONST()));break; // ror r7,r14,#*
case 0x97f: R7 = ror16Bit(R7,FETCH());break; // ror r7,#*
case 0x980: R8 = ror16Bit(R8,(R0+CONST()));break; // ror r8,r0,#*
case 0x981: R8 = ror16Bit(R8,(R1+CONST()));break; // ror r8,r1,#*
case 0x982: R8 = ror16Bit(R8,(R2+CONST()));break; // ror r8,r2,#*
case 0x983: R8 = ror16Bit(R8,(R3+CONST()));break; // ror r8,r3,#*
case 0x984: R8 = ror16Bit(R8,(R4+CONST()));break; // ror r8,r4,#*
case 0x985: R8 = ror16Bit(R8,(R5+CONST()));break; // ror r8,r5,#*
case 0x986: R8 = ror16Bit(R8,(R6+CONST()));break; // ror r8,r6,#*
case 0x987: R8 = ror16Bit(R8,(R7+CONST()));break; // ror r8,r7,#*
case 0x988: R8 = ror16Bit(R8,(R8+CONST()));break; // ror r8,r8,#*
case 0x989: R8 = ror16Bit(R8,(R9+CONST()));break; // ror r8,r9,#*
case 0x98a: R8 = ror16Bit(R8,(R10+CONST()));break; // ror r8,r10,#*
case 0x98b: R8 = ror16Bit(R8,(R11+CONST()));break; // ror r8,r11,#*
case 0x98c: R8 = ror16Bit(R8,(R12+CONST()));break; // ror r8,r12,#*
case 0x98d: R8 = ror16Bit(R8,(R13+CONST()));break; // ror r8,r13,#*
case 0x98e: R8 = ror16Bit(R8,(R14+CONST()));break; // ror r8,r14,#*
case 0x98f: R8 = ror16Bit(R8,FETCH());break; // ror r8,#*
case 0x990: R9 = ror16Bit(R9,(R0+CONST()));break; // ror r9,r0,#*
case 0x991: R9 = ror16Bit(R9,(R1+CONST()));break; // ror r9,r1,#*
case 0x992: R9 = ror16Bit(R9,(R2+CONST()));break; // ror r9,r2,#*
case 0x993: R9 = ror16Bit(R9,(R3+CONST()));break; // ror r9,r3,#*
case 0x994: R9 = ror16Bit(R9,(R4+CONST()));break; // ror r9,r4,#*
case 0x995: R9 = ror16Bit(R9,(R5+CONST()));break; // ror r9,r5,#*
case 0x996: R9 = ror16Bit(R9,(R6+CONST()));break; // ror r9,r6,#*
case 0x997: R9 = ror16Bit(R9,(R7+CONST()));break; // ror r9,r7,#*
case 0x998: R9 = ror16Bit(R9,(R8+CONST()));break; // ror r9,r8,#*
case 0x999: R9 = ror16Bit(R9,(R9+CONST()));break; // ror r9,r9,#*
case 0x99a: R9 = ror16Bit(R9,(R10+CONST()));break; // ror r9,r10,#*
case 0x99b: R9 = ror16Bit(R9,(R11+CONST()));break; // ror r9,r11,#*
case 0x99c: R9 = ror16Bit(R9,(R12+CONST()));break; // ror r9,r12,#*
case 0x99d: R9 = ror16Bit(R9,(R13+CONST()));break; // ror r9,r13,#*
case 0x99e: R9 = ror16Bit(R9,(R14+CONST()));break; // ror r9,r14,#*
case 0x99f: R9 = ror16Bit(R9,FETCH());break; // ror r9,#*
case 0x9a0: R10 = ror16Bit(R10,(R0+CONST()));break; // ror r10,r0,#*
case 0x9a1: R10 = ror16Bit(R10,(R1+CONST()));break; // ror r10,r1,#*
case 0x9a2: R10 = ror16Bit(R10,(R2+CONST()));break; // ror r10,r2,#*
case 0x9a3: R10 = ror16Bit(R10,(R3+CONST()));break; // ror r10,r3,#*
case 0x9a4: R10 = ror16Bit(R10,(R4+CONST()));break; // ror r10,r4,#*
case 0x9a5: R10 = ror16Bit(R10,(R5+CONST()));break; // ror r10,r5,#*
case 0x9a6: R10 = ror16Bit(R10,(R6+CONST()));break; // ror r10,r6,#*
case 0x9a7: R10 = ror16Bit(R10,(R7+CONST()));break; // ror r10,r7,#*
case 0x9a8: R10 = ror16Bit(R10,(R8+CONST()));break; // ror r10,r8,#*
case 0x9a9: R10 = ror16Bit(R10,(R9+CONST()));break; // ror r10,r9,#*
case 0x9aa: R10 = ror16Bit(R10,(R10+CONST()));break; // ror r10,r10,#*
case 0x9ab: R10 = ror16Bit(R10,(R11+CONST()));break; // ror r10,r11,#*
case 0x9ac: R10 = ror16Bit(R10,(R12+CONST()));break; // ror r10,r12,#*
case 0x9ad: R10 = ror16Bit(R10,(R13+CONST()));break; // ror r10,r13,#*
case 0x9ae: R10 = ror16Bit(R10,(R14+CONST()));break; // ror r10,r14,#*
case 0x9af: R10 = ror16Bit(R10,FETCH());break; // ror r10,#*
case 0x9b0: R11 = ror16Bit(R11,(R0+CONST()));break; // ror r11,r0,#*
case 0x9b1: R11 = ror16Bit(R11,(R1+CONST()));break; // ror r11,r1,#*
case 0x9b2: R11 = ror16Bit(R11,(R2+CONST()));break; // ror r11,r2,#*
case 0x9b3: R11 = ror16Bit(R11,(R3+CONST()));break; // ror r11,r3,#*
case 0x9b4: R11 = ror16Bit(R11,(R4+CONST()));break; // ror r11,r4,#*
case 0x9b5: R11 = ror16Bit(R11,(R5+CONST()));break; // ror r11,r5,#*
case 0x9b6: R11 = ror16Bit(R11,(R6+CONST()));break; // ror r11,r6,#*
case 0x9b7: R11 = ror16Bit(R11,(R7+CONST()));break; // ror r11,r7,#*
case 0x9b8: R11 = ror16Bit(R11,(R8+CONST()));break; // ror r11,r8,#*
case 0x9b9: R11 = ror16Bit(R11,(R9+CONST()));break; // ror r11,r9,#*
case 0x9ba: R11 = ror16Bit(R11,(R10+CONST()));break; // ror r11,r10,#*
case 0x9bb: R11 = ror16Bit(R11,(R11+CONST()));break; // ror r11,r11,#*
case 0x9bc: R11 = ror16Bit(R11,(R12+CONST()));break; // ror r11,r12,#*
case 0x9bd: R11 = ror16Bit(R11,(R13+CONST()));break; // ror r11,r13,#*
case 0x9be: R11 = ror16Bit(R11,(R14+CONST()));break; // ror r11,r14,#*
case 0x9bf: R11 = ror16Bit(R11,FETCH());break; // ror r11,#*
case 0x9c0: R12 = ror16Bit(R12,(R0+CONST()));break; // ror r12,r0,#*
case 0x9c1: R12 = ror16Bit(R12,(R1+CONST()));break; // ror r12,r1,#*
case 0x9c2: R12 = ror16Bit(R12,(R2+CONST()));break; // ror r12,r2,#*
case 0x9c3: R12 = ror16Bit(R12,(R3+CONST()));break; // ror r12,r3,#*
case 0x9c4: R12 = ror16Bit(R12,(R4+CONST()));break; // ror r12,r4,#*
case 0x9c5: R12 = ror16Bit(R12,(R5+CONST()));break; // ror r12,r5,#*
case 0x9c6: R12 = ror16Bit(R12,(R6+CONST()));break; // ror r12,r6,#*
case 0x9c7: R12 = ror16Bit(R12,(R7+CONST()));break; // ror r12,r7,#*
case 0x9c8: R12 = ror16Bit(R12,(R8+CONST()));break; // ror r12,r8,#*
case 0x9c9: R12 = ror16Bit(R12,(R9+CONST()));break; // ror r12,r9,#*
case 0x9ca: R12 = ror16Bit(R12,(R10+CONST()));break; // ror r12,r10,#*
case 0x9cb: R12 = ror16Bit(R12,(R11+CONST()));break; // ror r12,r11,#*
case 0x9cc: R12 = ror16Bit(R12,(R12+CONST()));break; // ror r12,r12,#*
case 0x9cd: R12 = ror16Bit(R12,(R13+CONST()));break; // ror r12,r13,#*
case 0x9ce: R12 = ror16Bit(R12,(R14+CONST()));break; // ror r12,r14,#*
case 0x9cf: R12 = ror16Bit(R12,FETCH());break; // ror r12,#*
case 0x9d0: R13 = ror16Bit(R13,(R0+CONST()));break; // ror r13,r0,#*
case 0x9d1: R13 = ror16Bit(R13,(R1+CONST()));break; // ror r13,r1,#*
case 0x9d2: R13 = ror16Bit(R13,(R2+CONST()));break; // ror r13,r2,#*
case 0x9d3: R13 = ror16Bit(R13,(R3+CONST()));break; // ror r13,r3,#*
case 0x9d4: R13 = ror16Bit(R13,(R4+CONST()));break; // ror r13,r4,#*
case 0x9d5: R13 = ror16Bit(R13,(R5+CONST()));break; // ror r13,r5,#*
case 0x9d6: R13 = ror16Bit(R13,(R6+CONST()));break; // ror r13,r6,#*
case 0x9d7: R13 = ror16Bit(R13,(R7+CONST()));break; // ror r13,r7,#*
case 0x9d8: R13 = ror16Bit(R13,(R8+CONST()));break; // ror r13,r8,#*
case 0x9d9: R13 = ror16Bit(R13,(R9+CONST()));break; // ror r13,r9,#*
case 0x9da: R13 = ror16Bit(R13,(R10+CONST()));break; // ror r13,r10,#*
case 0x9db: R13 = ror16Bit(R13,(R11+CONST()));break; // ror r13,r11,#*
case 0x9dc: R13 = ror16Bit(R13,(R12+CONST()));break; // ror r13,r12,#*
case 0x9dd: R13 = ror16Bit(R13,(R13+CONST()));break; // ror r13,r13,#*
case 0x9de: R13 = ror16Bit(R13,(R14+CONST()));break; // ror r13,r14,#*
case 0x9df: R13 = ror16Bit(R13,FETCH());break; // ror r13,#*
case 0x9e0: R14 = ror16Bit(R14,(R0+CONST()));break; // ror r14,r0,#*
case 0x9e1: R14 = ror16Bit(R14,(R1+CONST()));break; // ror r14,r1,#*
case 0x9e2: R14 = ror16Bit(R14,(R2+CONST()));break; // ror r14,r2,#*
case 0x9e3: R14 = ror16Bit(R14,(R3+CONST()));break; // ror r14,r3,#*
case 0x9e4: R14 = ror16Bit(R14,(R4+CONST()));break; // ror r14,r4,#*
case 0x9e5: R14 = ror16Bit(R14,(R5+CONST()));break; // ror r14,r5,#*
case 0x9e6: R14 = ror16Bit(R14,(R6+CONST()));break; // ror r14,r6,#*
case 0x9e7: R14 = ror16Bit(R14,(R7+CONST()));break; // ror r14,r7,#*
case 0x9e8: R14 = ror16Bit(R14,(R8+CONST()));break; // ror r14,r8,#*
case 0x9e9: R14 = ror16Bit(R14,(R9+CONST()));break; // ror r14,r9,#*
case 0x9ea: R14 = ror16Bit(R14,(R10+CONST()));break; // ror r14,r10,#*
case 0x9eb: R14 = ror16Bit(R14,(R11+CONST()));break; // ror r14,r11,#*
case 0x9ec: R14 = ror16Bit(R14,(R12+CONST()));break; // ror r14,r12,#*
case 0x9ed: R14 = ror16Bit(R14,(R13+CONST()));break; // ror r14,r13,#*
case 0x9ee: R14 = ror16Bit(R14,(R14+CONST()));break; // ror r14,r14,#*
case 0x9ef: R14 = ror16Bit(R14,FETCH());break; // ror r14,#*
case 0x9f0: R15 = ror16Bit(R15,(R0+CONST()));break; // ror r15,r0,#*
case 0x9f1: R15 = ror16Bit(R15,(R1+CONST()));break; // ror r15,r1,#*
case 0x9f2: R15 = ror16Bit(R15,(R2+CONST()));break; // ror r15,r2,#*
case 0x9f3: R15 = ror16Bit(R15,(R3+CONST()));break; // ror r15,r3,#*
case 0x9f4: R15 = ror16Bit(R15,(R4+CONST()));break; // ror r15,r4,#*
case 0x9f5: R15 = ror16Bit(R15,(R5+CONST()));break; // ror r15,r5,#*
case 0x9f6: R15 = ror16Bit(R15,(R6+CONST()));break; // ror r15,r6,#*
case 0x9f7: R15 = ror16Bit(R15,(R7+CONST()));break; // ror r15,r7,#*
case 0x9f8: R15 = ror16Bit(R15,(R8+CONST()));break; // ror r15,r8,#*
case 0x9f9: R15 = ror16Bit(R15,(R9+CONST()));break; // ror r15,r9,#*
case 0x9fa: R15 = ror16Bit(R15,(R10+CONST()));break; // ror r15,r10,#*
case 0x9fb: R15 = ror16Bit(R15,(R11+CONST()));break; // ror r15,r11,#*
case 0x9fc: R15 = ror16Bit(R15,(R12+CONST()));break; // ror r15,r12,#*
case 0x9fd: R15 = ror16Bit(R15,(R13+CONST()));break; // ror r15,r13,#*
case 0x9fe: R15 = ror16Bit(R15,(R14+CONST()));break; // ror r15,r14,#*
case 0x9ff: R15 = ror16Bit(R15,FETCH());break; // ror r15,#*
case 0xa00: temp16 = (R0+CONST());R0 = R15;R15 = temp16;break; // brl r0,r0,#*
case 0xa01: temp16 = (R1+CONST());R0 = R15;R15 = temp16;break; // brl r0,r1,#*
case 0xa02: temp16 = (R2+CONST());R0 = R15;R15 = temp16;break; // brl r0,r2,#*
case 0xa03: temp16 = (R3+CONST());R0 = R15;R15 = temp16;break; // brl r0,r3,#*
case 0xa04: temp16 = (R4+CONST());R0 = R15;R15 = temp16;break; // brl r0,r4,#*
case 0xa05: temp16 = (R5+CONST());R0 = R15;R15 = temp16;break; // brl r0,r5,#*
case 0xa06: temp16 = (R6+CONST());R0 = R15;R15 = temp16;break; // brl r0,r6,#*
case 0xa07: temp16 = (R7+CONST());R0 = R15;R15 = temp16;break; // brl r0,r7,#*
case 0xa08: temp16 = (R8+CONST());R0 = R15;R15 = temp16;break; // brl r0,r8,#*
case 0xa09: temp16 = (R9+CONST());R0 = R15;R15 = temp16;break; // brl r0,r9,#*
case 0xa0a: temp16 = (R10+CONST());R0 = R15;R15 = temp16;break; // brl r0,r10,#*
case 0xa0b: temp16 = (R11+CONST());R0 = R15;R15 = temp16;break; // brl r0,r11,#*
case 0xa0c: temp16 = (R12+CONST());R0 = R15;R15 = temp16;break; // brl r0,r12,#*
case 0xa0d: temp16 = (R13+CONST());R0 = R15;R15 = temp16;break; // brl r0,r13,#*
case 0xa0e: temp16 = (R14+CONST());R0 = R15;R15 = temp16;break; // brl r0,r14,#*
case 0xa0f: temp16 = FETCH();R0 = R15;R15 = temp16;break; // brl r0,#*
case 0xa10: temp16 = (R0+CONST());R1 = R15;R15 = temp16;break; // brl r1,r0,#*
case 0xa11: temp16 = (R1+CONST());R1 = R15;R15 = temp16;break; // brl r1,r1,#*
case 0xa12: temp16 = (R2+CONST());R1 = R15;R15 = temp16;break; // brl r1,r2,#*
case 0xa13: temp16 = (R3+CONST());R1 = R15;R15 = temp16;break; // brl r1,r3,#*
case 0xa14: temp16 = (R4+CONST());R1 = R15;R15 = temp16;break; // brl r1,r4,#*
case 0xa15: temp16 = (R5+CONST());R1 = R15;R15 = temp16;break; // brl r1,r5,#*
case 0xa16: temp16 = (R6+CONST());R1 = R15;R15 = temp16;break; // brl r1,r6,#*
case 0xa17: temp16 = (R7+CONST());R1 = R15;R15 = temp16;break; // brl r1,r7,#*
case 0xa18: temp16 = (R8+CONST());R1 = R15;R15 = temp16;break; // brl r1,r8,#*
case 0xa19: temp16 = (R9+CONST());R1 = R15;R15 = temp16;break; // brl r1,r9,#*
case 0xa1a: temp16 = (R10+CONST());R1 = R15;R15 = temp16;break; // brl r1,r10,#*
case 0xa1b: temp16 = (R11+CONST());R1 = R15;R15 = temp16;break; // brl r1,r11,#*
case 0xa1c: temp16 = (R12+CONST());R1 = R15;R15 = temp16;break; // brl r1,r12,#*
case 0xa1d: temp16 = (R13+CONST());R1 = R15;R15 = temp16;break; // brl r1,r13,#*
case 0xa1e: temp16 = (R14+CONST());R1 = R15;R15 = temp16;break; // brl r1,r14,#*
case 0xa1f: temp16 = FETCH();R1 = R15;R15 = temp16;break; // brl r1,#*
case 0xa20: temp16 = (R0+CONST());R2 = R15;R15 = temp16;break; // brl r2,r0,#*
case 0xa21: temp16 = (R1+CONST());R2 = R15;R15 = temp16;break; // brl r2,r1,#*
case 0xa22: temp16 = (R2+CONST());R2 = R15;R15 = temp16;break; // brl r2,r2,#*
case 0xa23: temp16 = (R3+CONST());R2 = R15;R15 = temp16;break; // brl r2,r3,#*
case 0xa24: temp16 = (R4+CONST());R2 = R15;R15 = temp16;break; // brl r2,r4,#*
case 0xa25: temp16 = (R5+CONST());R2 = R15;R15 = temp16;break; // brl r2,r5,#*
case 0xa26: temp16 = (R6+CONST());R2 = R15;R15 = temp16;break; // brl r2,r6,#*
case 0xa27: temp16 = (R7+CONST());R2 = R15;R15 = temp16;break; // brl r2,r7,#*
case 0xa28: temp16 = (R8+CONST());R2 = R15;R15 = temp16;break; // brl r2,r8,#*
case 0xa29: temp16 = (R9+CONST());R2 = R15;R15 = temp16;break; // brl r2,r9,#*
case 0xa2a: temp16 = (R10+CONST());R2 = R15;R15 = temp16;break; // brl r2,r10,#*
case 0xa2b: temp16 = (R11+CONST());R2 = R15;R15 = temp16;break; // brl r2,r11,#*
case 0xa2c: temp16 = (R12+CONST());R2 = R15;R15 = temp16;break; // brl r2,r12,#*
case 0xa2d: temp16 = (R13+CONST());R2 = R15;R15 = temp16;break; // brl r2,r13,#*
case 0xa2e: temp16 = (R14+CONST());R2 = R15;R15 = temp16;break; // brl r2,r14,#*
case 0xa2f: temp16 = FETCH();R2 = R15;R15 = temp16;break; // brl r2,#*
case 0xa30: temp16 = (R0+CONST());R3 = R15;R15 = temp16;break; // brl r3,r0,#*
case 0xa31: temp16 = (R1+CONST());R3 = R15;R15 = temp16;break; // brl r3,r1,#*
case 0xa32: temp16 = (R2+CONST());R3 = R15;R15 = temp16;break; // brl r3,r2,#*
case 0xa33: temp16 = (R3+CONST());R3 = R15;R15 = temp16;break; // brl r3,r3,#*
case 0xa34: temp16 = (R4+CONST());R3 = R15;R15 = temp16;break; // brl r3,r4,#*
case 0xa35: temp16 = (R5+CONST());R3 = R15;R15 = temp16;break; // brl r3,r5,#*
case 0xa36: temp16 = (R6+CONST());R3 = R15;R15 = temp16;break; // brl r3,r6,#*
case 0xa37: temp16 = (R7+CONST());R3 = R15;R15 = temp16;break; // brl r3,r7,#*
case 0xa38: temp16 = (R8+CONST());R3 = R15;R15 = temp16;break; // brl r3,r8,#*
case 0xa39: temp16 = (R9+CONST());R3 = R15;R15 = temp16;break; // brl r3,r9,#*
case 0xa3a: temp16 = (R10+CONST());R3 = R15;R15 = temp16;break; // brl r3,r10,#*
case 0xa3b: temp16 = (R11+CONST());R3 = R15;R15 = temp16;break; // brl r3,r11,#*
case 0xa3c: temp16 = (R12+CONST());R3 = R15;R15 = temp16;break; // brl r3,r12,#*
case 0xa3d: temp16 = (R13+CONST());R3 = R15;R15 = temp16;break; // brl r3,r13,#*
case 0xa3e: temp16 = (R14+CONST());R3 = R15;R15 = temp16;break; // brl r3,r14,#*
case 0xa3f: temp16 = FETCH();R3 = R15;R15 = temp16;break; // brl r3,#*
case 0xa40: temp16 = (R0+CONST());R4 = R15;R15 = temp16;break; // brl r4,r0,#*
case 0xa41: temp16 = (R1+CONST());R4 = R15;R15 = temp16;break; // brl r4,r1,#*
case 0xa42: temp16 = (R2+CONST());R4 = R15;R15 = temp16;break; // brl r4,r2,#*
case 0xa43: temp16 = (R3+CONST());R4 = R15;R15 = temp16;break; // brl r4,r3,#*
case 0xa44: temp16 = (R4+CONST());R4 = R15;R15 = temp16;break; // brl r4,r4,#*
case 0xa45: temp16 = (R5+CONST());R4 = R15;R15 = temp16;break; // brl r4,r5,#*
case 0xa46: temp16 = (R6+CONST());R4 = R15;R15 = temp16;break; // brl r4,r6,#*
case 0xa47: temp16 = (R7+CONST());R4 = R15;R15 = temp16;break; // brl r4,r7,#*
case 0xa48: temp16 = (R8+CONST());R4 = R15;R15 = temp16;break; // brl r4,r8,#*
case 0xa49: temp16 = (R9+CONST());R4 = R15;R15 = temp16;break; // brl r4,r9,#*
case 0xa4a: temp16 = (R10+CONST());R4 = R15;R15 = temp16;break; // brl r4,r10,#*
case 0xa4b: temp16 = (R11+CONST());R4 = R15;R15 = temp16;break; // brl r4,r11,#*
case 0xa4c: temp16 = (R12+CONST());R4 = R15;R15 = temp16;break; // brl r4,r12,#*
case 0xa4d: temp16 = (R13+CONST());R4 = R15;R15 = temp16;break; // brl r4,r13,#*
case 0xa4e: temp16 = (R14+CONST());R4 = R15;R15 = temp16;break; // brl r4,r14,#*
case 0xa4f: temp16 = FETCH();R4 = R15;R15 = temp16;break; // brl r4,#*
case 0xa50: temp16 = (R0+CONST());R5 = R15;R15 = temp16;break; // brl r5,r0,#*
case 0xa51: temp16 = (R1+CONST());R5 = R15;R15 = temp16;break; // brl r5,r1,#*
case 0xa52: temp16 = (R2+CONST());R5 = R15;R15 = temp16;break; // brl r5,r2,#*
case 0xa53: temp16 = (R3+CONST());R5 = R15;R15 = temp16;break; // brl r5,r3,#*
case 0xa54: temp16 = (R4+CONST());R5 = R15;R15 = temp16;break; // brl r5,r4,#*
case 0xa55: temp16 = (R5+CONST());R5 = R15;R15 = temp16;break; // brl r5,r5,#*
case 0xa56: temp16 = (R6+CONST());R5 = R15;R15 = temp16;break; // brl r5,r6,#*
case 0xa57: temp16 = (R7+CONST());R5 = R15;R15 = temp16;break; // brl r5,r7,#*
case 0xa58: temp16 = (R8+CONST());R5 = R15;R15 = temp16;break; // brl r5,r8,#*
case 0xa59: temp16 = (R9+CONST());R5 = R15;R15 = temp16;break; // brl r5,r9,#*
case 0xa5a: temp16 = (R10+CONST());R5 = R15;R15 = temp16;break; // brl r5,r10,#*
case 0xa5b: temp16 = (R11+CONST());R5 = R15;R15 = temp16;break; // brl r5,r11,#*
case 0xa5c: temp16 = (R12+CONST());R5 = R15;R15 = temp16;break; // brl r5,r12,#*
case 0xa5d: temp16 = (R13+CONST());R5 = R15;R15 = temp16;break; // brl r5,r13,#*
case 0xa5e: temp16 = (R14+CONST());R5 = R15;R15 = temp16;break; // brl r5,r14,#*
case 0xa5f: temp16 = FETCH();R5 = R15;R15 = temp16;break; // brl r5,#*
case 0xa60: temp16 = (R0+CONST());R6 = R15;R15 = temp16;break; // brl r6,r0,#*
case 0xa61: temp16 = (R1+CONST());R6 = R15;R15 = temp16;break; // brl r6,r1,#*
case 0xa62: temp16 = (R2+CONST());R6 = R15;R15 = temp16;break; // brl r6,r2,#*
case 0xa63: temp16 = (R3+CONST());R6 = R15;R15 = temp16;break; // brl r6,r3,#*
case 0xa64: temp16 = (R4+CONST());R6 = R15;R15 = temp16;break; // brl r6,r4,#*
case 0xa65: temp16 = (R5+CONST());R6 = R15;R15 = temp16;break; // brl r6,r5,#*
case 0xa66: temp16 = (R6+CONST());R6 = R15;R15 = temp16;break; // brl r6,r6,#*
case 0xa67: temp16 = (R7+CONST());R6 = R15;R15 = temp16;break; // brl r6,r7,#*
case 0xa68: temp16 = (R8+CONST());R6 = R15;R15 = temp16;break; // brl r6,r8,#*
case 0xa69: temp16 = (R9+CONST());R6 = R15;R15 = temp16;break; // brl r6,r9,#*
case 0xa6a: temp16 = (R10+CONST());R6 = R15;R15 = temp16;break; // brl r6,r10,#*
case 0xa6b: temp16 = (R11+CONST());R6 = R15;R15 = temp16;break; // brl r6,r11,#*
case 0xa6c: temp16 = (R12+CONST());R6 = R15;R15 = temp16;break; // brl r6,r12,#*
case 0xa6d: temp16 = (R13+CONST());R6 = R15;R15 = temp16;break; // brl r6,r13,#*
case 0xa6e: temp16 = (R14+CONST());R6 = R15;R15 = temp16;break; // brl r6,r14,#*
case 0xa6f: temp16 = FETCH();R6 = R15;R15 = temp16;break; // brl r6,#*
case 0xa70: temp16 = (R0+CONST());R7 = R15;R15 = temp16;break; // brl r7,r0,#*
case 0xa71: temp16 = (R1+CONST());R7 = R15;R15 = temp16;break; // brl r7,r1,#*
case 0xa72: temp16 = (R2+CONST());R7 = R15;R15 = temp16;break; // brl r7,r2,#*
case 0xa73: temp16 = (R3+CONST());R7 = R15;R15 = temp16;break; // brl r7,r3,#*
case 0xa74: temp16 = (R4+CONST());R7 = R15;R15 = temp16;break; // brl r7,r4,#*
case 0xa75: temp16 = (R5+CONST());R7 = R15;R15 = temp16;break; // brl r7,r5,#*
case 0xa76: temp16 = (R6+CONST());R7 = R15;R15 = temp16;break; // brl r7,r6,#*
case 0xa77: temp16 = (R7+CONST());R7 = R15;R15 = temp16;break; // brl r7,r7,#*
case 0xa78: temp16 = (R8+CONST());R7 = R15;R15 = temp16;break; // brl r7,r8,#*
case 0xa79: temp16 = (R9+CONST());R7 = R15;R15 = temp16;break; // brl r7,r9,#*
case 0xa7a: temp16 = (R10+CONST());R7 = R15;R15 = temp16;break; // brl r7,r10,#*
case 0xa7b: temp16 = (R11+CONST());R7 = R15;R15 = temp16;break; // brl r7,r11,#*
case 0xa7c: temp16 = (R12+CONST());R7 = R15;R15 = temp16;break; // brl r7,r12,#*
case 0xa7d: temp16 = (R13+CONST());R7 = R15;R15 = temp16;break; // brl r7,r13,#*
case 0xa7e: temp16 = (R14+CONST());R7 = R15;R15 = temp16;break; // brl r7,r14,#*
case 0xa7f: temp16 = FETCH();R7 = R15;R15 = temp16;break; // brl r7,#*
case 0xa80: temp16 = (R0+CONST());R8 = R15;R15 = temp16;break; // brl r8,r0,#*
case 0xa81: temp16 = (R1+CONST());R8 = R15;R15 = temp16;break; // brl r8,r1,#*
case 0xa82: temp16 = (R2+CONST());R8 = R15;R15 = temp16;break; // brl r8,r2,#*
case 0xa83: temp16 = (R3+CONST());R8 = R15;R15 = temp16;break; // brl r8,r3,#*
case 0xa84: temp16 = (R4+CONST());R8 = R15;R15 = temp16;break; // brl r8,r4,#*
case 0xa85: temp16 = (R5+CONST());R8 = R15;R15 = temp16;break; // brl r8,r5,#*
case 0xa86: temp16 = (R6+CONST());R8 = R15;R15 = temp16;break; // brl r8,r6,#*
case 0xa87: temp16 = (R7+CONST());R8 = R15;R15 = temp16;break; // brl r8,r7,#*
case 0xa88: temp16 = (R8+CONST());R8 = R15;R15 = temp16;break; // brl r8,r8,#*
case 0xa89: temp16 = (R9+CONST());R8 = R15;R15 = temp16;break; // brl r8,r9,#*
case 0xa8a: temp16 = (R10+CONST());R8 = R15;R15 = temp16;break; // brl r8,r10,#*
case 0xa8b: temp16 = (R11+CONST());R8 = R15;R15 = temp16;break; // brl r8,r11,#*
case 0xa8c: temp16 = (R12+CONST());R8 = R15;R15 = temp16;break; // brl r8,r12,#*
case 0xa8d: temp16 = (R13+CONST());R8 = R15;R15 = temp16;break; // brl r8,r13,#*
case 0xa8e: temp16 = (R14+CONST());R8 = R15;R15 = temp16;break; // brl r8,r14,#*
case 0xa8f: temp16 = FETCH();R8 = R15;R15 = temp16;break; // brl r8,#*
case 0xa90: temp16 = (R0+CONST());R9 = R15;R15 = temp16;break; // brl r9,r0,#*
case 0xa91: temp16 = (R1+CONST());R9 = R15;R15 = temp16;break; // brl r9,r1,#*
case 0xa92: temp16 = (R2+CONST());R9 = R15;R15 = temp16;break; // brl r9,r2,#*
case 0xa93: temp16 = (R3+CONST());R9 = R15;R15 = temp16;break; // brl r9,r3,#*
case 0xa94: temp16 = (R4+CONST());R9 = R15;R15 = temp16;break; // brl r9,r4,#*
case 0xa95: temp16 = (R5+CONST());R9 = R15;R15 = temp16;break; // brl r9,r5,#*
case 0xa96: temp16 = (R6+CONST());R9 = R15;R15 = temp16;break; // brl r9,r6,#*
case 0xa97: temp16 = (R7+CONST());R9 = R15;R15 = temp16;break; // brl r9,r7,#*
case 0xa98: temp16 = (R8+CONST());R9 = R15;R15 = temp16;break; // brl r9,r8,#*
case 0xa99: temp16 = (R9+CONST());R9 = R15;R15 = temp16;break; // brl r9,r9,#*
case 0xa9a: temp16 = (R10+CONST());R9 = R15;R15 = temp16;break; // brl r9,r10,#*
case 0xa9b: temp16 = (R11+CONST());R9 = R15;R15 = temp16;break; // brl r9,r11,#*
case 0xa9c: temp16 = (R12+CONST());R9 = R15;R15 = temp16;break; // brl r9,r12,#*
case 0xa9d: temp16 = (R13+CONST());R9 = R15;R15 = temp16;break; // brl r9,r13,#*
case 0xa9e: temp16 = (R14+CONST());R9 = R15;R15 = temp16;break; // brl r9,r14,#*
case 0xa9f: temp16 = FETCH();R9 = R15;R15 = temp16;break; // brl r9,#*
case 0xaa0: temp16 = (R0+CONST());R10 = R15;R15 = temp16;break; // brl r10,r0,#*
case 0xaa1: temp16 = (R1+CONST());R10 = R15;R15 = temp16;break; // brl r10,r1,#*
case 0xaa2: temp16 = (R2+CONST());R10 = R15;R15 = temp16;break; // brl r10,r2,#*
case 0xaa3: temp16 = (R3+CONST());R10 = R15;R15 = temp16;break; // brl r10,r3,#*
case 0xaa4: temp16 = (R4+CONST());R10 = R15;R15 = temp16;break; // brl r10,r4,#*
case 0xaa5: temp16 = (R5+CONST());R10 = R15;R15 = temp16;break; // brl r10,r5,#*
case 0xaa6: temp16 = (R6+CONST());R10 = R15;R15 = temp16;break; // brl r10,r6,#*
case 0xaa7: temp16 = (R7+CONST());R10 = R15;R15 = temp16;break; // brl r10,r7,#*
case 0xaa8: temp16 = (R8+CONST());R10 = R15;R15 = temp16;break; // brl r10,r8,#*
case 0xaa9: temp16 = (R9+CONST());R10 = R15;R15 = temp16;break; // brl r10,r9,#*
case 0xaaa: temp16 = (R10+CONST());R10 = R15;R15 = temp16;break; // brl r10,r10,#*
case 0xaab: temp16 = (R11+CONST());R10 = R15;R15 = temp16;break; // brl r10,r11,#*
case 0xaac: temp16 = (R12+CONST());R10 = R15;R15 = temp16;break; // brl r10,r12,#*
case 0xaad: temp16 = (R13+CONST());R10 = R15;R15 = temp16;break; // brl r10,r13,#*
case 0xaae: temp16 = (R14+CONST());R10 = R15;R15 = temp16;break; // brl r10,r14,#*
case 0xaaf: temp16 = FETCH();R10 = R15;R15 = temp16;break; // brl r10,#*
case 0xab0: temp16 = (R0+CONST());R11 = R15;R15 = temp16;break; // brl r11,r0,#*
case 0xab1: temp16 = (R1+CONST());R11 = R15;R15 = temp16;break; // brl r11,r1,#*
case 0xab2: temp16 = (R2+CONST());R11 = R15;R15 = temp16;break; // brl r11,r2,#*
case 0xab3: temp16 = (R3+CONST());R11 = R15;R15 = temp16;break; // brl r11,r3,#*
case 0xab4: temp16 = (R4+CONST());R11 = R15;R15 = temp16;break; // brl r11,r4,#*
case 0xab5: temp16 = (R5+CONST());R11 = R15;R15 = temp16;break; // brl r11,r5,#*
case 0xab6: temp16 = (R6+CONST());R11 = R15;R15 = temp16;break; // brl r11,r6,#*
case 0xab7: temp16 = (R7+CONST());R11 = R15;R15 = temp16;break; // brl r11,r7,#*
case 0xab8: temp16 = (R8+CONST());R11 = R15;R15 = temp16;break; // brl r11,r8,#*
case 0xab9: temp16 = (R9+CONST());R11 = R15;R15 = temp16;break; // brl r11,r9,#*
case 0xaba: temp16 = (R10+CONST());R11 = R15;R15 = temp16;break; // brl r11,r10,#*
case 0xabb: temp16 = (R11+CONST());R11 = R15;R15 = temp16;break; // brl r11,r11,#*
case 0xabc: temp16 = (R12+CONST());R11 = R15;R15 = temp16;break; // brl r11,r12,#*
case 0xabd: temp16 = (R13+CONST());R11 = R15;R15 = temp16;break; // brl r11,r13,#*
case 0xabe: temp16 = (R14+CONST());R11 = R15;R15 = temp16;break; // brl r11,r14,#*
case 0xabf: temp16 = FETCH();R11 = R15;R15 = temp16;break; // brl r11,#*
case 0xac0: temp16 = (R0+CONST());R12 = R15;R15 = temp16;break; // brl r12,r0,#*
case 0xac1: temp16 = (R1+CONST());R12 = R15;R15 = temp16;break; // brl r12,r1,#*
case 0xac2: temp16 = (R2+CONST());R12 = R15;R15 = temp16;break; // brl r12,r2,#*
case 0xac3: temp16 = (R3+CONST());R12 = R15;R15 = temp16;break; // brl r12,r3,#*
case 0xac4: temp16 = (R4+CONST());R12 = R15;R15 = temp16;break; // brl r12,r4,#*
case 0xac5: temp16 = (R5+CONST());R12 = R15;R15 = temp16;break; // brl r12,r5,#*
case 0xac6: temp16 = (R6+CONST());R12 = R15;R15 = temp16;break; // brl r12,r6,#*
case 0xac7: temp16 = (R7+CONST());R12 = R15;R15 = temp16;break; // brl r12,r7,#*
case 0xac8: temp16 = (R8+CONST());R12 = R15;R15 = temp16;break; // brl r12,r8,#*
case 0xac9: temp16 = (R9+CONST());R12 = R15;R15 = temp16;break; // brl r12,r9,#*
case 0xaca: temp16 = (R10+CONST());R12 = R15;R15 = temp16;break; // brl r12,r10,#*
case 0xacb: temp16 = (R11+CONST());R12 = R15;R15 = temp16;break; // brl r12,r11,#*
case 0xacc: temp16 = (R12+CONST());R12 = R15;R15 = temp16;break; // brl r12,r12,#*
case 0xacd: temp16 = (R13+CONST());R12 = R15;R15 = temp16;break; // brl r12,r13,#*
case 0xace: temp16 = (R14+CONST());R12 = R15;R15 = temp16;break; // brl r12,r14,#*
case 0xacf: temp16 = FETCH();R12 = R15;R15 = temp16;break; // brl r12,#*
case 0xad0: temp16 = (R0+CONST());R13 = R15;R15 = temp16;break; // brl r13,r0,#*
case 0xad1: temp16 = (R1+CONST());R13 = R15;R15 = temp16;break; // brl r13,r1,#*
case 0xad2: temp16 = (R2+CONST());R13 = R15;R15 = temp16;break; // brl r13,r2,#*
case 0xad3: temp16 = (R3+CONST());R13 = R15;R15 = temp16;break; // brl r13,r3,#*
case 0xad4: temp16 = (R4+CONST());R13 = R15;R15 = temp16;break; // brl r13,r4,#*
case 0xad5: temp16 = (R5+CONST());R13 = R15;R15 = temp16;break; // brl r13,r5,#*
case 0xad6: temp16 = (R6+CONST());R13 = R15;R15 = temp16;break; // brl r13,r6,#*
case 0xad7: temp16 = (R7+CONST());R13 = R15;R15 = temp16;break; // brl r13,r7,#*
case 0xad8: temp16 = (R8+CONST());R13 = R15;R15 = temp16;break; // brl r13,r8,#*
case 0xad9: temp16 = (R9+CONST());R13 = R15;R15 = temp16;break; // brl r13,r9,#*
case 0xada: temp16 = (R10+CONST());R13 = R15;R15 = temp16;break; // brl r13,r10,#*
case 0xadb: temp16 = (R11+CONST());R13 = R15;R15 = temp16;break; // brl r13,r11,#*
case 0xadc: temp16 = (R12+CONST());R13 = R15;R15 = temp16;break; // brl r13,r12,#*
case 0xadd: temp16 = (R13+CONST());R13 = R15;R15 = temp16;break; // brl r13,r13,#*
case 0xade: temp16 = (R14+CONST());R13 = R15;R15 = temp16;break; // brl r13,r14,#*
case 0xadf: temp16 = FETCH();R13 = R15;R15 = temp16;break; // brl r13,#*
case 0xae0: temp16 = (R0+CONST());R14 = R15;R15 = temp16;break; // brl r14,r0,#*
case 0xae1: temp16 = (R1+CONST());R14 = R15;R15 = temp16;break; // brl r14,r1,#*
case 0xae2: temp16 = (R2+CONST());R14 = R15;R15 = temp16;break; // brl r14,r2,#*
case 0xae3: temp16 = (R3+CONST());R14 = R15;R15 = temp16;break; // brl r14,r3,#*
case 0xae4: temp16 = (R4+CONST());R14 = R15;R15 = temp16;break; // brl r14,r4,#*
case 0xae5: temp16 = (R5+CONST());R14 = R15;R15 = temp16;break; // brl r14,r5,#*
case 0xae6: temp16 = (R6+CONST());R14 = R15;R15 = temp16;break; // brl r14,r6,#*
case 0xae7: temp16 = (R7+CONST());R14 = R15;R15 = temp16;break; // brl r14,r7,#*
case 0xae8: temp16 = (R8+CONST());R14 = R15;R15 = temp16;break; // brl r14,r8,#*
case 0xae9: temp16 = (R9+CONST());R14 = R15;R15 = temp16;break; // brl r14,r9,#*
case 0xaea: temp16 = (R10+CONST());R14 = R15;R15 = temp16;break; // brl r14,r10,#*
case 0xaeb: temp16 = (R11+CONST());R14 = R15;R15 = temp16;break; // brl r14,r11,#*
case 0xaec: temp16 = (R12+CONST());R14 = R15;R15 = temp16;break; // brl r14,r12,#*
case 0xaed: temp16 = (R13+CONST());R14 = R15;R15 = temp16;break; // brl r14,r13,#*
case 0xaee: temp16 = (R14+CONST());R14 = R15;R15 = temp16;break; // brl r14,r14,#*
case 0xaef: temp16 = FETCH();R14 = R15;R15 = temp16;break; // brl r14,#*
case 0xaf0: temp16 = (R0+CONST());R15 = R15;R15 = temp16;break; // brl r15,r0,#*
case 0xaf1: temp16 = (R1+CONST());R15 = R15;R15 = temp16;break; // brl r15,r1,#*
case 0xaf2: temp16 = (R2+CONST());R15 = R15;R15 = temp16;break; // brl r15,r2,#*
case 0xaf3: temp16 = (R3+CONST());R15 = R15;R15 = temp16;break; // brl r15,r3,#*
case 0xaf4: temp16 = (R4+CONST());R15 = R15;R15 = temp16;break; // brl r15,r4,#*
case 0xaf5: temp16 = (R5+CONST());R15 = R15;R15 = temp16;break; // brl r15,r5,#*
case 0xaf6: temp16 = (R6+CONST());R15 = R15;R15 = temp16;break; // brl r15,r6,#*
case 0xaf7: temp16 = (R7+CONST());R15 = R15;R15 = temp16;break; // brl r15,r7,#*
case 0xaf8: temp16 = (R8+CONST());R15 = R15;R15 = temp16;break; // brl r15,r8,#*
case 0xaf9: temp16 = (R9+CONST());R15 = R15;R15 = temp16;break; // brl r15,r9,#*
case 0xafa: temp16 = (R10+CONST());R15 = R15;R15 = temp16;break; // brl r15,r10,#*
case 0xafb: temp16 = (R11+CONST());R15 = R15;R15 = temp16;break; // brl r15,r11,#*
case 0xafc: temp16 = (R12+CONST());R15 = R15;R15 = temp16;break; // brl r15,r12,#*
case 0xafd: temp16 = (R13+CONST());R15 = R15;R15 = temp16;break; // brl r15,r13,#*
case 0xafe: temp16 = (R14+CONST());R15 = R15;R15 = temp16;break; // brl r15,r14,#*
case 0xaff: temp16 = FETCH();R15 = R15;R15 = temp16;break; // brl r15,#*
case 0xb00: SKIP(R0 == (R0+CONST()));break; // skeq r0,r0,#*
case 0xb01: SKIP(R0 == (R1+CONST()));break; // skeq r0,r1,#*
case 0xb02: SKIP(R0 == (R2+CONST()));break; // skeq r0,r2,#*
case 0xb03: SKIP(R0 == (R3+CONST()));break; // skeq r0,r3,#*
case 0xb04: SKIP(R0 == (R4+CONST()));break; // skeq r0,r4,#*
case 0xb05: SKIP(R0 == (R5+CONST()));break; // skeq r0,r5,#*
case 0xb06: SKIP(R0 == (R6+CONST()));break; // skeq r0,r6,#*
case 0xb07: SKIP(R0 == (R7+CONST()));break; // skeq r0,r7,#*
case 0xb08: SKIP(R0 == (R8+CONST()));break; // skeq r0,r8,#*
case 0xb09: SKIP(R0 == (R9+CONST()));break; // skeq r0,r9,#*
case 0xb0a: SKIP(R0 == (R10+CONST()));break; // skeq r0,r10,#*
case 0xb0b: SKIP(R0 == (R11+CONST()));break; // skeq r0,r11,#*
case 0xb0c: SKIP(R0 == (R12+CONST()));break; // skeq r0,r12,#*
case 0xb0d: SKIP(R0 == (R13+CONST()));break; // skeq r0,r13,#*
case 0xb0e: SKIP(R0 == (R14+CONST()));break; // skeq r0,r14,#*
case 0xb0f: SKIP(R0 == FETCH());break; // skeq r0,#*
case 0xb10: SKIP(R1 == (R0+CONST()));break; // skeq r1,r0,#*
case 0xb11: SKIP(R1 == (R1+CONST()));break; // skeq r1,r1,#*
case 0xb12: SKIP(R1 == (R2+CONST()));break; // skeq r1,r2,#*
case 0xb13: SKIP(R1 == (R3+CONST()));break; // skeq r1,r3,#*
case 0xb14: SKIP(R1 == (R4+CONST()));break; // skeq r1,r4,#*
case 0xb15: SKIP(R1 == (R5+CONST()));break; // skeq r1,r5,#*
case 0xb16: SKIP(R1 == (R6+CONST()));break; // skeq r1,r6,#*
case 0xb17: SKIP(R1 == (R7+CONST()));break; // skeq r1,r7,#*
case 0xb18: SKIP(R1 == (R8+CONST()));break; // skeq r1,r8,#*
case 0xb19: SKIP(R1 == (R9+CONST()));break; // skeq r1,r9,#*
case 0xb1a: SKIP(R1 == (R10+CONST()));break; // skeq r1,r10,#*
case 0xb1b: SKIP(R1 == (R11+CONST()));break; // skeq r1,r11,#*
case 0xb1c: SKIP(R1 == (R12+CONST()));break; // skeq r1,r12,#*
case 0xb1d: SKIP(R1 == (R13+CONST()));break; // skeq r1,r13,#*
case 0xb1e: SKIP(R1 == (R14+CONST()));break; // skeq r1,r14,#*
case 0xb1f: SKIP(R1 == FETCH());break; // skeq r1,#*
case 0xb20: SKIP(R2 == (R0+CONST()));break; // skeq r2,r0,#*
case 0xb21: SKIP(R2 == (R1+CONST()));break; // skeq r2,r1,#*
case 0xb22: SKIP(R2 == (R2+CONST()));break; // skeq r2,r2,#*
case 0xb23: SKIP(R2 == (R3+CONST()));break; // skeq r2,r3,#*
case 0xb24: SKIP(R2 == (R4+CONST()));break; // skeq r2,r4,#*
case 0xb25: SKIP(R2 == (R5+CONST()));break; // skeq r2,r5,#*
case 0xb26: SKIP(R2 == (R6+CONST()));break; // skeq r2,r6,#*
case 0xb27: SKIP(R2 == (R7+CONST()));break; // skeq r2,r7,#*
case 0xb28: SKIP(R2 == (R8+CONST()));break; // skeq r2,r8,#*
case 0xb29: SKIP(R2 == (R9+CONST()));break; // skeq r2,r9,#*
case 0xb2a: SKIP(R2 == (R10+CONST()));break; // skeq r2,r10,#*
case 0xb2b: SKIP(R2 == (R11+CONST()));break; // skeq r2,r11,#*
case 0xb2c: SKIP(R2 == (R12+CONST()));break; // skeq r2,r12,#*
case 0xb2d: SKIP(R2 == (R13+CONST()));break; // skeq r2,r13,#*
case 0xb2e: SKIP(R2 == (R14+CONST()));break; // skeq r2,r14,#*
case 0xb2f: SKIP(R2 == FETCH());break; // skeq r2,#*
case 0xb30: SKIP(R3 == (R0+CONST()));break; // skeq r3,r0,#*
case 0xb31: SKIP(R3 == (R1+CONST()));break; // skeq r3,r1,#*
case 0xb32: SKIP(R3 == (R2+CONST()));break; // skeq r3,r2,#*
case 0xb33: SKIP(R3 == (R3+CONST()));break; // skeq r3,r3,#*
case 0xb34: SKIP(R3 == (R4+CONST()));break; // skeq r3,r4,#*
case 0xb35: SKIP(R3 == (R5+CONST()));break; // skeq r3,r5,#*
case 0xb36: SKIP(R3 == (R6+CONST()));break; // skeq r3,r6,#*
case 0xb37: SKIP(R3 == (R7+CONST()));break; // skeq r3,r7,#*
case 0xb38: SKIP(R3 == (R8+CONST()));break; // skeq r3,r8,#*
case 0xb39: SKIP(R3 == (R9+CONST()));break; // skeq r3,r9,#*
case 0xb3a: SKIP(R3 == (R10+CONST()));break; // skeq r3,r10,#*
case 0xb3b: SKIP(R3 == (R11+CONST()));break; // skeq r3,r11,#*
case 0xb3c: SKIP(R3 == (R12+CONST()));break; // skeq r3,r12,#*
case 0xb3d: SKIP(R3 == (R13+CONST()));break; // skeq r3,r13,#*
case 0xb3e: SKIP(R3 == (R14+CONST()));break; // skeq r3,r14,#*
case 0xb3f: SKIP(R3 == FETCH());break; // skeq r3,#*
case 0xb40: SKIP(R4 == (R0+CONST()));break; // skeq r4,r0,#*
case 0xb41: SKIP(R4 == (R1+CONST()));break; // skeq r4,r1,#*
case 0xb42: SKIP(R4 == (R2+CONST()));break; // skeq r4,r2,#*
case 0xb43: SKIP(R4 == (R3+CONST()));break; // skeq r4,r3,#*
case 0xb44: SKIP(R4 == (R4+CONST()));break; // skeq r4,r4,#*
case 0xb45: SKIP(R4 == (R5+CONST()));break; // skeq r4,r5,#*
case 0xb46: SKIP(R4 == (R6+CONST()));break; // skeq r4,r6,#*
case 0xb47: SKIP(R4 == (R7+CONST()));break; // skeq r4,r7,#*
case 0xb48: SKIP(R4 == (R8+CONST()));break; // skeq r4,r8,#*
case 0xb49: SKIP(R4 == (R9+CONST()));break; // skeq r4,r9,#*
case 0xb4a: SKIP(R4 == (R10+CONST()));break; // skeq r4,r10,#*
case 0xb4b: SKIP(R4 == (R11+CONST()));break; // skeq r4,r11,#*
case 0xb4c: SKIP(R4 == (R12+CONST()));break; // skeq r4,r12,#*
case 0xb4d: SKIP(R4 == (R13+CONST()));break; // skeq r4,r13,#*
case 0xb4e: SKIP(R4 == (R14+CONST()));break; // skeq r4,r14,#*
case 0xb4f: SKIP(R4 == FETCH());break; // skeq r4,#*
case 0xb50: SKIP(R5 == (R0+CONST()));break; // skeq r5,r0,#*
case 0xb51: SKIP(R5 == (R1+CONST()));break; // skeq r5,r1,#*
case 0xb52: SKIP(R5 == (R2+CONST()));break; // skeq r5,r2,#*
case 0xb53: SKIP(R5 == (R3+CONST()));break; // skeq r5,r3,#*
case 0xb54: SKIP(R5 == (R4+CONST()));break; // skeq r5,r4,#*
case 0xb55: SKIP(R5 == (R5+CONST()));break; // skeq r5,r5,#*
case 0xb56: SKIP(R5 == (R6+CONST()));break; // skeq r5,r6,#*
case 0xb57: SKIP(R5 == (R7+CONST()));break; // skeq r5,r7,#*
case 0xb58: SKIP(R5 == (R8+CONST()));break; // skeq r5,r8,#*
case 0xb59: SKIP(R5 == (R9+CONST()));break; // skeq r5,r9,#*
case 0xb5a: SKIP(R5 == (R10+CONST()));break; // skeq r5,r10,#*
case 0xb5b: SKIP(R5 == (R11+CONST()));break; // skeq r5,r11,#*
case 0xb5c: SKIP(R5 == (R12+CONST()));break; // skeq r5,r12,#*
case 0xb5d: SKIP(R5 == (R13+CONST()));break; // skeq r5,r13,#*
case 0xb5e: SKIP(R5 == (R14+CONST()));break; // skeq r5,r14,#*
case 0xb5f: SKIP(R5 == FETCH());break; // skeq r5,#*
case 0xb60: SKIP(R6 == (R0+CONST()));break; // skeq r6,r0,#*
case 0xb61: SKIP(R6 == (R1+CONST()));break; // skeq r6,r1,#*
case 0xb62: SKIP(R6 == (R2+CONST()));break; // skeq r6,r2,#*
case 0xb63: SKIP(R6 == (R3+CONST()));break; // skeq r6,r3,#*
case 0xb64: SKIP(R6 == (R4+CONST()));break; // skeq r6,r4,#*
case 0xb65: SKIP(R6 == (R5+CONST()));break; // skeq r6,r5,#*
case 0xb66: SKIP(R6 == (R6+CONST()));break; // skeq r6,r6,#*
case 0xb67: SKIP(R6 == (R7+CONST()));break; // skeq r6,r7,#*
case 0xb68: SKIP(R6 == (R8+CONST()));break; // skeq r6,r8,#*
case 0xb69: SKIP(R6 == (R9+CONST()));break; // skeq r6,r9,#*
case 0xb6a: SKIP(R6 == (R10+CONST()));break; // skeq r6,r10,#*
case 0xb6b: SKIP(R6 == (R11+CONST()));break; // skeq r6,r11,#*
case 0xb6c: SKIP(R6 == (R12+CONST()));break; // skeq r6,r12,#*
case 0xb6d: SKIP(R6 == (R13+CONST()));break; // skeq r6,r13,#*
case 0xb6e: SKIP(R6 == (R14+CONST()));break; // skeq r6,r14,#*
case 0xb6f: SKIP(R6 == FETCH());break; // skeq r6,#*
case 0xb70: SKIP(R7 == (R0+CONST()));break; // skeq r7,r0,#*
case 0xb71: SKIP(R7 == (R1+CONST()));break; // skeq r7,r1,#*
case 0xb72: SKIP(R7 == (R2+CONST()));break; // skeq r7,r2,#*
case 0xb73: SKIP(R7 == (R3+CONST()));break; // skeq r7,r3,#*
case 0xb74: SKIP(R7 == (R4+CONST()));break; // skeq r7,r4,#*
case 0xb75: SKIP(R7 == (R5+CONST()));break; // skeq r7,r5,#*
case 0xb76: SKIP(R7 == (R6+CONST()));break; // skeq r7,r6,#*
case 0xb77: SKIP(R7 == (R7+CONST()));break; // skeq r7,r7,#*
case 0xb78: SKIP(R7 == (R8+CONST()));break; // skeq r7,r8,#*
case 0xb79: SKIP(R7 == (R9+CONST()));break; // skeq r7,r9,#*
case 0xb7a: SKIP(R7 == (R10+CONST()));break; // skeq r7,r10,#*
case 0xb7b: SKIP(R7 == (R11+CONST()));break; // skeq r7,r11,#*
case 0xb7c: SKIP(R7 == (R12+CONST()));break; // skeq r7,r12,#*
case 0xb7d: SKIP(R7 == (R13+CONST()));break; // skeq r7,r13,#*
case 0xb7e: SKIP(R7 == (R14+CONST()));break; // skeq r7,r14,#*
case 0xb7f: SKIP(R7 == FETCH());break; // skeq r7,#*
case 0xb80: SKIP(R8 == (R0+CONST()));break; // skeq r8,r0,#*
case 0xb81: SKIP(R8 == (R1+CONST()));break; // skeq r8,r1,#*
case 0xb82: SKIP(R8 == (R2+CONST()));break; // skeq r8,r2,#*
case 0xb83: SKIP(R8 == (R3+CONST()));break; // skeq r8,r3,#*
case 0xb84: SKIP(R8 == (R4+CONST()));break; // skeq r8,r4,#*
case 0xb85: SKIP(R8 == (R5+CONST()));break; // skeq r8,r5,#*
case 0xb86: SKIP(R8 == (R6+CONST()));break; // skeq r8,r6,#*
case 0xb87: SKIP(R8 == (R7+CONST()));break; // skeq r8,r7,#*
case 0xb88: SKIP(R8 == (R8+CONST()));break; // skeq r8,r8,#*
case 0xb89: SKIP(R8 == (R9+CONST()));break; // skeq r8,r9,#*
case 0xb8a: SKIP(R8 == (R10+CONST()));break; // skeq r8,r10,#*
case 0xb8b: SKIP(R8 == (R11+CONST()));break; // skeq r8,r11,#*
case 0xb8c: SKIP(R8 == (R12+CONST()));break; // skeq r8,r12,#*
case 0xb8d: SKIP(R8 == (R13+CONST()));break; // skeq r8,r13,#*
case 0xb8e: SKIP(R8 == (R14+CONST()));break; // skeq r8,r14,#*
case 0xb8f: SKIP(R8 == FETCH());break; // skeq r8,#*
case 0xb90: SKIP(R9 == (R0+CONST()));break; // skeq r9,r0,#*
case 0xb91: SKIP(R9 == (R1+CONST()));break; // skeq r9,r1,#*
case 0xb92: SKIP(R9 == (R2+CONST()));break; // skeq r9,r2,#*
case 0xb93: SKIP(R9 == (R3+CONST()));break; // skeq r9,r3,#*
case 0xb94: SKIP(R9 == (R4+CONST()));break; // skeq r9,r4,#*
case 0xb95: SKIP(R9 == (R5+CONST()));break; // skeq r9,r5,#*
case 0xb96: SKIP(R9 == (R6+CONST()));break; // skeq r9,r6,#*
case 0xb97: SKIP(R9 == (R7+CONST()));break; // skeq r9,r7,#*
case 0xb98: SKIP(R9 == (R8+CONST()));break; // skeq r9,r8,#*
case 0xb99: SKIP(R9 == (R9+CONST()));break; // skeq r9,r9,#*
case 0xb9a: SKIP(R9 == (R10+CONST()));break; // skeq r9,r10,#*
case 0xb9b: SKIP(R9 == (R11+CONST()));break; // skeq r9,r11,#*
case 0xb9c: SKIP(R9 == (R12+CONST()));break; // skeq r9,r12,#*
case 0xb9d: SKIP(R9 == (R13+CONST()));break; // skeq r9,r13,#*
case 0xb9e: SKIP(R9 == (R14+CONST()));break; // skeq r9,r14,#*
case 0xb9f: SKIP(R9 == FETCH());break; // skeq r9,#*
case 0xba0: SKIP(R10 == (R0+CONST()));break; // skeq r10,r0,#*
case 0xba1: SKIP(R10 == (R1+CONST()));break; // skeq r10,r1,#*
case 0xba2: SKIP(R10 == (R2+CONST()));break; // skeq r10,r2,#*
case 0xba3: SKIP(R10 == (R3+CONST()));break; // skeq r10,r3,#*
case 0xba4: SKIP(R10 == (R4+CONST()));break; // skeq r10,r4,#*
case 0xba5: SKIP(R10 == (R5+CONST()));break; // skeq r10,r5,#*
case 0xba6: SKIP(R10 == (R6+CONST()));break; // skeq r10,r6,#*
case 0xba7: SKIP(R10 == (R7+CONST()));break; // skeq r10,r7,#*
case 0xba8: SKIP(R10 == (R8+CONST()));break; // skeq r10,r8,#*
case 0xba9: SKIP(R10 == (R9+CONST()));break; // skeq r10,r9,#*
case 0xbaa: SKIP(R10 == (R10+CONST()));break; // skeq r10,r10,#*
case 0xbab: SKIP(R10 == (R11+CONST()));break; // skeq r10,r11,#*
case 0xbac: SKIP(R10 == (R12+CONST()));break; // skeq r10,r12,#*
case 0xbad: SKIP(R10 == (R13+CONST()));break; // skeq r10,r13,#*
case 0xbae: SKIP(R10 == (R14+CONST()));break; // skeq r10,r14,#*
case 0xbaf: SKIP(R10 == FETCH());break; // skeq r10,#*
case 0xbb0: SKIP(R11 == (R0+CONST()));break; // skeq r11,r0,#*
case 0xbb1: SKIP(R11 == (R1+CONST()));break; // skeq r11,r1,#*
case 0xbb2: SKIP(R11 == (R2+CONST()));break; // skeq r11,r2,#*
case 0xbb3: SKIP(R11 == (R3+CONST()));break; // skeq r11,r3,#*
case 0xbb4: SKIP(R11 == (R4+CONST()));break; // skeq r11,r4,#*
case 0xbb5: SKIP(R11 == (R5+CONST()));break; // skeq r11,r5,#*
case 0xbb6: SKIP(R11 == (R6+CONST()));break; // skeq r11,r6,#*
case 0xbb7: SKIP(R11 == (R7+CONST()));break; // skeq r11,r7,#*
case 0xbb8: SKIP(R11 == (R8+CONST()));break; // skeq r11,r8,#*
case 0xbb9: SKIP(R11 == (R9+CONST()));break; // skeq r11,r9,#*
case 0xbba: SKIP(R11 == (R10+CONST()));break; // skeq r11,r10,#*
case 0xbbb: SKIP(R11 == (R11+CONST()));break; // skeq r11,r11,#*
case 0xbbc: SKIP(R11 == (R12+CONST()));break; // skeq r11,r12,#*
case 0xbbd: SKIP(R11 == (R13+CONST()));break; // skeq r11,r13,#*
case 0xbbe: SKIP(R11 == (R14+CONST()));break; // skeq r11,r14,#*
case 0xbbf: SKIP(R11 == FETCH());break; // skeq r11,#*
case 0xbc0: SKIP(R12 == (R0+CONST()));break; // skeq r12,r0,#*
case 0xbc1: SKIP(R12 == (R1+CONST()));break; // skeq r12,r1,#*
case 0xbc2: SKIP(R12 == (R2+CONST()));break; // skeq r12,r2,#*
case 0xbc3: SKIP(R12 == (R3+CONST()));break; // skeq r12,r3,#*
case 0xbc4: SKIP(R12 == (R4+CONST()));break; // skeq r12,r4,#*
case 0xbc5: SKIP(R12 == (R5+CONST()));break; // skeq r12,r5,#*
case 0xbc6: SKIP(R12 == (R6+CONST()));break; // skeq r12,r6,#*
case 0xbc7: SKIP(R12 == (R7+CONST()));break; // skeq r12,r7,#*
case 0xbc8: SKIP(R12 == (R8+CONST()));break; // skeq r12,r8,#*
case 0xbc9: SKIP(R12 == (R9+CONST()));break; // skeq r12,r9,#*
case 0xbca: SKIP(R12 == (R10+CONST()));break; // skeq r12,r10,#*
case 0xbcb: SKIP(R12 == (R11+CONST()));break; // skeq r12,r11,#*
case 0xbcc: SKIP(R12 == (R12+CONST()));break; // skeq r12,r12,#*
case 0xbcd: SKIP(R12 == (R13+CONST()));break; // skeq r12,r13,#*
case 0xbce: SKIP(R12 == (R14+CONST()));break; // skeq r12,r14,#*
case 0xbcf: SKIP(R12 == FETCH());break; // skeq r12,#*
case 0xbd0: SKIP(R13 == (R0+CONST()));break; // skeq r13,r0,#*
case 0xbd1: SKIP(R13 == (R1+CONST()));break; // skeq r13,r1,#*
case 0xbd2: SKIP(R13 == (R2+CONST()));break; // skeq r13,r2,#*
case 0xbd3: SKIP(R13 == (R3+CONST()));break; // skeq r13,r3,#*
case 0xbd4: SKIP(R13 == (R4+CONST()));break; // skeq r13,r4,#*
case 0xbd5: SKIP(R13 == (R5+CONST()));break; // skeq r13,r5,#*
case 0xbd6: SKIP(R13 == (R6+CONST()));break; // skeq r13,r6,#*
case 0xbd7: SKIP(R13 == (R7+CONST()));break; // skeq r13,r7,#*
case 0xbd8: SKIP(R13 == (R8+CONST()));break; // skeq r13,r8,#*
case 0xbd9: SKIP(R13 == (R9+CONST()));break; // skeq r13,r9,#*
case 0xbda: SKIP(R13 == (R10+CONST()));break; // skeq r13,r10,#*
case 0xbdb: SKIP(R13 == (R11+CONST()));break; // skeq r13,r11,#*
case 0xbdc: SKIP(R13 == (R12+CONST()));break; // skeq r13,r12,#*
case 0xbdd: SKIP(R13 == (R13+CONST()));break; // skeq r13,r13,#*
case 0xbde: SKIP(R13 == (R14+CONST()));break; // skeq r13,r14,#*
case 0xbdf: SKIP(R13 == FETCH());break; // skeq r13,#*
case 0xbe0: SKIP(R14 == (R0+CONST()));break; // skeq r14,r0,#*
case 0xbe1: SKIP(R14 == (R1+CONST()));break; // skeq r14,r1,#*
case 0xbe2: SKIP(R14 == (R2+CONST()));break; // skeq r14,r2,#*
case 0xbe3: SKIP(R14 == (R3+CONST()));break; // skeq r14,r3,#*
case 0xbe4: SKIP(R14 == (R4+CONST()));break; // skeq r14,r4,#*
case 0xbe5: SKIP(R14 == (R5+CONST()));break; // skeq r14,r5,#*
case 0xbe6: SKIP(R14 == (R6+CONST()));break; // skeq r14,r6,#*
case 0xbe7: SKIP(R14 == (R7+CONST()));break; // skeq r14,r7,#*
case 0xbe8: SKIP(R14 == (R8+CONST()));break; // skeq r14,r8,#*
case 0xbe9: SKIP(R14 == (R9+CONST()));break; // skeq r14,r9,#*
case 0xbea: SKIP(R14 == (R10+CONST()));break; // skeq r14,r10,#*
case 0xbeb: SKIP(R14 == (R11+CONST()));break; // skeq r14,r11,#*
case 0xbec: SKIP(R14 == (R12+CONST()));break; // skeq r14,r12,#*
case 0xbed: SKIP(R14 == (R13+CONST()));break; // skeq r14,r13,#*
case 0xbee: SKIP(R14 == (R14+CONST()));break; // skeq r14,r14,#*
case 0xbef: SKIP(R14 == FETCH());break; // skeq r14,#*
case 0xbf0: SKIP(R15 == (R0+CONST()));break; // skeq r15,r0,#*
case 0xbf1: SKIP(R15 == (R1+CONST()));break; // skeq r15,r1,#*
case 0xbf2: SKIP(R15 == (R2+CONST()));break; // skeq r15,r2,#*
case 0xbf3: SKIP(R15 == (R3+CONST()));break; // skeq r15,r3,#*
case 0xbf4: SKIP(R15 == (R4+CONST()));break; // skeq r15,r4,#*
case 0xbf5: SKIP(R15 == (R5+CONST()));break; // skeq r15,r5,#*
case 0xbf6: SKIP(R15 == (R6+CONST()));break; // skeq r15,r6,#*
case 0xbf7: SKIP(R15 == (R7+CONST()));break; // skeq r15,r7,#*
case 0xbf8: SKIP(R15 == (R8+CONST()));break; // skeq r15,r8,#*
case 0xbf9: SKIP(R15 == (R9+CONST()));break; // skeq r15,r9,#*
case 0xbfa: SKIP(R15 == (R10+CONST()));break; // skeq r15,r10,#*
case 0xbfb: SKIP(R15 == (R11+CONST()));break; // skeq r15,r11,#*
case 0xbfc: SKIP(R15 == (R12+CONST()));break; // skeq r15,r12,#*
case 0xbfd: SKIP(R15 == (R13+CONST()));break; // skeq r15,r13,#*
case 0xbfe: SKIP(R15 == (R14+CONST()));break; // skeq r15,r14,#*
case 0xbff: SKIP(R15 == FETCH());break; // skeq r15,#*
case 0xc00: SKIP(R0 != (R0+CONST()));break; // skne r0,r0,#*
case 0xc01: SKIP(R0 != (R1+CONST()));break; // skne r0,r1,#*
case 0xc02: SKIP(R0 != (R2+CONST()));break; // skne r0,r2,#*
case 0xc03: SKIP(R0 != (R3+CONST()));break; // skne r0,r3,#*
case 0xc04: SKIP(R0 != (R4+CONST()));break; // skne r0,r4,#*
case 0xc05: SKIP(R0 != (R5+CONST()));break; // skne r0,r5,#*
case 0xc06: SKIP(R0 != (R6+CONST()));break; // skne r0,r6,#*
case 0xc07: SKIP(R0 != (R7+CONST()));break; // skne r0,r7,#*
case 0xc08: SKIP(R0 != (R8+CONST()));break; // skne r0,r8,#*
case 0xc09: SKIP(R0 != (R9+CONST()));break; // skne r0,r9,#*
case 0xc0a: SKIP(R0 != (R10+CONST()));break; // skne r0,r10,#*
case 0xc0b: SKIP(R0 != (R11+CONST()));break; // skne r0,r11,#*
case 0xc0c: SKIP(R0 != (R12+CONST()));break; // skne r0,r12,#*
case 0xc0d: SKIP(R0 != (R13+CONST()));break; // skne r0,r13,#*
case 0xc0e: SKIP(R0 != (R14+CONST()));break; // skne r0,r14,#*
case 0xc0f: SKIP(R0 != FETCH());break; // skne r0,#*
case 0xc10: SKIP(R1 != (R0+CONST()));break; // skne r1,r0,#*
case 0xc11: SKIP(R1 != (R1+CONST()));break; // skne r1,r1,#*
case 0xc12: SKIP(R1 != (R2+CONST()));break; // skne r1,r2,#*
case 0xc13: SKIP(R1 != (R3+CONST()));break; // skne r1,r3,#*
case 0xc14: SKIP(R1 != (R4+CONST()));break; // skne r1,r4,#*
case 0xc15: SKIP(R1 != (R5+CONST()));break; // skne r1,r5,#*
case 0xc16: SKIP(R1 != (R6+CONST()));break; // skne r1,r6,#*
case 0xc17: SKIP(R1 != (R7+CONST()));break; // skne r1,r7,#*
case 0xc18: SKIP(R1 != (R8+CONST()));break; // skne r1,r8,#*
case 0xc19: SKIP(R1 != (R9+CONST()));break; // skne r1,r9,#*
case 0xc1a: SKIP(R1 != (R10+CONST()));break; // skne r1,r10,#*
case 0xc1b: SKIP(R1 != (R11+CONST()));break; // skne r1,r11,#*
case 0xc1c: SKIP(R1 != (R12+CONST()));break; // skne r1,r12,#*
case 0xc1d: SKIP(R1 != (R13+CONST()));break; // skne r1,r13,#*
case 0xc1e: SKIP(R1 != (R14+CONST()));break; // skne r1,r14,#*
case 0xc1f: SKIP(R1 != FETCH());break; // skne r1,#*
case 0xc20: SKIP(R2 != (R0+CONST()));break; // skne r2,r0,#*
case 0xc21: SKIP(R2 != (R1+CONST()));break; // skne r2,r1,#*
case 0xc22: SKIP(R2 != (R2+CONST()));break; // skne r2,r2,#*
case 0xc23: SKIP(R2 != (R3+CONST()));break; // skne r2,r3,#*
case 0xc24: SKIP(R2 != (R4+CONST()));break; // skne r2,r4,#*
case 0xc25: SKIP(R2 != (R5+CONST()));break; // skne r2,r5,#*
case 0xc26: SKIP(R2 != (R6+CONST()));break; // skne r2,r6,#*
case 0xc27: SKIP(R2 != (R7+CONST()));break; // skne r2,r7,#*
case 0xc28: SKIP(R2 != (R8+CONST()));break; // skne r2,r8,#*
case 0xc29: SKIP(R2 != (R9+CONST()));break; // skne r2,r9,#*
case 0xc2a: SKIP(R2 != (R10+CONST()));break; // skne r2,r10,#*
case 0xc2b: SKIP(R2 != (R11+CONST()));break; // skne r2,r11,#*
case 0xc2c: SKIP(R2 != (R12+CONST()));break; // skne r2,r12,#*
case 0xc2d: SKIP(R2 != (R13+CONST()));break; // skne r2,r13,#*
case 0xc2e: SKIP(R2 != (R14+CONST()));break; // skne r2,r14,#*
case 0xc2f: SKIP(R2 != FETCH());break; // skne r2,#*
case 0xc30: SKIP(R3 != (R0+CONST()));break; // skne r3,r0,#*
case 0xc31: SKIP(R3 != (R1+CONST()));break; // skne r3,r1,#*
case 0xc32: SKIP(R3 != (R2+CONST()));break; // skne r3,r2,#*
case 0xc33: SKIP(R3 != (R3+CONST()));break; // skne r3,r3,#*
case 0xc34: SKIP(R3 != (R4+CONST()));break; // skne r3,r4,#*
case 0xc35: SKIP(R3 != (R5+CONST()));break; // skne r3,r5,#*
case 0xc36: SKIP(R3 != (R6+CONST()));break; // skne r3,r6,#*
case 0xc37: SKIP(R3 != (R7+CONST()));break; // skne r3,r7,#*
case 0xc38: SKIP(R3 != (R8+CONST()));break; // skne r3,r8,#*
case 0xc39: SKIP(R3 != (R9+CONST()));break; // skne r3,r9,#*
case 0xc3a: SKIP(R3 != (R10+CONST()));break; // skne r3,r10,#*
case 0xc3b: SKIP(R3 != (R11+CONST()));break; // skne r3,r11,#*
case 0xc3c: SKIP(R3 != (R12+CONST()));break; // skne r3,r12,#*
case 0xc3d: SKIP(R3 != (R13+CONST()));break; // skne r3,r13,#*
case 0xc3e: SKIP(R3 != (R14+CONST()));break; // skne r3,r14,#*
case 0xc3f: SKIP(R3 != FETCH());break; // skne r3,#*
case 0xc40: SKIP(R4 != (R0+CONST()));break; // skne r4,r0,#*
case 0xc41: SKIP(R4 != (R1+CONST()));break; // skne r4,r1,#*
case 0xc42: SKIP(R4 != (R2+CONST()));break; // skne r4,r2,#*
case 0xc43: SKIP(R4 != (R3+CONST()));break; // skne r4,r3,#*
case 0xc44: SKIP(R4 != (R4+CONST()));break; // skne r4,r4,#*
case 0xc45: SKIP(R4 != (R5+CONST()));break; // skne r4,r5,#*
case 0xc46: SKIP(R4 != (R6+CONST()));break; // skne r4,r6,#*
case 0xc47: SKIP(R4 != (R7+CONST()));break; // skne r4,r7,#*
case 0xc48: SKIP(R4 != (R8+CONST()));break; // skne r4,r8,#*
case 0xc49: SKIP(R4 != (R9+CONST()));break; // skne r4,r9,#*
case 0xc4a: SKIP(R4 != (R10+CONST()));break; // skne r4,r10,#*
case 0xc4b: SKIP(R4 != (R11+CONST()));break; // skne r4,r11,#*
case 0xc4c: SKIP(R4 != (R12+CONST()));break; // skne r4,r12,#*
case 0xc4d: SKIP(R4 != (R13+CONST()));break; // skne r4,r13,#*
case 0xc4e: SKIP(R4 != (R14+CONST()));break; // skne r4,r14,#*
case 0xc4f: SKIP(R4 != FETCH());break; // skne r4,#*
case 0xc50: SKIP(R5 != (R0+CONST()));break; // skne r5,r0,#*
case 0xc51: SKIP(R5 != (R1+CONST()));break; // skne r5,r1,#*
case 0xc52: SKIP(R5 != (R2+CONST()));break; // skne r5,r2,#*
case 0xc53: SKIP(R5 != (R3+CONST()));break; // skne r5,r3,#*
case 0xc54: SKIP(R5 != (R4+CONST()));break; // skne r5,r4,#*
case 0xc55: SKIP(R5 != (R5+CONST()));break; // skne r5,r5,#*
case 0xc56: SKIP(R5 != (R6+CONST()));break; // skne r5,r6,#*
case 0xc57: SKIP(R5 != (R7+CONST()));break; // skne r5,r7,#*
case 0xc58: SKIP(R5 != (R8+CONST()));break; // skne r5,r8,#*
case 0xc59: SKIP(R5 != (R9+CONST()));break; // skne r5,r9,#*
case 0xc5a: SKIP(R5 != (R10+CONST()));break; // skne r5,r10,#*
case 0xc5b: SKIP(R5 != (R11+CONST()));break; // skne r5,r11,#*
case 0xc5c: SKIP(R5 != (R12+CONST()));break; // skne r5,r12,#*
case 0xc5d: SKIP(R5 != (R13+CONST()));break; // skne r5,r13,#*
case 0xc5e: SKIP(R5 != (R14+CONST()));break; // skne r5,r14,#*
case 0xc5f: SKIP(R5 != FETCH());break; // skne r5,#*
case 0xc60: SKIP(R6 != (R0+CONST()));break; // skne r6,r0,#*
case 0xc61: SKIP(R6 != (R1+CONST()));break; // skne r6,r1,#*
case 0xc62: SKIP(R6 != (R2+CONST()));break; // skne r6,r2,#*
case 0xc63: SKIP(R6 != (R3+CONST()));break; // skne r6,r3,#*
case 0xc64: SKIP(R6 != (R4+CONST()));break; // skne r6,r4,#*
case 0xc65: SKIP(R6 != (R5+CONST()));break; // skne r6,r5,#*
case 0xc66: SKIP(R6 != (R6+CONST()));break; // skne r6,r6,#*
case 0xc67: SKIP(R6 != (R7+CONST()));break; // skne r6,r7,#*
case 0xc68: SKIP(R6 != (R8+CONST()));break; // skne r6,r8,#*
case 0xc69: SKIP(R6 != (R9+CONST()));break; // skne r6,r9,#*
case 0xc6a: SKIP(R6 != (R10+CONST()));break; // skne r6,r10,#*
case 0xc6b: SKIP(R6 != (R11+CONST()));break; // skne r6,r11,#*
case 0xc6c: SKIP(R6 != (R12+CONST()));break; // skne r6,r12,#*
case 0xc6d: SKIP(R6 != (R13+CONST()));break; // skne r6,r13,#*
case 0xc6e: SKIP(R6 != (R14+CONST()));break; // skne r6,r14,#*
case 0xc6f: SKIP(R6 != FETCH());break; // skne r6,#*
case 0xc70: SKIP(R7 != (R0+CONST()));break; // skne r7,r0,#*
case 0xc71: SKIP(R7 != (R1+CONST()));break; // skne r7,r1,#*
case 0xc72: SKIP(R7 != (R2+CONST()));break; // skne r7,r2,#*
case 0xc73: SKIP(R7 != (R3+CONST()));break; // skne r7,r3,#*
case 0xc74: SKIP(R7 != (R4+CONST()));break; // skne r7,r4,#*
case 0xc75: SKIP(R7 != (R5+CONST()));break; // skne r7,r5,#*
case 0xc76: SKIP(R7 != (R6+CONST()));break; // skne r7,r6,#*
case 0xc77: SKIP(R7 != (R7+CONST()));break; // skne r7,r7,#*
case 0xc78: SKIP(R7 != (R8+CONST()));break; // skne r7,r8,#*
case 0xc79: SKIP(R7 != (R9+CONST()));break; // skne r7,r9,#*
case 0xc7a: SKIP(R7 != (R10+CONST()));break; // skne r7,r10,#*
case 0xc7b: SKIP(R7 != (R11+CONST()));break; // skne r7,r11,#*
case 0xc7c: SKIP(R7 != (R12+CONST()));break; // skne r7,r12,#*
case 0xc7d: SKIP(R7 != (R13+CONST()));break; // skne r7,r13,#*
case 0xc7e: SKIP(R7 != (R14+CONST()));break; // skne r7,r14,#*
case 0xc7f: SKIP(R7 != FETCH());break; // skne r7,#*
case 0xc80: SKIP(R8 != (R0+CONST()));break; // skne r8,r0,#*
case 0xc81: SKIP(R8 != (R1+CONST()));break; // skne r8,r1,#*
case 0xc82: SKIP(R8 != (R2+CONST()));break; // skne r8,r2,#*
case 0xc83: SKIP(R8 != (R3+CONST()));break; // skne r8,r3,#*
case 0xc84: SKIP(R8 != (R4+CONST()));break; // skne r8,r4,#*
case 0xc85: SKIP(R8 != (R5+CONST()));break; // skne r8,r5,#*
case 0xc86: SKIP(R8 != (R6+CONST()));break; // skne r8,r6,#*
case 0xc87: SKIP(R8 != (R7+CONST()));break; // skne r8,r7,#*
case 0xc88: SKIP(R8 != (R8+CONST()));break; // skne r8,r8,#*
case 0xc89: SKIP(R8 != (R9+CONST()));break; // skne r8,r9,#*
case 0xc8a: SKIP(R8 != (R10+CONST()));break; // skne r8,r10,#*
case 0xc8b: SKIP(R8 != (R11+CONST()));break; // skne r8,r11,#*
case 0xc8c: SKIP(R8 != (R12+CONST()));break; // skne r8,r12,#*
case 0xc8d: SKIP(R8 != (R13+CONST()));break; // skne r8,r13,#*
case 0xc8e: SKIP(R8 != (R14+CONST()));break; // skne r8,r14,#*
case 0xc8f: SKIP(R8 != FETCH());break; // skne r8,#*
case 0xc90: SKIP(R9 != (R0+CONST()));break; // skne r9,r0,#*
case 0xc91: SKIP(R9 != (R1+CONST()));break; // skne r9,r1,#*
case 0xc92: SKIP(R9 != (R2+CONST()));break; // skne r9,r2,#*
case 0xc93: SKIP(R9 != (R3+CONST()));break; // skne r9,r3,#*
case 0xc94: SKIP(R9 != (R4+CONST()));break; // skne r9,r4,#*
case 0xc95: SKIP(R9 != (R5+CONST()));break; // skne r9,r5,#*
case 0xc96: SKIP(R9 != (R6+CONST()));break; // skne r9,r6,#*
case 0xc97: SKIP(R9 != (R7+CONST()));break; // skne r9,r7,#*
case 0xc98: SKIP(R9 != (R8+CONST()));break; // skne r9,r8,#*
case 0xc99: SKIP(R9 != (R9+CONST()));break; // skne r9,r9,#*
case 0xc9a: SKIP(R9 != (R10+CONST()));break; // skne r9,r10,#*
case 0xc9b: SKIP(R9 != (R11+CONST()));break; // skne r9,r11,#*
case 0xc9c: SKIP(R9 != (R12+CONST()));break; // skne r9,r12,#*
case 0xc9d: SKIP(R9 != (R13+CONST()));break; // skne r9,r13,#*
case 0xc9e: SKIP(R9 != (R14+CONST()));break; // skne r9,r14,#*
case 0xc9f: SKIP(R9 != FETCH());break; // skne r9,#*
case 0xca0: SKIP(R10 != (R0+CONST()));break; // skne r10,r0,#*
case 0xca1: SKIP(R10 != (R1+CONST()));break; // skne r10,r1,#*
case 0xca2: SKIP(R10 != (R2+CONST()));break; // skne r10,r2,#*
case 0xca3: SKIP(R10 != (R3+CONST()));break; // skne r10,r3,#*
case 0xca4: SKIP(R10 != (R4+CONST()));break; // skne r10,r4,#*
case 0xca5: SKIP(R10 != (R5+CONST()));break; // skne r10,r5,#*
case 0xca6: SKIP(R10 != (R6+CONST()));break; // skne r10,r6,#*
case 0xca7: SKIP(R10 != (R7+CONST()));break; // skne r10,r7,#*
case 0xca8: SKIP(R10 != (R8+CONST()));break; // skne r10,r8,#*
case 0xca9: SKIP(R10 != (R9+CONST()));break; // skne r10,r9,#*
case 0xcaa: SKIP(R10 != (R10+CONST()));break; // skne r10,r10,#*
case 0xcab: SKIP(R10 != (R11+CONST()));break; // skne r10,r11,#*
case 0xcac: SKIP(R10 != (R12+CONST()));break; // skne r10,r12,#*
case 0xcad: SKIP(R10 != (R13+CONST()));break; // skne r10,r13,#*
case 0xcae: SKIP(R10 != (R14+CONST()));break; // skne r10,r14,#*
case 0xcaf: SKIP(R10 != FETCH());break; // skne r10,#*
case 0xcb0: SKIP(R11 != (R0+CONST()));break; // skne r11,r0,#*
case 0xcb1: SKIP(R11 != (R1+CONST()));break; // skne r11,r1,#*
case 0xcb2: SKIP(R11 != (R2+CONST()));break; // skne r11,r2,#*
case 0xcb3: SKIP(R11 != (R3+CONST()));break; // skne r11,r3,#*
case 0xcb4: SKIP(R11 != (R4+CONST()));break; // skne r11,r4,#*
case 0xcb5: SKIP(R11 != (R5+CONST()));break; // skne r11,r5,#*
case 0xcb6: SKIP(R11 != (R6+CONST()));break; // skne r11,r6,#*
case 0xcb7: SKIP(R11 != (R7+CONST()));break; // skne r11,r7,#*
case 0xcb8: SKIP(R11 != (R8+CONST()));break; // skne r11,r8,#*
case 0xcb9: SKIP(R11 != (R9+CONST()));break; // skne r11,r9,#*
case 0xcba: SKIP(R11 != (R10+CONST()));break; // skne r11,r10,#*
case 0xcbb: SKIP(R11 != (R11+CONST()));break; // skne r11,r11,#*
case 0xcbc: SKIP(R11 != (R12+CONST()));break; // skne r11,r12,#*
case 0xcbd: SKIP(R11 != (R13+CONST()));break; // skne r11,r13,#*
case 0xcbe: SKIP(R11 != (R14+CONST()));break; // skne r11,r14,#*
case 0xcbf: SKIP(R11 != FETCH());break; // skne r11,#*
case 0xcc0: SKIP(R12 != (R0+CONST()));break; // skne r12,r0,#*
case 0xcc1: SKIP(R12 != (R1+CONST()));break; // skne r12,r1,#*
case 0xcc2: SKIP(R12 != (R2+CONST()));break; // skne r12,r2,#*
case 0xcc3: SKIP(R12 != (R3+CONST()));break; // skne r12,r3,#*
case 0xcc4: SKIP(R12 != (R4+CONST()));break; // skne r12,r4,#*
case 0xcc5: SKIP(R12 != (R5+CONST()));break; // skne r12,r5,#*
case 0xcc6: SKIP(R12 != (R6+CONST()));break; // skne r12,r6,#*
case 0xcc7: SKIP(R12 != (R7+CONST()));break; // skne r12,r7,#*
case 0xcc8: SKIP(R12 != (R8+CONST()));break; // skne r12,r8,#*
case 0xcc9: SKIP(R12 != (R9+CONST()));break; // skne r12,r9,#*
case 0xcca: SKIP(R12 != (R10+CONST()));break; // skne r12,r10,#*
case 0xccb: SKIP(R12 != (R11+CONST()));break; // skne r12,r11,#*
case 0xccc: SKIP(R12 != (R12+CONST()));break; // skne r12,r12,#*
case 0xccd: SKIP(R12 != (R13+CONST()));break; // skne r12,r13,#*
case 0xcce: SKIP(R12 != (R14+CONST()));break; // skne r12,r14,#*
case 0xccf: SKIP(R12 != FETCH());break; // skne r12,#*
case 0xcd0: SKIP(R13 != (R0+CONST()));break; // skne r13,r0,#*
case 0xcd1: SKIP(R13 != (R1+CONST()));break; // skne r13,r1,#*
case 0xcd2: SKIP(R13 != (R2+CONST()));break; // skne r13,r2,#*
case 0xcd3: SKIP(R13 != (R3+CONST()));break; // skne r13,r3,#*
case 0xcd4: SKIP(R13 != (R4+CONST()));break; // skne r13,r4,#*
case 0xcd5: SKIP(R13 != (R5+CONST()));break; // skne r13,r5,#*
case 0xcd6: SKIP(R13 != (R6+CONST()));break; // skne r13,r6,#*
case 0xcd7: SKIP(R13 != (R7+CONST()));break; // skne r13,r7,#*
case 0xcd8: SKIP(R13 != (R8+CONST()));break; // skne r13,r8,#*
case 0xcd9: SKIP(R13 != (R9+CONST()));break; // skne r13,r9,#*
case 0xcda: SKIP(R13 != (R10+CONST()));break; // skne r13,r10,#*
case 0xcdb: SKIP(R13 != (R11+CONST()));break; // skne r13,r11,#*
case 0xcdc: SKIP(R13 != (R12+CONST()));break; // skne r13,r12,#*
case 0xcdd: SKIP(R13 != (R13+CONST()));break; // skne r13,r13,#*
case 0xcde: SKIP(R13 != (R14+CONST()));break; // skne r13,r14,#*
case 0xcdf: SKIP(R13 != FETCH());break; // skne r13,#*
case 0xce0: SKIP(R14 != (R0+CONST()));break; // skne r14,r0,#*
case 0xce1: SKIP(R14 != (R1+CONST()));break; // skne r14,r1,#*
case 0xce2: SKIP(R14 != (R2+CONST()));break; // skne r14,r2,#*
case 0xce3: SKIP(R14 != (R3+CONST()));break; // skne r14,r3,#*
case 0xce4: SKIP(R14 != (R4+CONST()));break; // skne r14,r4,#*
case 0xce5: SKIP(R14 != (R5+CONST()));break; // skne r14,r5,#*
case 0xce6: SKIP(R14 != (R6+CONST()));break; // skne r14,r6,#*
case 0xce7: SKIP(R14 != (R7+CONST()));break; // skne r14,r7,#*
case 0xce8: SKIP(R14 != (R8+CONST()));break; // skne r14,r8,#*
case 0xce9: SKIP(R14 != (R9+CONST()));break; // skne r14,r9,#*
case 0xcea: SKIP(R14 != (R10+CONST()));break; // skne r14,r10,#*
case 0xceb: SKIP(R14 != (R11+CONST()));break; // skne r14,r11,#*
case 0xcec: SKIP(R14 != (R12+CONST()));break; // skne r14,r12,#*
case 0xced: SKIP(R14 != (R13+CONST()));break; // skne r14,r13,#*
case 0xcee: SKIP(R14 != (R14+CONST()));break; // skne r14,r14,#*
case 0xcef: SKIP(R14 != FETCH());break; // skne r14,#*
case 0xcf0: SKIP(R15 != (R0+CONST()));break; // skne r15,r0,#*
case 0xcf1: SKIP(R15 != (R1+CONST()));break; // skne r15,r1,#*
case 0xcf2: SKIP(R15 != (R2+CONST()));break; // skne r15,r2,#*
case 0xcf3: SKIP(R15 != (R3+CONST()));break; // skne r15,r3,#*
case 0xcf4: SKIP(R15 != (R4+CONST()));break; // skne r15,r4,#*
case 0xcf5: SKIP(R15 != (R5+CONST()));break; // skne r15,r5,#*
case 0xcf6: SKIP(R15 != (R6+CONST()));break; // skne r15,r6,#*
case 0xcf7: SKIP(R15 != (R7+CONST()));break; // skne r15,r7,#*
case 0xcf8: SKIP(R15 != (R8+CONST()));break; // skne r15,r8,#*
case 0xcf9: SKIP(R15 != (R9+CONST()));break; // skne r15,r9,#*
case 0xcfa: SKIP(R15 != (R10+CONST()));break; // skne r15,r10,#*
case 0xcfb: SKIP(R15 != (R11+CONST()));break; // skne r15,r11,#*
case 0xcfc: SKIP(R15 != (R12+CONST()));break; // skne r15,r12,#*
case 0xcfd: SKIP(R15 != (R13+CONST()));break; // skne r15,r13,#*
case 0xcfe: SKIP(R15 != (R14+CONST()));break; // skne r15,r14,#*
case 0xcff: SKIP(R15 != FETCH());break; // skne r15,#*
case 0xd00: SKIP((R0 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r0,r0,#*
case 0xd01: SKIP((R0 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r0,r1,#*
case 0xd02: SKIP((R0 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r0,r2,#*
case 0xd03: SKIP((R0 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r0,r3,#*
case 0xd04: SKIP((R0 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r0,r4,#*
case 0xd05: SKIP((R0 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r0,r5,#*
case 0xd06: SKIP((R0 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r0,r6,#*
case 0xd07: SKIP((R0 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r0,r7,#*
case 0xd08: SKIP((R0 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r0,r8,#*
case 0xd09: SKIP((R0 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r0,r9,#*
case 0xd0a: SKIP((R0 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r0,r10,#*
case 0xd0b: SKIP((R0 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r0,r11,#*
case 0xd0c: SKIP((R0 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r0,r12,#*
case 0xd0d: SKIP((R0 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r0,r13,#*
case 0xd0e: SKIP((R0 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r0,r14,#*
case 0xd0f: SKIP((R0 & 0x8000) == (FETCH() & 0x8000));break; // skse r0,#*
case 0xd10: SKIP((R1 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r1,r0,#*
case 0xd11: SKIP((R1 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r1,r1,#*
case 0xd12: SKIP((R1 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r1,r2,#*
case 0xd13: SKIP((R1 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r1,r3,#*
case 0xd14: SKIP((R1 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r1,r4,#*
case 0xd15: SKIP((R1 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r1,r5,#*
case 0xd16: SKIP((R1 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r1,r6,#*
case 0xd17: SKIP((R1 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r1,r7,#*
case 0xd18: SKIP((R1 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r1,r8,#*
case 0xd19: SKIP((R1 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r1,r9,#*
case 0xd1a: SKIP((R1 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r1,r10,#*
case 0xd1b: SKIP((R1 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r1,r11,#*
case 0xd1c: SKIP((R1 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r1,r12,#*
case 0xd1d: SKIP((R1 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r1,r13,#*
case 0xd1e: SKIP((R1 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r1,r14,#*
case 0xd1f: SKIP((R1 & 0x8000) == (FETCH() & 0x8000));break; // skse r1,#*
case 0xd20: SKIP((R2 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r2,r0,#*
case 0xd21: SKIP((R2 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r2,r1,#*
case 0xd22: SKIP((R2 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r2,r2,#*
case 0xd23: SKIP((R2 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r2,r3,#*
case 0xd24: SKIP((R2 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r2,r4,#*
case 0xd25: SKIP((R2 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r2,r5,#*
case 0xd26: SKIP((R2 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r2,r6,#*
case 0xd27: SKIP((R2 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r2,r7,#*
case 0xd28: SKIP((R2 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r2,r8,#*
case 0xd29: SKIP((R2 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r2,r9,#*
case 0xd2a: SKIP((R2 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r2,r10,#*
case 0xd2b: SKIP((R2 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r2,r11,#*
case 0xd2c: SKIP((R2 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r2,r12,#*
case 0xd2d: SKIP((R2 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r2,r13,#*
case 0xd2e: SKIP((R2 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r2,r14,#*
case 0xd2f: SKIP((R2 & 0x8000) == (FETCH() & 0x8000));break; // skse r2,#*
case 0xd30: SKIP((R3 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r3,r0,#*
case 0xd31: SKIP((R3 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r3,r1,#*
case 0xd32: SKIP((R3 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r3,r2,#*
case 0xd33: SKIP((R3 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r3,r3,#*
case 0xd34: SKIP((R3 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r3,r4,#*
case 0xd35: SKIP((R3 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r3,r5,#*
case 0xd36: SKIP((R3 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r3,r6,#*
case 0xd37: SKIP((R3 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r3,r7,#*
case 0xd38: SKIP((R3 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r3,r8,#*
case 0xd39: SKIP((R3 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r3,r9,#*
case 0xd3a: SKIP((R3 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r3,r10,#*
case 0xd3b: SKIP((R3 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r3,r11,#*
case 0xd3c: SKIP((R3 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r3,r12,#*
case 0xd3d: SKIP((R3 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r3,r13,#*
case 0xd3e: SKIP((R3 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r3,r14,#*
case 0xd3f: SKIP((R3 & 0x8000) == (FETCH() & 0x8000));break; // skse r3,#*
case 0xd40: SKIP((R4 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r4,r0,#*
case 0xd41: SKIP((R4 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r4,r1,#*
case 0xd42: SKIP((R4 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r4,r2,#*
case 0xd43: SKIP((R4 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r4,r3,#*
case 0xd44: SKIP((R4 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r4,r4,#*
case 0xd45: SKIP((R4 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r4,r5,#*
case 0xd46: SKIP((R4 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r4,r6,#*
case 0xd47: SKIP((R4 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r4,r7,#*
case 0xd48: SKIP((R4 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r4,r8,#*
case 0xd49: SKIP((R4 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r4,r9,#*
case 0xd4a: SKIP((R4 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r4,r10,#*
case 0xd4b: SKIP((R4 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r4,r11,#*
case 0xd4c: SKIP((R4 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r4,r12,#*
case 0xd4d: SKIP((R4 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r4,r13,#*
case 0xd4e: SKIP((R4 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r4,r14,#*
case 0xd4f: SKIP((R4 & 0x8000) == (FETCH() & 0x8000));break; // skse r4,#*
case 0xd50: SKIP((R5 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r5,r0,#*
case 0xd51: SKIP((R5 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r5,r1,#*
case 0xd52: SKIP((R5 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r5,r2,#*
case 0xd53: SKIP((R5 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r5,r3,#*
case 0xd54: SKIP((R5 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r5,r4,#*
case 0xd55: SKIP((R5 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r5,r5,#*
case 0xd56: SKIP((R5 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r5,r6,#*
case 0xd57: SKIP((R5 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r5,r7,#*
case 0xd58: SKIP((R5 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r5,r8,#*
case 0xd59: SKIP((R5 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r5,r9,#*
case 0xd5a: SKIP((R5 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r5,r10,#*
case 0xd5b: SKIP((R5 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r5,r11,#*
case 0xd5c: SKIP((R5 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r5,r12,#*
case 0xd5d: SKIP((R5 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r5,r13,#*
case 0xd5e: SKIP((R5 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r5,r14,#*
case 0xd5f: SKIP((R5 & 0x8000) == (FETCH() & 0x8000));break; // skse r5,#*
case 0xd60: SKIP((R6 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r6,r0,#*
case 0xd61: SKIP((R6 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r6,r1,#*
case 0xd62: SKIP((R6 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r6,r2,#*
case 0xd63: SKIP((R6 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r6,r3,#*
case 0xd64: SKIP((R6 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r6,r4,#*
case 0xd65: SKIP((R6 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r6,r5,#*
case 0xd66: SKIP((R6 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r6,r6,#*
case 0xd67: SKIP((R6 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r6,r7,#*
case 0xd68: SKIP((R6 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r6,r8,#*
case 0xd69: SKIP((R6 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r6,r9,#*
case 0xd6a: SKIP((R6 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r6,r10,#*
case 0xd6b: SKIP((R6 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r6,r11,#*
case 0xd6c: SKIP((R6 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r6,r12,#*
case 0xd6d: SKIP((R6 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r6,r13,#*
case 0xd6e: SKIP((R6 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r6,r14,#*
case 0xd6f: SKIP((R6 & 0x8000) == (FETCH() & 0x8000));break; // skse r6,#*
case 0xd70: SKIP((R7 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r7,r0,#*
case 0xd71: SKIP((R7 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r7,r1,#*
case 0xd72: SKIP((R7 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r7,r2,#*
case 0xd73: SKIP((R7 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r7,r3,#*
case 0xd74: SKIP((R7 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r7,r4,#*
case 0xd75: SKIP((R7 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r7,r5,#*
case 0xd76: SKIP((R7 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r7,r6,#*
case 0xd77: SKIP((R7 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r7,r7,#*
case 0xd78: SKIP((R7 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r7,r8,#*
case 0xd79: SKIP((R7 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r7,r9,#*
case 0xd7a: SKIP((R7 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r7,r10,#*
case 0xd7b: SKIP((R7 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r7,r11,#*
case 0xd7c: SKIP((R7 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r7,r12,#*
case 0xd7d: SKIP((R7 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r7,r13,#*
case 0xd7e: SKIP((R7 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r7,r14,#*
case 0xd7f: SKIP((R7 & 0x8000) == (FETCH() & 0x8000));break; // skse r7,#*
case 0xd80: SKIP((R8 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r8,r0,#*
case 0xd81: SKIP((R8 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r8,r1,#*
case 0xd82: SKIP((R8 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r8,r2,#*
case 0xd83: SKIP((R8 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r8,r3,#*
case 0xd84: SKIP((R8 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r8,r4,#*
case 0xd85: SKIP((R8 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r8,r5,#*
case 0xd86: SKIP((R8 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r8,r6,#*
case 0xd87: SKIP((R8 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r8,r7,#*
case 0xd88: SKIP((R8 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r8,r8,#*
case 0xd89: SKIP((R8 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r8,r9,#*
case 0xd8a: SKIP((R8 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r8,r10,#*
case 0xd8b: SKIP((R8 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r8,r11,#*
case 0xd8c: SKIP((R8 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r8,r12,#*
case 0xd8d: SKIP((R8 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r8,r13,#*
case 0xd8e: SKIP((R8 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r8,r14,#*
case 0xd8f: SKIP((R8 & 0x8000) == (FETCH() & 0x8000));break; // skse r8,#*
case 0xd90: SKIP((R9 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r9,r0,#*
case 0xd91: SKIP((R9 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r9,r1,#*
case 0xd92: SKIP((R9 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r9,r2,#*
case 0xd93: SKIP((R9 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r9,r3,#*
case 0xd94: SKIP((R9 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r9,r4,#*
case 0xd95: SKIP((R9 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r9,r5,#*
case 0xd96: SKIP((R9 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r9,r6,#*
case 0xd97: SKIP((R9 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r9,r7,#*
case 0xd98: SKIP((R9 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r9,r8,#*
case 0xd99: SKIP((R9 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r9,r9,#*
case 0xd9a: SKIP((R9 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r9,r10,#*
case 0xd9b: SKIP((R9 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r9,r11,#*
case 0xd9c: SKIP((R9 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r9,r12,#*
case 0xd9d: SKIP((R9 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r9,r13,#*
case 0xd9e: SKIP((R9 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r9,r14,#*
case 0xd9f: SKIP((R9 & 0x8000) == (FETCH() & 0x8000));break; // skse r9,#*
case 0xda0: SKIP((R10 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r10,r0,#*
case 0xda1: SKIP((R10 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r10,r1,#*
case 0xda2: SKIP((R10 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r10,r2,#*
case 0xda3: SKIP((R10 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r10,r3,#*
case 0xda4: SKIP((R10 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r10,r4,#*
case 0xda5: SKIP((R10 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r10,r5,#*
case 0xda6: SKIP((R10 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r10,r6,#*
case 0xda7: SKIP((R10 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r10,r7,#*
case 0xda8: SKIP((R10 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r10,r8,#*
case 0xda9: SKIP((R10 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r10,r9,#*
case 0xdaa: SKIP((R10 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r10,r10,#*
case 0xdab: SKIP((R10 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r10,r11,#*
case 0xdac: SKIP((R10 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r10,r12,#*
case 0xdad: SKIP((R10 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r10,r13,#*
case 0xdae: SKIP((R10 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r10,r14,#*
case 0xdaf: SKIP((R10 & 0x8000) == (FETCH() & 0x8000));break; // skse r10,#*
case 0xdb0: SKIP((R11 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r11,r0,#*
case 0xdb1: SKIP((R11 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r11,r1,#*
case 0xdb2: SKIP((R11 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r11,r2,#*
case 0xdb3: SKIP((R11 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r11,r3,#*
case 0xdb4: SKIP((R11 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r11,r4,#*
case 0xdb5: SKIP((R11 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r11,r5,#*
case 0xdb6: SKIP((R11 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r11,r6,#*
case 0xdb7: SKIP((R11 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r11,r7,#*
case 0xdb8: SKIP((R11 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r11,r8,#*
case 0xdb9: SKIP((R11 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r11,r9,#*
case 0xdba: SKIP((R11 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r11,r10,#*
case 0xdbb: SKIP((R11 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r11,r11,#*
case 0xdbc: SKIP((R11 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r11,r12,#*
case 0xdbd: SKIP((R11 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r11,r13,#*
case 0xdbe: SKIP((R11 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r11,r14,#*
case 0xdbf: SKIP((R11 & 0x8000) == (FETCH() & 0x8000));break; // skse r11,#*
case 0xdc0: SKIP((R12 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r12,r0,#*
case 0xdc1: SKIP((R12 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r12,r1,#*
case 0xdc2: SKIP((R12 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r12,r2,#*
case 0xdc3: SKIP((R12 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r12,r3,#*
case 0xdc4: SKIP((R12 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r12,r4,#*
case 0xdc5: SKIP((R12 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r12,r5,#*
case 0xdc6: SKIP((R12 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r12,r6,#*
case 0xdc7: SKIP((R12 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r12,r7,#*
case 0xdc8: SKIP((R12 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r12,r8,#*
case 0xdc9: SKIP((R12 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r12,r9,#*
case 0xdca: SKIP((R12 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r12,r10,#*
case 0xdcb: SKIP((R12 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r12,r11,#*
case 0xdcc: SKIP((R12 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r12,r12,#*
case 0xdcd: SKIP((R12 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r12,r13,#*
case 0xdce: SKIP((R12 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r12,r14,#*
case 0xdcf: SKIP((R12 & 0x8000) == (FETCH() & 0x8000));break; // skse r12,#*
case 0xdd0: SKIP((R13 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r13,r0,#*
case 0xdd1: SKIP((R13 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r13,r1,#*
case 0xdd2: SKIP((R13 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r13,r2,#*
case 0xdd3: SKIP((R13 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r13,r3,#*
case 0xdd4: SKIP((R13 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r13,r4,#*
case 0xdd5: SKIP((R13 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r13,r5,#*
case 0xdd6: SKIP((R13 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r13,r6,#*
case 0xdd7: SKIP((R13 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r13,r7,#*
case 0xdd8: SKIP((R13 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r13,r8,#*
case 0xdd9: SKIP((R13 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r13,r9,#*
case 0xdda: SKIP((R13 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r13,r10,#*
case 0xddb: SKIP((R13 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r13,r11,#*
case 0xddc: SKIP((R13 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r13,r12,#*
case 0xddd: SKIP((R13 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r13,r13,#*
case 0xdde: SKIP((R13 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r13,r14,#*
case 0xddf: SKIP((R13 & 0x8000) == (FETCH() & 0x8000));break; // skse r13,#*
case 0xde0: SKIP((R14 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r14,r0,#*
case 0xde1: SKIP((R14 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r14,r1,#*
case 0xde2: SKIP((R14 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r14,r2,#*
case 0xde3: SKIP((R14 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r14,r3,#*
case 0xde4: SKIP((R14 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r14,r4,#*
case 0xde5: SKIP((R14 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r14,r5,#*
case 0xde6: SKIP((R14 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r14,r6,#*
case 0xde7: SKIP((R14 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r14,r7,#*
case 0xde8: SKIP((R14 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r14,r8,#*
case 0xde9: SKIP((R14 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r14,r9,#*
case 0xdea: SKIP((R14 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r14,r10,#*
case 0xdeb: SKIP((R14 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r14,r11,#*
case 0xdec: SKIP((R14 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r14,r12,#*
case 0xded: SKIP((R14 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r14,r13,#*
case 0xdee: SKIP((R14 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r14,r14,#*
case 0xdef: SKIP((R14 & 0x8000) == (FETCH() & 0x8000));break; // skse r14,#*
case 0xdf0: SKIP((R15 & 0x8000) == ((R0+CONST()) & 0x8000));break; // skse r15,r0,#*
case 0xdf1: SKIP((R15 & 0x8000) == ((R1+CONST()) & 0x8000));break; // skse r15,r1,#*
case 0xdf2: SKIP((R15 & 0x8000) == ((R2+CONST()) & 0x8000));break; // skse r15,r2,#*
case 0xdf3: SKIP((R15 & 0x8000) == ((R3+CONST()) & 0x8000));break; // skse r15,r3,#*
case 0xdf4: SKIP((R15 & 0x8000) == ((R4+CONST()) & 0x8000));break; // skse r15,r4,#*
case 0xdf5: SKIP((R15 & 0x8000) == ((R5+CONST()) & 0x8000));break; // skse r15,r5,#*
case 0xdf6: SKIP((R15 & 0x8000) == ((R6+CONST()) & 0x8000));break; // skse r15,r6,#*
case 0xdf7: SKIP((R15 & 0x8000) == ((R7+CONST()) & 0x8000));break; // skse r15,r7,#*
case 0xdf8: SKIP((R15 & 0x8000) == ((R8+CONST()) & 0x8000));break; // skse r15,r8,#*
case 0xdf9: SKIP((R15 & 0x8000) == ((R9+CONST()) & 0x8000));break; // skse r15,r9,#*
case 0xdfa: SKIP((R15 & 0x8000) == ((R10+CONST()) & 0x8000));break; // skse r15,r10,#*
case 0xdfb: SKIP((R15 & 0x8000) == ((R11+CONST()) & 0x8000));break; // skse r15,r11,#*
case 0xdfc: SKIP((R15 & 0x8000) == ((R12+CONST()) & 0x8000));break; // skse r15,r12,#*
case 0xdfd: SKIP((R15 & 0x8000) == ((R13+CONST()) & 0x8000));break; // skse r15,r13,#*
case 0xdfe: SKIP((R15 & 0x8000) == ((R14+CONST()) & 0x8000));break; // skse r15,r14,#*
case 0xdff: SKIP((R15 & 0x8000) == (FETCH() & 0x8000));break; // skse r15,#*
case 0xe00: SKIP((R0 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r0,r0,#*
case 0xe01: SKIP((R0 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r0,r1,#*
case 0xe02: SKIP((R0 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r0,r2,#*
case 0xe03: SKIP((R0 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r0,r3,#*
case 0xe04: SKIP((R0 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r0,r4,#*
case 0xe05: SKIP((R0 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r0,r5,#*
case 0xe06: SKIP((R0 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r0,r6,#*
case 0xe07: SKIP((R0 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r0,r7,#*
case 0xe08: SKIP((R0 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r0,r8,#*
case 0xe09: SKIP((R0 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r0,r9,#*
case 0xe0a: SKIP((R0 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r0,r10,#*
case 0xe0b: SKIP((R0 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r0,r11,#*
case 0xe0c: SKIP((R0 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r0,r12,#*
case 0xe0d: SKIP((R0 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r0,r13,#*
case 0xe0e: SKIP((R0 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r0,r14,#*
case 0xe0f: SKIP((R0 & 0x8000) != (FETCH() & 0x8000));break; // sksn r0,#*
case 0xe10: SKIP((R1 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r1,r0,#*
case 0xe11: SKIP((R1 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r1,r1,#*
case 0xe12: SKIP((R1 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r1,r2,#*
case 0xe13: SKIP((R1 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r1,r3,#*
case 0xe14: SKIP((R1 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r1,r4,#*
case 0xe15: SKIP((R1 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r1,r5,#*
case 0xe16: SKIP((R1 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r1,r6,#*
case 0xe17: SKIP((R1 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r1,r7,#*
case 0xe18: SKIP((R1 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r1,r8,#*
case 0xe19: SKIP((R1 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r1,r9,#*
case 0xe1a: SKIP((R1 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r1,r10,#*
case 0xe1b: SKIP((R1 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r1,r11,#*
case 0xe1c: SKIP((R1 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r1,r12,#*
case 0xe1d: SKIP((R1 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r1,r13,#*
case 0xe1e: SKIP((R1 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r1,r14,#*
case 0xe1f: SKIP((R1 & 0x8000) != (FETCH() & 0x8000));break; // sksn r1,#*
case 0xe20: SKIP((R2 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r2,r0,#*
case 0xe21: SKIP((R2 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r2,r1,#*
case 0xe22: SKIP((R2 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r2,r2,#*
case 0xe23: SKIP((R2 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r2,r3,#*
case 0xe24: SKIP((R2 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r2,r4,#*
case 0xe25: SKIP((R2 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r2,r5,#*
case 0xe26: SKIP((R2 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r2,r6,#*
case 0xe27: SKIP((R2 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r2,r7,#*
case 0xe28: SKIP((R2 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r2,r8,#*
case 0xe29: SKIP((R2 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r2,r9,#*
case 0xe2a: SKIP((R2 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r2,r10,#*
case 0xe2b: SKIP((R2 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r2,r11,#*
case 0xe2c: SKIP((R2 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r2,r12,#*
case 0xe2d: SKIP((R2 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r2,r13,#*
case 0xe2e: SKIP((R2 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r2,r14,#*
case 0xe2f: SKIP((R2 & 0x8000) != (FETCH() & 0x8000));break; // sksn r2,#*
case 0xe30: SKIP((R3 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r3,r0,#*
case 0xe31: SKIP((R3 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r3,r1,#*
case 0xe32: SKIP((R3 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r3,r2,#*
case 0xe33: SKIP((R3 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r3,r3,#*
case 0xe34: SKIP((R3 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r3,r4,#*
case 0xe35: SKIP((R3 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r3,r5,#*
case 0xe36: SKIP((R3 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r3,r6,#*
case 0xe37: SKIP((R3 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r3,r7,#*
case 0xe38: SKIP((R3 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r3,r8,#*
case 0xe39: SKIP((R3 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r3,r9,#*
case 0xe3a: SKIP((R3 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r3,r10,#*
case 0xe3b: SKIP((R3 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r3,r11,#*
case 0xe3c: SKIP((R3 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r3,r12,#*
case 0xe3d: SKIP((R3 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r3,r13,#*
case 0xe3e: SKIP((R3 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r3,r14,#*
case 0xe3f: SKIP((R3 & 0x8000) != (FETCH() & 0x8000));break; // sksn r3,#*
case 0xe40: SKIP((R4 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r4,r0,#*
case 0xe41: SKIP((R4 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r4,r1,#*
case 0xe42: SKIP((R4 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r4,r2,#*
case 0xe43: SKIP((R4 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r4,r3,#*
case 0xe44: SKIP((R4 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r4,r4,#*
case 0xe45: SKIP((R4 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r4,r5,#*
case 0xe46: SKIP((R4 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r4,r6,#*
case 0xe47: SKIP((R4 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r4,r7,#*
case 0xe48: SKIP((R4 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r4,r8,#*
case 0xe49: SKIP((R4 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r4,r9,#*
case 0xe4a: SKIP((R4 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r4,r10,#*
case 0xe4b: SKIP((R4 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r4,r11,#*
case 0xe4c: SKIP((R4 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r4,r12,#*
case 0xe4d: SKIP((R4 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r4,r13,#*
case 0xe4e: SKIP((R4 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r4,r14,#*
case 0xe4f: SKIP((R4 & 0x8000) != (FETCH() & 0x8000));break; // sksn r4,#*
case 0xe50: SKIP((R5 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r5,r0,#*
case 0xe51: SKIP((R5 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r5,r1,#*
case 0xe52: SKIP((R5 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r5,r2,#*
case 0xe53: SKIP((R5 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r5,r3,#*
case 0xe54: SKIP((R5 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r5,r4,#*
case 0xe55: SKIP((R5 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r5,r5,#*
case 0xe56: SKIP((R5 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r5,r6,#*
case 0xe57: SKIP((R5 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r5,r7,#*
case 0xe58: SKIP((R5 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r5,r8,#*
case 0xe59: SKIP((R5 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r5,r9,#*
case 0xe5a: SKIP((R5 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r5,r10,#*
case 0xe5b: SKIP((R5 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r5,r11,#*
case 0xe5c: SKIP((R5 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r5,r12,#*
case 0xe5d: SKIP((R5 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r5,r13,#*
case 0xe5e: SKIP((R5 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r5,r14,#*
case 0xe5f: SKIP((R5 & 0x8000) != (FETCH() & 0x8000));break; // sksn r5,#*
case 0xe60: SKIP((R6 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r6,r0,#*
case 0xe61: SKIP((R6 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r6,r1,#*
case 0xe62: SKIP((R6 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r6,r2,#*
case 0xe63: SKIP((R6 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r6,r3,#*
case 0xe64: SKIP((R6 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r6,r4,#*
case 0xe65: SKIP((R6 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r6,r5,#*
case 0xe66: SKIP((R6 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r6,r6,#*
case 0xe67: SKIP((R6 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r6,r7,#*
case 0xe68: SKIP((R6 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r6,r8,#*
case 0xe69: SKIP((R6 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r6,r9,#*
case 0xe6a: SKIP((R6 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r6,r10,#*
case 0xe6b: SKIP((R6 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r6,r11,#*
case 0xe6c: SKIP((R6 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r6,r12,#*
case 0xe6d: SKIP((R6 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r6,r13,#*
case 0xe6e: SKIP((R6 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r6,r14,#*
case 0xe6f: SKIP((R6 & 0x8000) != (FETCH() & 0x8000));break; // sksn r6,#*
case 0xe70: SKIP((R7 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r7,r0,#*
case 0xe71: SKIP((R7 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r7,r1,#*
case 0xe72: SKIP((R7 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r7,r2,#*
case 0xe73: SKIP((R7 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r7,r3,#*
case 0xe74: SKIP((R7 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r7,r4,#*
case 0xe75: SKIP((R7 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r7,r5,#*
case 0xe76: SKIP((R7 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r7,r6,#*
case 0xe77: SKIP((R7 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r7,r7,#*
case 0xe78: SKIP((R7 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r7,r8,#*
case 0xe79: SKIP((R7 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r7,r9,#*
case 0xe7a: SKIP((R7 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r7,r10,#*
case 0xe7b: SKIP((R7 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r7,r11,#*
case 0xe7c: SKIP((R7 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r7,r12,#*
case 0xe7d: SKIP((R7 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r7,r13,#*
case 0xe7e: SKIP((R7 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r7,r14,#*
case 0xe7f: SKIP((R7 & 0x8000) != (FETCH() & 0x8000));break; // sksn r7,#*
case 0xe80: SKIP((R8 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r8,r0,#*
case 0xe81: SKIP((R8 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r8,r1,#*
case 0xe82: SKIP((R8 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r8,r2,#*
case 0xe83: SKIP((R8 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r8,r3,#*
case 0xe84: SKIP((R8 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r8,r4,#*
case 0xe85: SKIP((R8 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r8,r5,#*
case 0xe86: SKIP((R8 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r8,r6,#*
case 0xe87: SKIP((R8 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r8,r7,#*
case 0xe88: SKIP((R8 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r8,r8,#*
case 0xe89: SKIP((R8 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r8,r9,#*
case 0xe8a: SKIP((R8 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r8,r10,#*
case 0xe8b: SKIP((R8 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r8,r11,#*
case 0xe8c: SKIP((R8 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r8,r12,#*
case 0xe8d: SKIP((R8 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r8,r13,#*
case 0xe8e: SKIP((R8 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r8,r14,#*
case 0xe8f: SKIP((R8 & 0x8000) != (FETCH() & 0x8000));break; // sksn r8,#*
case 0xe90: SKIP((R9 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r9,r0,#*
case 0xe91: SKIP((R9 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r9,r1,#*
case 0xe92: SKIP((R9 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r9,r2,#*
case 0xe93: SKIP((R9 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r9,r3,#*
case 0xe94: SKIP((R9 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r9,r4,#*
case 0xe95: SKIP((R9 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r9,r5,#*
case 0xe96: SKIP((R9 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r9,r6,#*
case 0xe97: SKIP((R9 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r9,r7,#*
case 0xe98: SKIP((R9 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r9,r8,#*
case 0xe99: SKIP((R9 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r9,r9,#*
case 0xe9a: SKIP((R9 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r9,r10,#*
case 0xe9b: SKIP((R9 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r9,r11,#*
case 0xe9c: SKIP((R9 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r9,r12,#*
case 0xe9d: SKIP((R9 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r9,r13,#*
case 0xe9e: SKIP((R9 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r9,r14,#*
case 0xe9f: SKIP((R9 & 0x8000) != (FETCH() & 0x8000));break; // sksn r9,#*
case 0xea0: SKIP((R10 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r10,r0,#*
case 0xea1: SKIP((R10 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r10,r1,#*
case 0xea2: SKIP((R10 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r10,r2,#*
case 0xea3: SKIP((R10 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r10,r3,#*
case 0xea4: SKIP((R10 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r10,r4,#*
case 0xea5: SKIP((R10 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r10,r5,#*
case 0xea6: SKIP((R10 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r10,r6,#*
case 0xea7: SKIP((R10 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r10,r7,#*
case 0xea8: SKIP((R10 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r10,r8,#*
case 0xea9: SKIP((R10 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r10,r9,#*
case 0xeaa: SKIP((R10 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r10,r10,#*
case 0xeab: SKIP((R10 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r10,r11,#*
case 0xeac: SKIP((R10 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r10,r12,#*
case 0xead: SKIP((R10 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r10,r13,#*
case 0xeae: SKIP((R10 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r10,r14,#*
case 0xeaf: SKIP((R10 & 0x8000) != (FETCH() & 0x8000));break; // sksn r10,#*
case 0xeb0: SKIP((R11 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r11,r0,#*
case 0xeb1: SKIP((R11 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r11,r1,#*
case 0xeb2: SKIP((R11 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r11,r2,#*
case 0xeb3: SKIP((R11 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r11,r3,#*
case 0xeb4: SKIP((R11 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r11,r4,#*
case 0xeb5: SKIP((R11 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r11,r5,#*
case 0xeb6: SKIP((R11 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r11,r6,#*
case 0xeb7: SKIP((R11 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r11,r7,#*
case 0xeb8: SKIP((R11 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r11,r8,#*
case 0xeb9: SKIP((R11 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r11,r9,#*
case 0xeba: SKIP((R11 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r11,r10,#*
case 0xebb: SKIP((R11 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r11,r11,#*
case 0xebc: SKIP((R11 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r11,r12,#*
case 0xebd: SKIP((R11 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r11,r13,#*
case 0xebe: SKIP((R11 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r11,r14,#*
case 0xebf: SKIP((R11 & 0x8000) != (FETCH() & 0x8000));break; // sksn r11,#*
case 0xec0: SKIP((R12 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r12,r0,#*
case 0xec1: SKIP((R12 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r12,r1,#*
case 0xec2: SKIP((R12 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r12,r2,#*
case 0xec3: SKIP((R12 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r12,r3,#*
case 0xec4: SKIP((R12 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r12,r4,#*
case 0xec5: SKIP((R12 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r12,r5,#*
case 0xec6: SKIP((R12 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r12,r6,#*
case 0xec7: SKIP((R12 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r12,r7,#*
case 0xec8: SKIP((R12 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r12,r8,#*
case 0xec9: SKIP((R12 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r12,r9,#*
case 0xeca: SKIP((R12 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r12,r10,#*
case 0xecb: SKIP((R12 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r12,r11,#*
case 0xecc: SKIP((R12 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r12,r12,#*
case 0xecd: SKIP((R12 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r12,r13,#*
case 0xece: SKIP((R12 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r12,r14,#*
case 0xecf: SKIP((R12 & 0x8000) != (FETCH() & 0x8000));break; // sksn r12,#*
case 0xed0: SKIP((R13 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r13,r0,#*
case 0xed1: SKIP((R13 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r13,r1,#*
case 0xed2: SKIP((R13 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r13,r2,#*
case 0xed3: SKIP((R13 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r13,r3,#*
case 0xed4: SKIP((R13 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r13,r4,#*
case 0xed5: SKIP((R13 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r13,r5,#*
case 0xed6: SKIP((R13 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r13,r6,#*
case 0xed7: SKIP((R13 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r13,r7,#*
case 0xed8: SKIP((R13 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r13,r8,#*
case 0xed9: SKIP((R13 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r13,r9,#*
case 0xeda: SKIP((R13 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r13,r10,#*
case 0xedb: SKIP((R13 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r13,r11,#*
case 0xedc: SKIP((R13 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r13,r12,#*
case 0xedd: SKIP((R13 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r13,r13,#*
case 0xede: SKIP((R13 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r13,r14,#*
case 0xedf: SKIP((R13 & 0x8000) != (FETCH() & 0x8000));break; // sksn r13,#*
case 0xee0: SKIP((R14 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r14,r0,#*
case 0xee1: SKIP((R14 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r14,r1,#*
case 0xee2: SKIP((R14 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r14,r2,#*
case 0xee3: SKIP((R14 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r14,r3,#*
case 0xee4: SKIP((R14 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r14,r4,#*
case 0xee5: SKIP((R14 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r14,r5,#*
case 0xee6: SKIP((R14 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r14,r6,#*
case 0xee7: SKIP((R14 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r14,r7,#*
case 0xee8: SKIP((R14 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r14,r8,#*
case 0xee9: SKIP((R14 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r14,r9,#*
case 0xeea: SKIP((R14 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r14,r10,#*
case 0xeeb: SKIP((R14 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r14,r11,#*
case 0xeec: SKIP((R14 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r14,r12,#*
case 0xeed: SKIP((R14 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r14,r13,#*
case 0xeee: SKIP((R14 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r14,r14,#*
case 0xeef: SKIP((R14 & 0x8000) != (FETCH() & 0x8000));break; // sksn r14,#*
case 0xef0: SKIP((R15 & 0x8000) != ((R0+CONST()) & 0x8000));break; // sksn r15,r0,#*
case 0xef1: SKIP((R15 & 0x8000) != ((R1+CONST()) & 0x8000));break; // sksn r15,r1,#*
case 0xef2: SKIP((R15 & 0x8000) != ((R2+CONST()) & 0x8000));break; // sksn r15,r2,#*
case 0xef3: SKIP((R15 & 0x8000) != ((R3+CONST()) & 0x8000));break; // sksn r15,r3,#*
case 0xef4: SKIP((R15 & 0x8000) != ((R4+CONST()) & 0x8000));break; // sksn r15,r4,#*
case 0xef5: SKIP((R15 & 0x8000) != ((R5+CONST()) & 0x8000));break; // sksn r15,r5,#*
case 0xef6: SKIP((R15 & 0x8000) != ((R6+CONST()) & 0x8000));break; // sksn r15,r6,#*
case 0xef7: SKIP((R15 & 0x8000) != ((R7+CONST()) & 0x8000));break; // sksn r15,r7,#*
case 0xef8: SKIP((R15 & 0x8000) != ((R8+CONST()) & 0x8000));break; // sksn r15,r8,#*
case 0xef9: SKIP((R15 & 0x8000) != ((R9+CONST()) & 0x8000));break; // sksn r15,r9,#*
case 0xefa: SKIP((R15 & 0x8000) != ((R10+CONST()) & 0x8000));break; // sksn r15,r10,#*
case 0xefb: SKIP((R15 & 0x8000) != ((R11+CONST()) & 0x8000));break; // sksn r15,r11,#*
case 0xefc: SKIP((R15 & 0x8000) != ((R12+CONST()) & 0x8000));break; // sksn r15,r12,#*
case 0xefd: SKIP((R15 & 0x8000) != ((R13+CONST()) & 0x8000));break; // sksn r15,r13,#*
case 0xefe: SKIP((R15 & 0x8000) != ((R14+CONST()) & 0x8000));break; // sksn r15,r14,#*
case 0xeff: SKIP((R15 & 0x8000) != (FETCH() & 0x8000));break; // sksn r15,#*
case 0xff0: SKIP(carryFlag == ((R0+CONST()) & 0x0001));break; // skcm r15,r0,#*
case 0xff1: SKIP(carryFlag == ((R1+CONST()) & 0x0001));break; // skcm r15,r1,#*
case 0xff2: SKIP(carryFlag == ((R2+CONST()) & 0x0001));break; // skcm r15,r2,#*
case 0xff3: SKIP(carryFlag == ((R3+CONST()) & 0x0001));break; // skcm r15,r3,#*
case 0xff4: SKIP(carryFlag == ((R4+CONST()) & 0x0001));break; // skcm r15,r4,#*
case 0xff5: SKIP(carryFlag == ((R5+CONST()) & 0x0001));break; // skcm r15,r5,#*
case 0xff6: SKIP(carryFlag == ((R6+CONST()) & 0x0001));break; // skcm r15,r6,#*
case 0xff7: SKIP(carryFlag == ((R7+CONST()) & 0x0001));break; // skcm r15,r7,#*
case 0xff8: SKIP(carryFlag == ((R8+CONST()) & 0x0001));break; // skcm r15,r8,#*
case 0xff9: SKIP(carryFlag == ((R9+CONST()) & 0x0001));break; // skcm r15,r9,#*
case 0xffa: SKIP(carryFlag == ((R10+CONST()) & 0x0001));break; // skcm r15,r10,#*
case 0xffb: SKIP(carryFlag == ((R11+CONST()) & 0x0001));break; // skcm r15,r11,#*
case 0xffc: SKIP(carryFlag == ((R12+CONST()) & 0x0001));break; // skcm r15,r12,#*
case 0xffd: SKIP(carryFlag == ((R13+CONST()) & 0x0001));break; // skcm r15,r13,#*
case 0xffe: SKIP(carryFlag == ((R14+CONST()) & 0x0001));break; // skcm r15,r14,#*
case 0xfff: SKIP(carryFlag == (FETCH() & 0x0001));break; // skcm r15,#*
